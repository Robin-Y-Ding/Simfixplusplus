=================================================
Project : closure_75	start : 18/01/14 02:45
Current failed test : com.google.javascript.jscomp.PeepholeFoldConstantsTest::testIEString | 18/01/14 02:46
Sun Jan 14 03:17:47 AEDT 2018 com.google.javascript.rhino.Node,1371
Sun Jan 14 03:18:46 AEDT 2018 com.google.javascript.rhino.Node,1400
Sun Jan 14 03:21:01 AEDT 2018 com.google.javascript.rhino.Node,1413
Sun Jan 14 03:21:10 AEDT 2018 Sun Jan 14 03:21:10 AEDT 2018 : com.google.javascript.rhino.Node,2247=>Find no block
Sun Jan 14 03:21:14 AEDT 2018 com.google.javascript.rhino.Node,2248
Sun Jan 14 03:21:23 AEDT 2018 com.google.javascript.rhino.Node,2249
Sun Jan 14 03:21:26 AEDT 2018 Sun Jan 14 03:21:26 AEDT 2018 : com.google.javascript.rhino.Node,2250=>Find no block
Sun Jan 14 03:21:29 AEDT 2018 com.google.javascript.jscomp.NodeUtil,375
Sun Jan 14 03:22:14 AEDT 2018 com.google.javascript.jscomp.NodeUtil,364
Sun Jan 14 03:30:04 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,355
Sun Jan 14 03:50:15 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,357
Sun Jan 14 03:50:19 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,358
Sun Jan 14 03:50:23 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,359
Sun Jan 14 03:50:26 AEDT 2018 com.google.javascript.jscomp.NodeUtil,301
Sun Jan 14 03:59:04 AEDT 2018 com.google.javascript.jscomp.NodeUtil,315
Sun Jan 14 04:03:11 AEDT 2018 com.google.javascript.jscomp.NodeUtil,317
Sun Jan 14 04:08:09 AEDT 2018 com.google.javascript.jscomp.NodeUtil,321
Sun Jan 14 04:14:27 AEDT 2018 com.google.javascript.jscomp.NodeUtil,332
Sun Jan 14 04:20:21 AEDT 2018 com.google.javascript.jscomp.NodeUtil,342
Sun Jan 14 04:29:05 AEDT 2018 com.google.javascript.jscomp.NodeUtil,349
Sun Jan 14 04:37:22 AEDT 2018 com.google.javascript.jscomp.NodeUtil,356
Sun Jan 14 05:02:24 AEDT 2018 com.google.javascript.jscomp.NodeUtil,357
Sun Jan 14 05:02:28 AEDT 2018 Sun Jan 14 05:02:28 AEDT 2018 : com.google.javascript.jscomp.NodeUtil,359=>Find no block
Sun Jan 14 05:02:30 AEDT 2018 Sun Jan 14 05:02:30 AEDT 2018 : com.google.javascript.jscomp.NodeUtil,363=>Find no block
Sun Jan 14 05:02:32 AEDT 2018 com.google.javascript.jscomp.NodeUtil,366
Sun Jan 14 05:02:36 AEDT 2018 Sun Jan 14 05:02:36 AEDT 2018 : com.google.javascript.jscomp.NodeUtil,373=>Find no block
Sun Jan 14 05:02:39 AEDT 2018 com.google.javascript.jscomp.NodeUtil,387
Sun Jan 14 05:03:48 AEDT 2018 com.google.javascript.jscomp.CodeGenerator,1019
Sun Jan 14 05:09:08 AEDT 2018 com.google.javascript.jscomp.CodeGenerator,1128
Sun Jan 14 05:09:16 AEDT 2018 Sun Jan 14 05:09:16 AEDT 2018 : com.google.javascript.jscomp.CodeGenerator,1132=>Find no block
Sun Jan 14 05:09:19 AEDT 2018 Sun Jan 14 05:09:19 AEDT 2018 : com.google.javascript.jscomp.CodeGenerator,1133=>Find no block
Sun Jan 14 05:09:23 AEDT 2018 com.google.javascript.jscomp.CodeGenerator,1145
Sun Jan 14 05:11:33 AEDT 2018 com.google.javascript.jscomp.CodeGenerator,1155
Sun Jan 14 05:21:17 AEDT 2018 Sun Jan 14 05:21:17 AEDT 2018 : com.google.javascript.jscomp.CodeGenerator,1160=>Find no block
Sun Jan 14 05:21:21 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,261

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
return ;
}

Time : 18/01/14 05:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.RETURN){
return ;
}
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 05:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.RETURN){
return ;
}
if(value!=Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 05:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n==null){
return ;
}
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
return ;
}

Time : 18/01/14 05:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Preconditions.checkState(!NodeUtil.isObjectLitKey(n,n.getParent()));
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
return ;
}

Time : 18/01/14 05:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 06:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
return ;
}

Time : 18/01/14 06:11
----------------------------------------
Sun Jan 14 06:16:36 AEDT 2018 com.google.javascript.jscomp.NodeUtil,2141
Sun Jan 14 06:16:57 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,250

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(result!=null){
return ;
}
double value=result;
Node replacement;

Time : 18/01/14 06:18
----------------------------------------
Sun Jan 14 06:22:28 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,253

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 06:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
return ;
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 06:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.CALL){
return ;
}
if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 06:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.CALL){
return ;
}
if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
return ;
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 06:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 06:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.NAME){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 07:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.NAME){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
return ;
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}

Time : 18/01/14 07:18
----------------------------------------
Sun Jan 14 07:26:16 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,255
Sun Jan 14 07:26:19 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,257
Sun Jan 14 07:26:22 AEDT 2018 com.google.javascript.jscomp.PeepholeFoldConstants,264

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getType()!=Token.FUNCTION){
return ;
}
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 07:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.RETURN){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 07:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.CALL){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 07:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(replacement.getType()!=Token.STRING){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 07:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.CALL){
return ;
}
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 08:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.CALL){
return ;
}
if(replacement.getType()!=Token.STRING){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 08:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(value)){
replacement=Node.newString(Token.NAME,"NaN");
}else if(value==Double.POSITIVE_INFINITY){
replacement=Node.newString(Token.NAME,"Infinity");
}else if(value==Double.NEGATIVE_INFINITY){
replacement=new Node(Token.NEG,Node.newString(Token.NAME,"Infinity"));
replacement.copyInformationFromForTree(n);
}else {
replacement=Node.newNumber(value);
}
if(n.getType()!=Token.CALL){
return ;
}
if(n.getFirstChild().getType()!=Token.GETPROP){
return ;
}
if(replacement.getType()!=Token.STRING){
return ;
}
n.getParent().replaceChild(n,replacement);

Time : 18/01/14 08:14
----------------------------------------
Timeout time : 18/01/14 08:18
