=================================================
Project : closure_103	start : 18/01/13 22:36
Current failed test : com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty | 18/01/13 22:37
Sat Jan 13 22:42:46 AEDT 2018 com.google.javascript.rhino.Node,1330
Sat Jan 13 22:43:20 AEDT 2018 Sat Jan 13 22:43:20 AEDT 2018 : com.google.javascript.rhino.jstype.JSTypeRegistry,564=>Find no block
Sat Jan 13 22:43:24 AEDT 2018 Sat Jan 13 22:43:24 AEDT 2018 : com.google.javascript.rhino.Node,177=>Find no block
Sat Jan 13 22:43:28 AEDT 2018 com.google.javascript.rhino.Node,197
Sat Jan 13 22:43:49 AEDT 2018 com.google.javascript.rhino.Node,213
Sat Jan 13 22:44:09 AEDT 2018 com.google.javascript.rhino.Node,222
Sat Jan 13 22:44:26 AEDT 2018 com.google.javascript.rhino.Node,803
Sat Jan 13 22:57:10 AEDT 2018 com.google.javascript.rhino.Node,804
Sat Jan 13 22:57:14 AEDT 2018 com.google.javascript.rhino.Node,805
Sat Jan 13 22:57:18 AEDT 2018 com.google.javascript.rhino.Node,808
Sat Jan 13 22:57:21 AEDT 2018 com.google.javascript.rhino.Node,809
Sat Jan 13 22:57:25 AEDT 2018 com.google.javascript.rhino.Node,810
Sat Jan 13 22:57:28 AEDT 2018 com.google.javascript.rhino.Node,811
Sat Jan 13 22:57:32 AEDT 2018 com.google.javascript.rhino.Node,814
Sat Jan 13 22:57:36 AEDT 2018 com.google.javascript.rhino.Node,815
Sat Jan 13 22:57:39 AEDT 2018 com.google.javascript.rhino.Node,872
Sat Jan 13 22:57:48 AEDT 2018 com.google.javascript.rhino.Node,881
Sat Jan 13 23:00:37 AEDT 2018 com.google.javascript.rhino.Node,882
Sat Jan 13 23:00:41 AEDT 2018 com.google.javascript.rhino.Node,883
Sat Jan 13 23:00:45 AEDT 2018 com.google.javascript.rhino.Node,895
Timeout time : 18/01/14 00:22
Current failed test : com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf | 18/01/14 00:22
Sun Jan 14 00:29:56 AEDT 2018 Sun Jan 14 00:29:56 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,77=>Find no block
Sun Jan 14 00:30:00 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,78
Sun Jan 14 00:34:56 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,79
Sun Jan 14 00:34:59 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,80
Sun Jan 14 00:35:03 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,81
Sun Jan 14 00:35:07 AEDT 2018 Sun Jan 14 00:35:07 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,82=>Find no block
Sun Jan 14 00:35:10 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,86
Sun Jan 14 00:49:08 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,88
Sun Jan 14 00:58:41 AEDT 2018 Sun Jan 14 00:58:41 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,92=>Find no block
Sun Jan 14 00:58:45 AEDT 2018 Sun Jan 14 00:58:45 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,94=>Find no block
Sun Jan 14 00:58:49 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,97
Timeout time : 18/01/14 02:09
Current failed test : com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException | 18/01/14 02:09
Sun Jan 14 02:17:28 AEDT 2018 com.google.javascript.jscomp.ControlFlowAnalysis,628
Sun Jan 14 02:39:16 AEDT 2018 Sun Jan 14 02:39:16 AEDT 2018 : com.google.javascript.jscomp.ControlFlowAnalysis,637=>Find no block
Sun Jan 14 02:39:20 AEDT 2018 com.google.javascript.jscomp.JSError,215
Sun Jan 14 02:39:30 AEDT 2018 com.google.javascript.jscomp.CheckUnreachableCode,65

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 02:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.THIS){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 02:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 02:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 02:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 02:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 02:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/14 03:55
----------------------------------------
Timeout time : 18/01/14 03:58
