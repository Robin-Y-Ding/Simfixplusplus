=================================================
Project : math_58	start : 18/01/14 03:19
Current failed test : org.apache.commons.math.optimization.fitting.GaussianFitterTest::testMath519 | 18/01/14 03:19
Sun Jan 14 03:20:19 AEDT 2018 org.apache.commons.math.exception.MathRuntimeException,102
Sun Jan 14 03:20:46 AEDT 2018 org.apache.commons.math.exception.MathRuntimeException,108
Sun Jan 14 03:21:30 AEDT 2018 org.apache.commons.math.exception.MathRuntimeException,114
Sun Jan 14 03:22:14 AEDT 2018 org.apache.commons.math.exception.NotStrictlyPositiveException,38
Sun Jan 14 03:22:20 AEDT 2018 Sun Jan 14 03:22:20 AEDT 2018 : org.apache.commons.math.exception.NotStrictlyPositiveException,39=>Find no block
Sun Jan 14 03:22:22 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,384

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.0;
}

Time : 18/01/14 03:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=costRelativeTolerance&&preRed<=costRelativeTolerance&&ratio<=2.0)||lmPar<=parRelativeTolerance*lmNorm){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||lmPar<=parRelativeTolerance*lmNorm){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(delta)<=0.1*lmNorm)||((ratio==0)&&(delta<=lmPar))){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||((ratio==0)&&(delta<=lmPar))){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)&&(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=2.2204E-16)&&(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=2.2204E-16)&&(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)&&(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((FastMath.abs(actRed)<=2.2204E-16)||(lmPar<=2.2204E-16)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((rank+1>=rank)||(ratio>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(delta<=lmPar)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)&&(delta<=lmPar)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((rank+1>=rank)||(delta<=lmPar)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(lmNorm>ratio||lmNorm<-lmPar){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 03:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||lmNorm<-lmPar){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((delta==0)||(delta>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar<=lmNorm)||(lmPar<=ratio)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(lmPar<=ratio)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar==0)||(delta>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((delta==0)||(lmPar<=ratio)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((lmPar<=lmNorm)||(delta>=0.75)){
delta=2*lmNorm;
lmPar*=0.5;
}

Time : 18/01/14 04:13
----------------------------------------
Sun Jan 14 04:21:24 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,386
Sun Jan 14 04:21:25 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,389
Sun Jan 14 04:21:27 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,390
Sun Jan 14 04:21:30 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,391
Sun Jan 14 04:21:32 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,417
Sun Jan 14 04:36:45 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,418
Sun Jan 14 04:48:30 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,419
Sun Jan 14 04:48:31 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,420
Sun Jan 14 04:48:33 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,422
Sun Jan 14 05:00:31 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,423
Sun Jan 14 05:02:04 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,424
Sun Jan 14 05:03:41 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,425
Sun Jan 14 05:05:22 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,426
Sun Jan 14 05:06:24 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,427
Sun Jan 14 05:06:27 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,516
Sun Jan 14 05:10:55 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,517

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}

Time : 18/01/14 05:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][j]*work1[permutation[i]];
}

Time : 18/01/14 05:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][permutation[pj]]*work1[permutation[i]];
}

Time : 18/01/14 05:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
work2=work2;
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}

Time : 18/01/14 05:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}

Time : 18/01/14 05:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][j]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}

Time : 18/01/14 05:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}

Time : 18/01/14 06:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<rank;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}

Time : 18/01/14 06:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(rank==solvedCols){
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
work1[pj]*=diag[pj]/dxNorm;
}
sum2=0;
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);
}

Time : 18/01/14 06:52
----------------------------------------
Sun Jan 14 06:56:26 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,518
Sun Jan 14 06:56:28 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,519
Sun Jan 14 06:56:31 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,520
Sun Jan 14 06:56:33 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,522
Sun Jan 14 07:11:33 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,523
Sun Jan 14 07:11:36 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,524
Sun Jan 14 07:11:39 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,525
Sun Jan 14 07:11:41 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,526
Sun Jan 14 07:11:43 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,527
Sun Jan 14 07:11:45 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,529
Sun Jan 14 07:11:46 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,530
Sun Jan 14 07:11:48 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,531
Sun Jan 14 07:11:50 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,533

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<=j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);

Time : 18/01/14 07:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][j]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[pj];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);

Time : 18/01/14 07:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<solvedCols;++j){
int pj=permutation[j];
double sum=0;
for(int i=0;i<j;++i){
sum+=weightedResidualJacobian[i][pj]*work1[permutation[i]];
}
double s=(work1[pj]-sum)/diagR[j];
work1[pj]=s;
sum2+=s*s;
}
parl=fp/(delta*sum2);

Time : 18/01/14 07:45
----------------------------------------
Sun Jan 14 08:15:09 AEDT 2018 org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer,537
Timeout time : 18/01/14 08:20
