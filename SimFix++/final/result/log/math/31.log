=================================================
Project : math_31	start : 18/01/14 07:18
Current failed test : org.apache.commons.math3.distribution.FDistributionTest::testMath785 | 18/01/14 07:20
Sun Jan 14 07:22:33 AEDT 2018 Sun Jan 14 07:22:33 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,45=>Find no block
Sun Jan 14 07:22:40 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,46
Sun Jan 14 07:22:51 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,47
Sun Jan 14 07:22:57 AEDT 2018 Sun Jan 14 07:22:57 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,48=>Find no block
Sun Jan 14 07:23:02 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,69
Sun Jan 14 07:23:16 AEDT 2018 Sun Jan 14 07:23:16 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,70=>Find no block
Sun Jan 14 07:23:23 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,74
Sun Jan 14 07:23:37 AEDT 2018 Sun Jan 14 07:23:37 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,48=>Find no block
Sun Jan 14 07:23:42 AEDT 2018 org.apache.commons.math3.exception.ConvergenceException,49
Sun Jan 14 07:24:54 AEDT 2018 Sun Jan 14 07:24:54 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,50=>Find no block
Sun Jan 14 07:24:59 AEDT 2018 org.apache.commons.math3.util.ContinuedFraction,177
Sun Jan 14 07:52:30 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,178
Sun Jan 14 07:52:50 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,194
Sun Jan 14 07:54:56 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,230
Sun Jan 14 07:55:17 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,231
Sun Jan 14 07:55:23 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,233
Sun Jan 14 07:55:30 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return 1;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 07:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 07:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||(x<=0.0)){
ret=0;
}else {
double n=x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return x>0?0:2;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return 1/(x*x);
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return Math.PI/2.0;
}
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return Math.PI/2.0;
}
if(x<=0){
ret=0;
return 0.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return Math.PI/2.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(DEFAULT_INVERSE_ABSOLUTE_ACCURACY)<=solverAbsoluteAccuracy){
return x;
}
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(DEFAULT_INVERSE_ABSOLUTE_ACCURACY)<=solverAbsoluteAccuracy){
return x;
}
if(x<=0){
ret=0;
return x;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return Double.POSITIVE_INFINITY;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return Math.PI;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
return 1.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/14 08:30
----------------------------------------
Sun Jan 14 08:32:56 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,163
Sun Jan 14 08:33:13 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,191
Sun Jan 14 08:34:27 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,193
Sun Jan 14 08:34:32 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,214
Sun Jan 14 08:34:48 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,215
Sun Jan 14 08:34:53 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,216
Sun Jan 14 08:35:01 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,218
Sun Jan 14 08:35:18 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,227
Sun Jan 14 08:36:47 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,229
Sun Jan 14 08:36:53 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,248
Sun Jan 14 08:37:10 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,260
Sun Jan 14 08:37:27 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,172
Sun Jan 14 08:37:44 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,147
Sun Jan 14 08:37:52 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,148
Sun Jan 14 08:37:59 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,150
Sun Jan 14 08:38:07 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,144
Sun Jan 14 08:38:13 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,154

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return 1;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 08:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return x>0?0:2;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 08:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
}else {
double n=x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 08:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(Double.isNaN(x)||(x<=0.0)){
ret=0;
}else {
double n=x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 08:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return x;

Time : 18/01/14 08:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return 1/(x*x);
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 08:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return 0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return x;

Time : 18/01/14 08:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return 0.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return Math.PI/2.0;

Time : 18/01/14 09:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return Math.PI;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 09:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return Math.PI;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
if(x==1.0){
return 0.0;
}
return ret;

Time : 18/01/14 09:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return Math.PI/2.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 09:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return Math.PI/2.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return -Math.PI/2.0;

Time : 18/01/14 09:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return x;

Time : 18/01/14 09:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<0){
ret=0;
return 0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return x;

Time : 18/01/14 09:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return Double.POSITIVE_INFINITY;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 09:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double ret;
if(x<=0){
ret=0;
return 1.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}
return ret;

Time : 18/01/14 09:27
----------------------------------------
Sun Jan 14 09:29:54 AEDT 2018 org.apache.commons.math3.analysis.solvers.BrentSolver,108

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(yInitial*max<0){
return brent(min,initial,yMin,yInitial);
}
double yMax=computeObjectiveValue(max);
if(FastMath.abs(yMax)<=functionValueAccuracy){
return max;
}

Time : 18/01/14 09:51
----------------------------------------
Timeout time : 18/01/14 09:53
Current failed test : org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718 | 18/01/14 09:53
Sun Jan 14 09:55:51 AEDT 2018 Sun Jan 14 09:55:51 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,45=>Find no block
Sun Jan 14 09:56:00 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,46
Sun Jan 14 09:56:21 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,47
Sun Jan 14 09:56:26 AEDT 2018 Sun Jan 14 09:56:26 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,48=>Find no block
Sun Jan 14 09:56:32 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,69
Sun Jan 14 09:56:44 AEDT 2018 Sun Jan 14 09:56:44 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,70=>Find no block
Sun Jan 14 09:56:50 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,74
Sun Jan 14 09:57:05 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,80
Sun Jan 14 09:58:18 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,86
Sun Jan 14 09:59:29 AEDT 2018 Sun Jan 14 09:59:29 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,48=>Find no block
Sun Jan 14 09:59:37 AEDT 2018 org.apache.commons.math3.exception.ConvergenceException,49
Sun Jan 14 10:00:53 AEDT 2018 Sun Jan 14 10:00:53 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,50=>Find no block
Sun Jan 14 10:00:59 AEDT 2018 org.apache.commons.math3.util.ContinuedFraction,177
Sun Jan 14 10:25:44 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,114
Sun Jan 14 10:26:34 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,124

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return (p*(1-p))/p;

Time : 18/01/14 10:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return probabilityOfSuccess*FastMath.pow(p,1/probabilityOfSuccess);

Time : 18/01/14 10:30
----------------------------------------
Sun Jan 14 10:33:06 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,125
Sun Jan 14 10:33:12 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,137
Sun Jan 14 10:34:51 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,149
Sun Jan 14 10:36:28 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,96
Sun Jan 14 10:44:41 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,98
Sun Jan 14 10:44:42 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,101
Sun Jan 14 10:44:48 AEDT 2018 Sun Jan 14 10:44:48 AEDT 2018 : org.apache.commons.math3.distribution.BinomialDistribution,49=>Find no block
Sun Jan 14 10:44:53 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,50
Sun Jan 14 10:45:06 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,54
Sun Jan 14 10:48:40 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,58
Sun Jan 14 10:53:03 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,59
Sun Jan 14 10:53:09 AEDT 2018 Sun Jan 14 10:53:09 AEDT 2018 : org.apache.commons.math3.distribution.BinomialDistribution,60=>Find no block
Sun Jan 14 10:53:11 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,104
Sun Jan 14 11:11:28 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,105
Sun Jan 14 11:11:34 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,106
Sun Jan 14 11:11:40 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,107
Sun Jan 14 11:11:47 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,109
Sun Jan 14 11:11:53 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,110
Sun Jan 14 11:11:57 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,111
Sun Jan 14 11:12:03 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,112
Sun Jan 14 11:12:10 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,133
Sun Jan 14 11:20:20 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,134
Sun Jan 14 11:20:26 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,143
Sun Jan 14 11:20:32 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,200
Sun Jan 14 11:25:34 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,201
Sun Jan 14 11:25:41 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,99

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(p==1.0){
return upper;
}
 final double mu=getNumericalMean();
 final double sigma=(mu<1.0E-15)?FastMath.sqrt(getNumericalVariance()):FastMath.pow(0.01/mu,1.0/upper);

Time : 18/01/14 11:28
----------------------------------------
Sun Jan 14 11:33:18 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,100
Sun Jan 14 11:35:23 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,101
Sun Jan 14 11:35:29 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,103
Sun Jan 14 11:35:35 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,116
Sun Jan 14 11:47:07 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,132
Sun Jan 14 11:47:14 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,79
Sun Jan 14 11:55:26 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,80
Sun Jan 14 11:55:32 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,83
Sun Jan 14 11:59:49 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,88
Sun Jan 14 11:59:55 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,92
Sun Jan 14 12:05:40 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,93
Sun Jan 14 12:05:46 AEDT 2018 org.apache.commons.math3.util.ArithmeticUtils,299
Sun Jan 14 12:09:45 AEDT 2018 org.apache.commons.math3.util.ArithmeticUtils,303
Sun Jan 14 12:16:14 AEDT 2018 org.apache.commons.math3.util.ArithmeticUtils,306
Sun Jan 14 12:20:41 AEDT 2018 org.apache.commons.math3.util.FastMath,3361
Timeout time : 18/01/14 12:25
