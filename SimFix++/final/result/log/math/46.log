=================================================
Project : math_46	start : 18/01/14 07:25
Current failed test : org.apache.commons.math.complex.ComplexTest::testAtanI | 18/01/14 07:27
Sun Jan 14 07:29:16 AEDT 2018 org.apache.commons.math.complex.Complex,260
Sun Jan 14 07:29:27 AEDT 2018 org.apache.commons.math.complex.Complex,587
Sun Jan 14 07:36:16 AEDT 2018 org.apache.commons.math.util.FastMath,1284
Sun Jan 14 07:39:14 AEDT 2018 org.apache.commons.math.util.FastMath,1288

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==Double.POSITIVE_INFINITY){
if(hiPrec!=null){
hiPrec[0]=Double.POSITIVE_INFINITY;
}
return Double.NaN;
}

Time : 18/01/14 07:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==Double.POSITIVE_INFINITY){
if(E>=TWO_POWER_52||E<=-TWO_POWER_52){
return pow(-x,E);
}
if(hiPrec!=null){
hiPrec[0]=Double.POSITIVE_INFINITY;
}
return Double.NaN;
}

Time : 18/01/14 07:50
----------------------------------------
Sun Jan 14 07:54:08 AEDT 2018 org.apache.commons.math.complex.Complex,583
Sun Jan 14 07:56:08 AEDT 2018 org.apache.commons.math.util.FastMath,3004
Sun Jan 14 08:01:39 AEDT 2018 org.apache.commons.math.util.FastMath,3005
Sun Jan 14 08:01:47 AEDT 2018 org.apache.commons.math.complex.Complex,430

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(real)||Double.isInfinite(imaginary)){
return INF;
}

Time : 18/01/14 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)&&Double.isInfinite(imaginary)){
return INF;
}

Time : 18/01/14 08:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(imaginary)||Double.isNaN(imaginary)){
return INF;
}

Time : 18/01/14 08:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

Time : 18/01/14 08:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)||Double.isInfinite(imaginary)){
return NaN;
}

Time : 18/01/14 08:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)||Double.isNaN(real)){
return NaN;
}

Time : 18/01/14 08:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(real)||Double.isNaN(imaginary)){
return NaN;
}

Time : 18/01/14 08:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(imaginary)||Double.isInfinite(imaginary)){
return INF;
}

Time : 18/01/14 08:23
----------------------------------------
Sun Jan 14 08:26:32 AEDT 2018 org.apache.commons.math.complex.Complex,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 08:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=c/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=d/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(d)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(c)<FastMath.abs(c)){
double q=real/d;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/real;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(d)<FastMath.abs(c)){
double q=real/imaginary;
double denominator=c*q+d;
return createComplex((real*q+imaginary)/denominator,(imaginary*q-real)/denominator);
}else {
double q=imaginary/c;
double denominator=d*q+c;
return createComplex((imaginary*q+real)/denominator,(imaginary-real*q)/denominator);
}

Time : 18/01/14 09:58
----------------------------------------
Timeout time : 18/01/14 10:01
Current failed test : org.apache.commons.math.complex.ComplexTest::testDivideZero | 18/01/14 10:01
Sun Jan 14 10:03:19 AEDT 2018 org.apache.commons.math.complex.Complex,1183
Sun Jan 14 10:04:40 AEDT 2018 org.apache.commons.math.complex.Complex,260
Sun Jan 14 10:04:57 AEDT 2018 org.apache.commons.math.complex.Complex,329
Sun Jan 14 10:10:12 AEDT 2018 org.apache.commons.math.complex.Complex,258
Sun Jan 14 10:10:21 AEDT 2018 org.apache.commons.math.complex.Complex,253
Sun Jan 14 10:13:10 AEDT 2018 org.apache.commons.math.complex.Complex,254
Sun Jan 14 10:16:19 AEDT 2018 org.apache.commons.math.complex.Complex,327
Sun Jan 14 10:20:22 AEDT 2018 org.apache.commons.math.complex.Complex,328
Sun Jan 14 10:20:30 AEDT 2018 org.apache.commons.math.complex.Complex,326
Sun Jan 14 10:20:39 AEDT 2018 org.apache.commons.math.complex.Complex,323

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=other){
return true;
}

Time : 18/01/14 10:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=null){
return true;
}

Time : 18/01/14 10:27
----------------------------------------
Sun Jan 14 10:30:33 AEDT 2018 Sun Jan 14 10:30:33 AEDT 2018 : org.apache.commons.math.util.MathUtils,2337=>Find no block
Sun Jan 14 10:30:39 AEDT 2018 org.apache.commons.math.util.MathUtils,2334
Sun Jan 14 10:32:38 AEDT 2018 Sun Jan 14 10:32:38 AEDT 2018 : org.apache.commons.math.complex.Complex,99=>Find no block
Sun Jan 14 10:32:44 AEDT 2018 org.apache.commons.math.complex.Complex,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(imaginary)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 18/01/14 10:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(real);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 18/01/14 10:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isInfinite(real)||Double.isNaN(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 18/01/14 10:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.real=real;
this.imaginary=imaginary;
isNaN=Double.isNaN(real)||Double.isInfinite(imaginary);
isInfinite=!isNaN&&(Double.isInfinite(real)||Double.isInfinite(imaginary));
isZero=real==0&&imaginary==0;

Time : 18/01/14 10:44
----------------------------------------
Sun Jan 14 10:49:21 AEDT 2018 org.apache.commons.math.complex.Complex,101
Sun Jan 14 10:49:29 AEDT 2018 org.apache.commons.math.complex.Complex,103
Sun Jan 14 10:49:39 AEDT 2018 org.apache.commons.math.complex.Complex,104
Sun Jan 14 10:49:47 AEDT 2018 org.apache.commons.math.complex.Complex,106
Sun Jan 14 10:49:55 AEDT 2018 Sun Jan 14 10:49:55 AEDT 2018 : org.apache.commons.math.complex.Complex,107=>Find no block
Sun Jan 14 10:50:03 AEDT 2018 org.apache.commons.math.exception.NumberIsTooSmallException,50
Sun Jan 14 10:50:21 AEDT 2018 Sun Jan 14 10:50:21 AEDT 2018 : org.apache.commons.math.exception.NumberIsTooSmallException,54=>Find no block
Sun Jan 14 10:50:27 AEDT 2018 org.apache.commons.math.exception.NumberIsTooSmallException,68
Sun Jan 14 10:52:54 AEDT 2018 org.apache.commons.math.exception.NumberIsTooSmallException,70
Sun Jan 14 10:53:02 AEDT 2018 org.apache.commons.math.exception.NumberIsTooSmallException,71
Sun Jan 14 10:53:05 AEDT 2018 Sun Jan 14 10:53:05 AEDT 2018 : org.apache.commons.math.exception.NumberIsTooSmallException,72=>Find no block
Sun Jan 14 10:53:13 AEDT 2018 org.apache.commons.math.exception.NumberIsTooSmallException,78
Sun Jan 14 10:53:33 AEDT 2018 org.apache.commons.math.exception.NumberIsTooSmallException,85
Sun Jan 14 10:53:56 AEDT 2018 org.apache.commons.math.exception.MathIllegalNumberException,46
Sun Jan 14 10:56:10 AEDT 2018 org.apache.commons.math.exception.MathIllegalNumberException,47
Sun Jan 14 10:56:20 AEDT 2018 Sun Jan 14 10:56:20 AEDT 2018 : org.apache.commons.math.exception.MathIllegalNumberException,48=>Find no block
Sun Jan 14 10:56:29 AEDT 2018 org.apache.commons.math.exception.MathIllegalNumberException,54
Sun Jan 14 10:56:44 AEDT 2018 Sun Jan 14 10:56:44 AEDT 2018 : org.apache.commons.math.exception.MathIllegalArgumentException,44=>Find no block
Sun Jan 14 10:56:51 AEDT 2018 Sun Jan 14 10:56:51 AEDT 2018 : org.apache.commons.math.exception.MathIllegalArgumentException,37=>Find no block
Sun Jan 14 10:56:59 AEDT 2018 org.apache.commons.math.exception.MathIllegalArgumentException,45
Sun Jan 14 10:57:17 AEDT 2018 Sun Jan 14 10:57:17 AEDT 2018 : org.apache.commons.math.exception.MathIllegalArgumentException,46=>Find no block
Sun Jan 14 10:57:24 AEDT 2018 org.apache.commons.math.exception.MathIllegalArgumentException,50
Sun Jan 14 10:57:41 AEDT 2018 org.apache.commons.math.exception.MathIllegalArgumentException,55
Sun Jan 14 10:58:03 AEDT 2018 org.apache.commons.math.exception.MathIllegalArgumentException,61
Sun Jan 14 10:59:37 AEDT 2018 org.apache.commons.math.exception.MathIllegalArgumentException,67
Sun Jan 14 11:01:07 AEDT 2018 org.apache.commons.math.exception.NotPositiveException,37
Sun Jan 14 11:01:24 AEDT 2018 Sun Jan 14 11:01:24 AEDT 2018 : org.apache.commons.math.exception.NotPositiveException,38=>Find no block
Sun Jan 14 11:01:32 AEDT 2018 org.apache.commons.math.exception.NotPositiveException,47
Sun Jan 14 11:02:28 AEDT 2018 Sun Jan 14 11:02:28 AEDT 2018 : org.apache.commons.math.exception.NotPositiveException,48=>Find no block
Sun Jan 14 11:02:36 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,61
Sun Jan 14 11:02:55 AEDT 2018 Sun Jan 14 11:02:55 AEDT 2018 : org.apache.commons.math.exception.NonMonotonousSequenceException,62=>Find no block
Sun Jan 14 11:03:04 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,80
Sun Jan 14 11:06:16 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,89
Sun Jan 14 11:06:25 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,90
Sun Jan 14 11:06:34 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,91
Sun Jan 14 11:06:43 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,92
Sun Jan 14 11:06:51 AEDT 2018 Sun Jan 14 11:06:51 AEDT 2018 : org.apache.commons.math.exception.NonMonotonousSequenceException,93=>Find no block
Sun Jan 14 11:07:01 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,99
Sun Jan 14 11:07:21 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,105
Sun Jan 14 11:07:42 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,113
Sun Jan 14 11:09:46 AEDT 2018 org.apache.commons.math.exception.NonMonotonousSequenceException,119
Sun Jan 14 11:10:06 AEDT 2018 Sun Jan 14 11:10:06 AEDT 2018 : org.apache.commons.math.util.MathUtils,1946=>Find no block
Sun Jan 14 11:10:15 AEDT 2018 Sun Jan 14 11:10:15 AEDT 2018 : org.apache.commons.math.util.MathUtils,1946=>Find no block
Sun Jan 14 11:10:23 AEDT 2018 Sun Jan 14 11:10:23 AEDT 2018 : org.apache.commons.math.util.MathUtils,1946=>Find no block
Sun Jan 14 11:10:33 AEDT 2018 Sun Jan 14 11:10:33 AEDT 2018 : org.apache.commons.math.exception.MathArithmeticException,43=>Find no block
Sun Jan 14 11:10:42 AEDT 2018 Sun Jan 14 11:10:42 AEDT 2018 : org.apache.commons.math.exception.MathArithmeticException,38=>Find no block
Sun Jan 14 11:10:51 AEDT 2018 org.apache.commons.math.exception.MathArithmeticException,44
Sun Jan 14 11:12:52 AEDT 2018 Sun Jan 14 11:12:52 AEDT 2018 : org.apache.commons.math.exception.MathArithmeticException,45=>Find no block
Sun Jan 14 11:13:00 AEDT 2018 Sun Jan 14 11:13:00 AEDT 2018 : org.apache.commons.math.exception.MathArithmeticException,55=>Find no block
Sun Jan 14 11:13:08 AEDT 2018 org.apache.commons.math.exception.MathArithmeticException,56
Sun Jan 14 11:13:17 AEDT 2018 Sun Jan 14 11:13:17 AEDT 2018 : org.apache.commons.math.exception.MathArithmeticException,57=>Find no block
Sun Jan 14 11:13:25 AEDT 2018 org.apache.commons.math.exception.MathArithmeticException,61
Sun Jan 14 11:13:31 AEDT 2018 org.apache.commons.math.exception.MathArithmeticException,66
Sun Jan 14 11:13:37 AEDT 2018 org.apache.commons.math.exception.MathArithmeticException,72
Sun Jan 14 11:13:44 AEDT 2018 org.apache.commons.math.exception.MathArithmeticException,78
Sun Jan 14 11:13:52 AEDT 2018 org.apache.commons.math.exception.NumberIsTooLargeException,50
Sun Jan 14 11:14:08 AEDT 2018 Sun Jan 14 11:14:08 AEDT 2018 : org.apache.commons.math.exception.NumberIsTooLargeException,54=>Find no block
Sun Jan 14 11:14:15 AEDT 2018 org.apache.commons.math.exception.NumberIsTooLargeException,67
Sun Jan 14 11:16:30 AEDT 2018 org.apache.commons.math.exception.NumberIsTooLargeException,69
Sun Jan 14 11:16:34 AEDT 2018 org.apache.commons.math.exception.NumberIsTooLargeException,70
Sun Jan 14 11:16:40 AEDT 2018 Sun Jan 14 11:16:40 AEDT 2018 : org.apache.commons.math.exception.NumberIsTooLargeException,71=>Find no block
Sun Jan 14 11:16:46 AEDT 2018 org.apache.commons.math.exception.NumberIsTooLargeException,77
Sun Jan 14 11:16:57 AEDT 2018 org.apache.commons.math.exception.NumberIsTooLargeException,84
Sun Jan 14 11:17:16 AEDT 2018 org.apache.commons.math.exception.NullArgumentException,41
Sun Jan 14 11:17:36 AEDT 2018 Sun Jan 14 11:17:36 AEDT 2018 : org.apache.commons.math.exception.NullArgumentException,42=>Find no block
Sun Jan 14 11:17:43 AEDT 2018 org.apache.commons.math.exception.NullArgumentException,50
Sun Jan 14 11:19:36 AEDT 2018 Sun Jan 14 11:19:36 AEDT 2018 : org.apache.commons.math.exception.NullArgumentException,51=>Find no block
Sun Jan 14 11:19:43 AEDT 2018 org.apache.commons.math.exception.DimensionMismatchException,44
Sun Jan 14 11:24:56 AEDT 2018 org.apache.commons.math.exception.DimensionMismatchException,45
Sun Jan 14 11:25:06 AEDT 2018 Sun Jan 14 11:25:06 AEDT 2018 : org.apache.commons.math.exception.DimensionMismatchException,46=>Find no block
Sun Jan 14 11:25:15 AEDT 2018 org.apache.commons.math.exception.DimensionMismatchException,56
Sun Jan 14 11:25:39 AEDT 2018 Sun Jan 14 11:25:39 AEDT 2018 : org.apache.commons.math.exception.DimensionMismatchException,57=>Find no block
Sun Jan 14 11:25:48 AEDT 2018 org.apache.commons.math.exception.DimensionMismatchException,63
Sun Jan 14 11:27:39 AEDT 2018 org.apache.commons.math.exception.NotFiniteNumberException,40
Sun Jan 14 11:27:52 AEDT 2018 Sun Jan 14 11:27:52 AEDT 2018 : org.apache.commons.math.exception.NotFiniteNumberException,41=>Find no block
Sun Jan 14 11:27:59 AEDT 2018 org.apache.commons.math.exception.NotFiniteNumberException,53
Sun Jan 14 11:29:27 AEDT 2018 Sun Jan 14 11:29:27 AEDT 2018 : org.apache.commons.math.exception.NotFiniteNumberException,54=>Find no block
Sun Jan 14 11:29:33 AEDT 2018 Sun Jan 14 11:29:33 AEDT 2018 : org.apache.commons.math.util.MathUtils,2229=>Find no block
Sun Jan 14 11:29:42 AEDT 2018 Sun Jan 14 11:29:42 AEDT 2018 : org.apache.commons.math.util.MathUtils,2233=>Find no block
Sun Jan 14 11:29:49 AEDT 2018 org.apache.commons.math.util.MathUtils,2235
Sun Jan 14 11:30:06 AEDT 2018 org.apache.commons.math.util.MathUtils,2236
Sun Jan 14 11:30:28 AEDT 2018 org.apache.commons.math.util.MathUtils,2238
Sun Jan 14 11:30:44 AEDT 2018 org.apache.commons.math.util.MathUtils,2239
Sun Jan 14 11:31:13 AEDT 2018 org.apache.commons.math.util.MathUtils,2242
Sun Jan 14 11:31:30 AEDT 2018 org.apache.commons.math.util.MathUtils,2244
Sun Jan 14 11:31:44 AEDT 2018 org.apache.commons.math.util.MathUtils,101
Sun Jan 14 11:32:01 AEDT 2018 Sun Jan 14 11:32:01 AEDT 2018 : org.apache.commons.math.util.MathUtils,102=>Find no block
Sun Jan 14 11:32:10 AEDT 2018 org.apache.commons.math.util.MathUtils,115
Sun Jan 14 11:36:38 AEDT 2018 org.apache.commons.math.util.MathUtils,116
Sun Jan 14 11:42:10 AEDT 2018 org.apache.commons.math.util.MathUtils,117
Sun Jan 14 11:42:20 AEDT 2018 org.apache.commons.math.util.MathUtils,119
Sun Jan 14 11:42:29 AEDT 2018 org.apache.commons.math.util.MathUtils,133
Sun Jan 14 11:42:51 AEDT 2018 org.apache.commons.math.util.MathUtils,149
Sun Jan 14 12:09:08 AEDT 2018 org.apache.commons.math.util.MathUtils,151
Sun Jan 14 12:09:23 AEDT 2018 org.apache.commons.math.util.MathUtils,155
Sun Jan 14 12:09:31 AEDT 2018 org.apache.commons.math.util.MathUtils,156
Sun Jan 14 12:09:39 AEDT 2018 org.apache.commons.math.util.MathUtils,158
Sun Jan 14 12:09:48 AEDT 2018 org.apache.commons.math.util.MathUtils,159
Sun Jan 14 12:09:55 AEDT 2018 org.apache.commons.math.util.MathUtils,161
Sun Jan 14 12:10:03 AEDT 2018 org.apache.commons.math.util.MathUtils,165
Sun Jan 14 12:10:12 AEDT 2018 org.apache.commons.math.util.MathUtils,172
Sun Jan 14 12:10:22 AEDT 2018 org.apache.commons.math.util.MathUtils,173
Sun Jan 14 12:10:30 AEDT 2018 org.apache.commons.math.util.MathUtils,175
Sun Jan 14 12:10:38 AEDT 2018 org.apache.commons.math.util.MathUtils,179
Sun Jan 14 12:16:31 AEDT 2018 org.apache.commons.math.util.MathUtils,208
Sun Jan 14 12:31:14 AEDT 2018 org.apache.commons.math.util.MathUtils,209
Timeout time : 18/01/14 12:33
