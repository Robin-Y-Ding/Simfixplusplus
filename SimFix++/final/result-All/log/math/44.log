=================================================
Project : math_44	start : 18/01/12 19:06
Current failed test : org.apache.commons.math.ode.events.EventStateTest::testIssue695_purify_1 | 18/01/12 19:08
Fri Jan 12 19:09:30 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,209
Fri Jan 12 19:10:43 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,212
Fri Jan 12 19:10:45 AEDT 2018 Fri Jan 12 19:10:45 AEDT 2018 : org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,214=>Find no block
Fri Jan 12 19:10:46 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,252
Fri Jan 12 19:12:24 AEDT 2018 org.apache.commons.math.util.FastMath,3373
Fri Jan 12 19:58:50 AEDT 2018 org.apache.commons.math.util.FastMath,3375
Fri Jan 12 19:58:53 AEDT 2018 org.apache.commons.math.util.FastMath,3379
Fri Jan 12 20:24:51 AEDT 2018 org.apache.commons.math.ode.events.EventState,334

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
previousEventTime=t;
}

Time : 18/01/12 20:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
g0Positive=g0>=0;
}

Time : 18/01/12 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(nextAction==EventHandler.Action.RESET_STATE){
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));
g0Positive=increasing;
nextAction=handler.eventOccurred(t,y,!(increasing^forward));

nextAction=EventHandler.Action.CONTINUE;
handler.resetState(t,y);
}

Time : 18/01/12 21:01
----------------------------------------
Fri Jan 12 21:07:17 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,172
Fri Jan 12 21:07:22 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,173
Fri Jan 12 21:07:24 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,340

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(orderingSign>orderingSign){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(orderingSign>orderingSign){
System.arraycopy(eventY,0,y,0,orderingSign);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isLastStep){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isLastStep){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,yDot,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isLastStep){
stepSize=tEnd-stepStart;
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
interpolator.storeTime(stepStart+stepSize);
if(isLastStep){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
interpolator.storeTime(stepStart+stepSize);
if(isLastStep){
stepSize=tEnd-stepStart;
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(2*orderingSign==orderingSign){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(2*orderingSign==orderingSign){
System.arraycopy(yDot,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(eventY==null){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this.isLastStep){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
computeDerivatives(tEnd+tEnd,y,yDot);
if(isLastStep){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((tEnd>tEnd)){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(tEnd>tEnd){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((tEnd<tEnd)){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(tEnd<tEnd){
System.arraycopy(eventY,0,y,0,y.length);
computeDerivatives(eventT,y,yDot);
resetOccurred=true;
return eventT;
}

Time : 18/01/12 21:38
----------------------------------------
Timeout time : 18/01/12 21:39
Current failed test : org.apache.commons.math.ode.events.EventStateTest::testIssue695_purify_2 | 18/01/12 21:39
Fri Jan 12 21:41:24 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,209
Fri Jan 12 21:42:38 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,212
Fri Jan 12 21:42:40 AEDT 2018 Fri Jan 12 21:42:40 AEDT 2018 : org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,214=>Find no block
Fri Jan 12 21:42:41 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,252
Fri Jan 12 21:44:21 AEDT 2018 org.apache.commons.math.util.FastMath,3373
Fri Jan 12 22:30:16 AEDT 2018 org.apache.commons.math.util.FastMath,3375
Fri Jan 12 22:30:17 AEDT 2018 org.apache.commons.math.util.FastMath,3379
Fri Jan 12 22:55:35 AEDT 2018 org.apache.commons.math.ode.events.EventState,334
Fri Jan 12 23:07:18 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,172
Fri Jan 12 23:07:26 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,173
Fri Jan 12 23:07:29 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,340
Fri Jan 12 23:58:57 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,341
Fri Jan 12 23:58:59 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,342
Fri Jan 12 23:59:02 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,343
Fri Jan 12 23:59:04 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,337
Fri Jan 12 23:59:07 AEDT 2018 org.apache.commons.math.ode.events.EventState,329
Timeout time : 18/01/13 00:11
