=================================================
Project : math_87	start : 18/01/12 14:14
Current failed test : org.apache.commons.math.optimization.linear.SimplexSolverTest::testSingleVariableAndConstraint | 18/01/12 14:14
Fri Jan 12 14:15:56 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,291
Fri Jan 12 14:16:11 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,168
Fri Jan 12 14:17:03 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,151
Fri Jan 12 14:20:15 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,190
Fri Jan 12 14:20:26 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,70
Fri Jan 12 14:21:44 AEDT 2018 Fri Jan 12 14:21:44 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,48=>Find no block
Fri Jan 12 14:21:49 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,49
Fri Jan 12 14:29:03 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,50
Fri Jan 12 14:29:08 AEDT 2018 Fri Jan 12 14:29:08 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,51=>Find no block
Fri Jan 12 14:29:12 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,325
Fri Jan 12 14:31:54 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,326
Fri Jan 12 14:31:58 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,328

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Integer basicRow=getBasicRow(getNumObjectiveFunctions()+getOriginalNumDecisionVariables());
double mostNegative=numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();

Time : 18/01/12 14:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Integer basicRow=getBasicRow(getNumObjectiveFunctions()+getOriginalNumDecisionVariables());
int mostNegative=numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();

Time : 18/01/12 14:35
----------------------------------------
Fri Jan 12 14:36:07 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,329

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
mostNegative=mostNegative-mostNegative;
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 14:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
mostNegative=mostNegative;
mostNegative=mostNegative-mostNegative;
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 14:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
mostNegative=coefficients[0];
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=0;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=coefficients.length-1;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int mostNegative=coefficients.length-1;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int mostNegative=0;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=numArtificialVariables*numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int mostNegative=numArtificialVariables*numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int mostNegative=numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=2*numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int mostNegative=2*numArtificialVariables;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=basicRow==null?0:coefficients[numArtificialVariables]*epsilon;
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double mostNegative=basicRow==null?0:coefficients[numArtificialVariables];
Set<Integer> basicRows=new HashSet<Integer>();
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}

Time : 18/01/12 15:58
----------------------------------------
Fri Jan 12 15:59:23 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,330
Fri Jan 12 15:59:28 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,331
Fri Jan 12 15:59:33 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,332
Fri Jan 12 15:59:38 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,337
Fri Jan 12 15:59:43 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,338
Fri Jan 12 15:59:47 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,343

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
mostNegative=mostNegative-mostNegative;
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}
return new RealPointValuePair(coefficients,f.getValue(coefficients));

Time : 18/01/12 16:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
mostNegative=mostNegative;
mostNegative=mostNegative-mostNegative;
for(int i=0;i<coefficients.length;i++){
basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}
return new RealPointValuePair(coefficients,f.getValue(coefficients));

Time : 18/01/12 16:16
----------------------------------------
Fri Jan 12 16:29:19 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,458
Fri Jan 12 16:30:50 AEDT 2018 org.apache.commons.math.optimization.linear.LinearObjectiveFunction,92
Fri Jan 12 16:32:38 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,154
Fri Jan 12 16:44:15 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,192
Fri Jan 12 16:46:31 AEDT 2018 org.apache.commons.math.linear.RealVectorImpl,884
Fri Jan 12 18:09:53 AEDT 2018 org.apache.commons.math.linear.RealVectorImpl,885
Fri Jan 12 18:09:58 AEDT 2018 org.apache.commons.math.linear.RealVectorImpl,886
Fri Jan 12 18:10:03 AEDT 2018 org.apache.commons.math.linear.RealVectorImpl,887
Fri Jan 12 18:10:08 AEDT 2018 org.apache.commons.math.linear.RealVectorImpl,889
Fri Jan 12 18:10:13 AEDT 2018 org.apache.commons.math.linear.RealVectorImpl,1287
Fri Jan 12 18:57:30 AEDT 2018 Fri Jan 12 18:57:30 AEDT 2018 : org.apache.commons.math.linear.RealVectorImpl,1292=>Find no block
Fri Jan 12 18:57:34 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,146
Fri Jan 12 18:57:38 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,149
Fri Jan 12 18:57:43 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,150
Fri Jan 12 18:57:48 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,188
Fri Jan 12 18:57:53 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,189
Fri Jan 12 18:57:59 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,145
Fri Jan 12 18:59:22 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,161

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.EQ)){
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(constraint.getRelationship()==Relationship.EQ){
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.GEQ)){
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(constraint.getRelationship()==Relationship.GEQ){
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix[row][getSlackVariableOffset()-1]=matrix[0][getArtificialVariableOffset()+artificialVar]=1;
}

Time : 18/01/12 19:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.EQ)||(constraint.getRelationship()==Relationship.GEQ)){
matrix[row][getArtificialVariableOffset()+artificialVar++]=1;
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.EQ)){
matrix[row][getSlackVariableOffset()-1]=matrix[0][getArtificialVariableOffset()+artificialVar]=1;
}

Time : 18/01/12 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.EQ)){
matrix[row][getArtificialVariableOffset()+artificialVar++]=1;
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(constraint.getRelationship()==Relationship.EQ){
matrix[row][getSlackVariableOffset()-1]=matrix[0][getArtificialVariableOffset()+artificialVar]=1;
}

Time : 18/01/12 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(constraint.getRelationship()==Relationship.EQ){
matrix[row][getArtificialVariableOffset()+artificialVar++]=1;
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.GEQ)){
matrix[row][getSlackVariableOffset()-1]=matrix[0][getArtificialVariableOffset()+artificialVar]=1;
}

Time : 18/01/12 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((constraint.getRelationship()==Relationship.GEQ)){
matrix[row][getArtificialVariableOffset()+artificialVar++]=1;
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(constraint.getRelationship()==Relationship.GEQ){
matrix[row][getSlackVariableOffset()-1]=matrix[0][getArtificialVariableOffset()+artificialVar]=1;
}

Time : 18/01/12 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(constraint.getRelationship()==Relationship.GEQ){
matrix[row][getArtificialVariableOffset()+artificialVar++]=1;
matrix[row][getSlackVariableOffset()-1]=getInvertedCoeffiecientSum(constraint.getCoefficients());
}

Time : 18/01/12 19:15
----------------------------------------
Timeout time : 18/01/12 19:15
