=================================================
Project : time_17	start : 18/01/15 19:20
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug3476684_adjustOffset | 18/01/15 19:20
Mon Jan 15 19:22:46 AEDT 2018 org.joda.time.DateTimeZone,1167
Mon Jan 15 19:46:41 AEDT 2018 org.joda.time.DateTimeZone,1168
Mon Jan 15 19:46:42 AEDT 2018 org.joda.time.DateTimeZone,1169
Mon Jan 15 19:46:42 AEDT 2018 org.joda.time.DateTimeZone,1174
Mon Jan 15 19:46:43 AEDT 2018 org.joda.time.DateTimeZone,1175
Mon Jan 15 19:46:44 AEDT 2018 org.joda.time.DateTime,665
Mon Jan 15 19:47:31 AEDT 2018 org.joda.time.DateTime,666
Mon Jan 15 19:47:31 AEDT 2018 org.joda.time.DateTime,685
Mon Jan 15 19:48:19 AEDT 2018 org.joda.time.DateTime,686
Mon Jan 15 19:48:20 AEDT 2018 org.joda.time.DateTime,331
Mon Jan 15 19:48:40 AEDT 2018 Mon Jan 15 19:48:40 AEDT 2018 : org.joda.time.DateTime,333=>Find no block
Mon Jan 15 19:48:41 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1531
Mon Jan 15 19:49:49 AEDT 2018 org.joda.time.DateTime,1098
Mon Jan 15 19:49:51 AEDT 2018 org.joda.time.DateTime,1101

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hours==0){
return this;
}
long instant=getChronology().hours().getDifference(getMillis(),hours);
return withMillis(instant);

Time : 18/01/15 19:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
long instant=getChronology().hours().getDifference(getMillis(),hours);
return withMillis(instant);

Time : 18/01/15 19:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hours!=0){
return this;
}
long instant=getChronology().hours().add(getMillis(),hours);
return withMillis(instant);

Time : 18/01/15 19:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hours==0){
return this;
}
int instant=getChronology().hours().getDifference(getMillis(),hours);
return withMillis(instant);

Time : 18/01/15 20:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int instant=getChronology().hours().getDifference(getMillis(),hours);
return withMillis(instant);

Time : 18/01/15 20:02
----------------------------------------
Mon Jan 15 20:08:25 AEDT 2018 org.joda.time.DateTime,1102
Mon Jan 15 20:08:25 AEDT 2018 org.joda.time.base.AbstractInstant,71
Mon Jan 15 20:08:27 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,202
Mon Jan 15 20:21:02 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1535
Mon Jan 15 20:22:47 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1536
Mon Jan 15 20:22:48 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1574
Mon Jan 15 20:24:24 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,162
Mon Jan 15 20:37:29 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,163
Mon Jan 15 20:37:30 AEDT 2018 Mon Jan 15 20:37:30 AEDT 2018 : org.joda.time.tz.CachedDateTimeZone,164=>Find no block
Mon Jan 15 20:37:30 AEDT 2018 org.joda.time.DateTime,582
Mon Jan 15 20:38:24 AEDT 2018 org.joda.time.chrono.ZonedChronology,318

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=getOffsetToAdd(serialVersionUID);
return instant-(iTimeField?offset:getOffsetFromLocalToSubtract(instant));

Time : 18/01/15 20:40
----------------------------------------
Mon Jan 15 20:58:59 AEDT 2018 org.joda.time.chrono.ZonedChronology,319
Mon Jan 15 20:59:00 AEDT 2018 org.joda.time.chrono.ZonedChronology,320
Mon Jan 15 20:59:00 AEDT 2018 org.joda.time.base.AbstractInstant,424
Mon Jan 15 20:59:15 AEDT 2018 Mon Jan 15 20:59:15 AEDT 2018 : org.joda.time.tz.ZoneInfoProvider,152=>Find no block
Mon Jan 15 20:59:16 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,153
Mon Jan 15 21:00:04 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,154
Mon Jan 15 21:00:04 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,155
Mon Jan 15 21:00:05 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,150
Mon Jan 15 21:00:05 AEDT 2018 org.joda.time.DateTimeZone,212
Mon Jan 15 21:02:42 AEDT 2018 org.joda.time.DateTimeZone,210
Mon Jan 15 21:22:54 AEDT 2018 org.joda.time.DateTimeZone,211
Mon Jan 15 21:22:54 AEDT 2018 org.joda.time.DateTimeZone,204
Mon Jan 15 21:23:20 AEDT 2018 org.joda.time.DateTimeZone,207
Mon Jan 15 21:23:20 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,145
Mon Jan 15 21:25:02 AEDT 2018 org.joda.time.chrono.ZonedChronology,344
Mon Jan 15 22:24:54 AEDT 2018 org.joda.time.chrono.ZonedChronology,345
Mon Jan 15 22:24:54 AEDT 2018 org.joda.time.chrono.ZonedChronology,347
Mon Jan 15 22:24:54 AEDT 2018 org.joda.time.chrono.ZonedChronology,350
Mon Jan 15 22:24:55 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,136
Mon Jan 15 22:25:58 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,140
Mon Jan 15 22:32:12 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,141
Mon Jan 15 22:32:12 AEDT 2018 org.joda.time.base.AbstractInstant,262
Mon Jan 15 22:32:53 AEDT 2018 org.joda.time.base.AbstractInstant,265

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=readableInstant){
return true;
}
if(readableInstant instanceof ReadableInstant==false){
return false;
}
ReadableInstant otherInstant=(ReadableInstant)readableInstant;
return getMillis()==otherInstant.getMillis()&&FieldUtils.equals(getChronology(),otherInstant.getChronology());

Time : 18/01/15 22:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=null){
return true;
}
if(readableInstant instanceof ReadableInstant==false){
return false;
}
ReadableInstant otherInstant=(ReadableInstant)readableInstant;
return getMillis()==otherInstant.getMillis()&&FieldUtils.equals(getChronology(),otherInstant.getChronology());

Time : 18/01/15 22:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=readableInstant){
return true;
}
ReadableInstant otherInstant=(ReadableInstant)readableInstant;
return getMillis()==otherInstant.getMillis()&&FieldUtils.equals(getChronology(),otherInstant.getChronology());

Time : 18/01/15 22:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(this!=null){
return true;
}
ReadableInstant otherInstant=(ReadableInstant)readableInstant;
return getMillis()==otherInstant.getMillis()&&FieldUtils.equals(getChronology(),otherInstant.getChronology());

Time : 18/01/15 22:39
----------------------------------------
Mon Jan 15 22:40:42 AEDT 2018 org.joda.time.base.AbstractInstant,266
Mon Jan 15 22:40:42 AEDT 2018 Mon Jan 15 22:40:42 AEDT 2018 : org.joda.time.base.BaseDateTime,225=>Find no block
Mon Jan 15 22:40:42 AEDT 2018 org.joda.time.base.BaseDateTime,223
Mon Jan 15 22:40:44 AEDT 2018 org.joda.time.base.AbstractInstant,259
Mon Jan 15 22:40:44 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,160
Mon Jan 15 22:40:44 AEDT 2018 org.joda.time.field.PreciseDurationDateTimeField,127
Mon Jan 15 22:48:39 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,145
Mon Jan 15 22:51:37 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,146
Mon Jan 15 22:51:38 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,152
Mon Jan 15 22:53:46 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,153
Mon Jan 15 22:53:46 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,155
Mon Jan 15 22:54:56 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,156
Mon Jan 15 23:02:27 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,158
Mon Jan 15 23:02:27 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,159
Mon Jan 15 23:02:27 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,166
Mon Jan 15 23:07:22 AEDT 2018 Mon Jan 15 23:07:22 AEDT 2018 : org.joda.time.tz.CachedDateTimeZone,180=>Find no block
Mon Jan 15 23:07:22 AEDT 2018 Mon Jan 15 23:07:22 AEDT 2018 : org.joda.time.tz.CachedDateTimeZone,177=>Find no block
Mon Jan 15 23:07:22 AEDT 2018 Mon Jan 15 23:07:22 AEDT 2018 : org.joda.time.tz.CachedDateTimeZone,178=>Find no block
Mon Jan 15 23:07:23 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,181
Mon Jan 15 23:07:42 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,182
Mon Jan 15 23:07:43 AEDT 2018 Mon Jan 15 23:07:43 AEDT 2018 : org.joda.time.tz.CachedDateTimeZone,183=>Find no block
Mon Jan 15 23:07:43 AEDT 2018 org.joda.time.field.PreciseDurationDateTimeField,126
Mon Jan 15 23:07:43 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1533
Mon Jan 15 23:16:36 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1534
Mon Jan 15 23:16:36 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,198
Mon Jan 15 23:16:36 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1528
Mon Jan 15 23:24:21 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1529
Mon Jan 15 23:24:21 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1530
Mon Jan 15 23:24:21 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1570
Mon Jan 15 23:30:35 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1571
Mon Jan 15 23:30:35 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1572
Mon Jan 15 23:44:03 AEDT 2018 org.joda.time.tz.DateTimeZoneBuilder,1573
Mon Jan 15 23:44:03 AEDT 2018 org.joda.time.DateTimeFieldType,522
Mon Jan 15 23:46:20 AEDT 2018 org.joda.time.DateTimeZone,955
Mon Jan 15 23:49:44 AEDT 2018 org.joda.time.DateTime,220

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
super(chronology);

Time : 18/01/15 23:50
----------------------------------------
Mon Jan 15 23:51:35 AEDT 2018 Mon Jan 15 23:51:35 AEDT 2018 : org.joda.time.DateTime,221=>Find no block
Mon Jan 15 23:51:36 AEDT 2018 org.joda.time.DateTimeZone,951
Tue Jan 16 00:06:42 AEDT 2018 org.joda.time.DateTimeZone,952
Tue Jan 16 00:06:42 AEDT 2018 org.joda.time.DateTimeZone,953
Tue Jan 16 00:06:42 AEDT 2018 org.joda.time.DateTimeZone,954
Tue Jan 16 00:06:43 AEDT 2018 org.joda.time.DateTimeUtils,167
Tue Jan 16 00:19:39 AEDT 2018 org.joda.time.DateTimeUtils,168
Tue Jan 16 00:19:40 AEDT 2018 org.joda.time.DateTimeUtils,171
Tue Jan 16 00:19:40 AEDT 2018 org.joda.time.DateTimeUtils,164
Tue Jan 16 00:19:40 AEDT 2018 org.joda.time.DateTimeUtils,149
Tue Jan 16 00:20:57 AEDT 2018 org.joda.time.DateTimeUtils,146
Tue Jan 16 00:20:58 AEDT 2018 org.joda.time.chrono.AssembledChronology,192
Tue Jan 16 00:21:00 AEDT 2018 org.joda.time.chrono.ZonedChronology,147
Timeout time : 18/01/16 00:22
