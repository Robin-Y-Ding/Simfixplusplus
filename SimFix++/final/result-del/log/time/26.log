=================================================
Project : time_26	start : 18/01/16 05:50
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithSecondOfMinuteInDstChange_purify_2 | 18/01/16 05:57
Tue Jan 16 05:59:29 AEDT 2018 org.joda.time.DateTime,1678
Tue Jan 16 06:00:35 AEDT 2018 Tue Jan 16 06:00:35 AEDT 2018 : org.joda.time.DateTime,220=>Find no block
Tue Jan 16 06:00:36 AEDT 2018 org.joda.time.DateTime,219
Tue Jan 16 06:01:35 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2686
Tue Jan 16 06:08:02 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2687
Tue Jan 16 06:08:03 AEDT 2018 org.joda.time.format.DateTimeParserBucket,335
Tue Jan 16 06:09:26 AEDT 2018 org.joda.time.format.DateTimeParserBucket,336
Tue Jan 16 06:09:27 AEDT 2018 Tue Jan 16 06:09:27 AEDT 2018 : org.joda.time.base.BaseDateTime,151=>Find no block
Tue Jan 16 06:09:27 AEDT 2018 org.joda.time.base.BaseDateTime,148
Timeout time : 18/01/16 06:29
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW_purify_8 | 18/01/16 06:29
Tue Jan 16 06:31:28 AEDT 2018 org.joda.time.DateTime,1646
Tue Jan 16 06:32:25 AEDT 2018 org.joda.time.DateTime,518
Tue Jan 16 06:36:47 AEDT 2018 org.joda.time.DateTime,519
Tue Jan 16 06:38:37 AEDT 2018 org.joda.time.DateTime,522
Tue Jan 16 06:38:38 AEDT 2018 org.joda.time.base.AbstractInstant,177
Tue Jan 16 06:38:39 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,162
Tue Jan 16 06:39:48 AEDT 2018 org.joda.time.chrono.GregorianChronology,171
Tue Jan 16 06:39:50 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}

Time : 18/01/16 06:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 06:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNameKey==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 06:50
----------------------------------------
Tue Jan 16 06:51:09 AEDT 2018 org.joda.time.chrono.BasicChronology,144
Tue Jan 16 06:51:34 AEDT 2018 org.joda.time.chrono.GregorianChronology,100
Tue Jan 16 06:52:41 AEDT 2018 Tue Jan 16 06:52:41 AEDT 2018 : org.joda.time.DateTime,472=>Find no block
Tue Jan 16 06:52:41 AEDT 2018 org.joda.time.chrono.ZonedChronology,474
Timeout time : 18/01/16 07:01
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_ausNSW_purify_9 | 18/01/16 07:01
Tue Jan 16 07:03:37 AEDT 2018 org.joda.time.DateTime,1694
Tue Jan 16 07:04:33 AEDT 2018 org.joda.time.DateTime,518

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=chronology){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 07:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=null){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 07:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=chronology){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 07:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=null){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 07:09
----------------------------------------
Tue Jan 16 07:10:44 AEDT 2018 org.joda.time.DateTime,519

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==chronology){
return this;
}

Time : 18/01/16 07:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
return this;
}

Time : 18/01/16 07:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=chronology){
return this;
}

Time : 18/01/16 07:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=null){
return this;
}

Time : 18/01/16 07:13
----------------------------------------
Tue Jan 16 07:14:20 AEDT 2018 org.joda.time.DateTime,522
Tue Jan 16 07:14:20 AEDT 2018 org.joda.time.base.AbstractInstant,177
Tue Jan 16 07:14:21 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,162
Tue Jan 16 07:15:27 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}

Time : 18/01/16 07:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
millis=serialVersionUID;
if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 07:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 07:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 07:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||millis<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 07:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNameKey==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 07:27
----------------------------------------
Tue Jan 16 07:27:59 AEDT 2018 org.joda.time.chrono.GregorianChronology,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
return getInstance(DateTimeZone.UTC,4);

Time : 18/01/16 07:28
----------------------------------------
Tue Jan 16 07:29:34 AEDT 2018 Tue Jan 16 07:29:34 AEDT 2018 : org.joda.time.DateTime,472=>Find no block
Tue Jan 16 07:29:34 AEDT 2018 org.joda.time.chrono.ZonedChronology,474
Timeout time : 18/01/16 07:33
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral_purify_6 | 18/01/16 07:33
Tue Jan 16 07:35:46 AEDT 2018 org.joda.time.DateTime,1646
Tue Jan 16 07:36:44 AEDT 2018 org.joda.time.DateTime,518
Tue Jan 16 07:41:05 AEDT 2018 org.joda.time.DateTime,519
Tue Jan 16 07:42:59 AEDT 2018 org.joda.time.DateTime,522
Tue Jan 16 07:42:59 AEDT 2018 org.joda.time.base.AbstractInstant,177
Tue Jan 16 07:43:00 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,162
Tue Jan 16 07:44:10 AEDT 2018 org.joda.time.chrono.GregorianChronology,171
Tue Jan 16 07:44:12 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2093
Tue Jan 16 07:53:54 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2094
Tue Jan 16 07:53:54 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
millis=serialVersionUID;
if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||millis<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:03
----------------------------------------
Tue Jan 16 08:05:23 AEDT 2018 org.joda.time.chrono.BasicChronology,144
Timeout time : 18/01/16 08:05
Current failed test : org.joda.time.TestDateTimeZoneCutover::testBug2182444_usCentral_purify_7 | 18/01/16 08:05
Tue Jan 16 08:07:47 AEDT 2018 org.joda.time.DateTime,1694
Tue Jan 16 08:08:45 AEDT 2018 org.joda.time.DateTime,518

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=chronology){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 08:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology);
if(getChronology()!=null){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 08:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=chronology){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 08:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=null){
return this;
}
return super.toDateTime(chronology);

Time : 18/01/16 08:14
----------------------------------------
Tue Jan 16 08:15:02 AEDT 2018 org.joda.time.DateTime,519

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==chronology){
return this;
}

Time : 18/01/16 08:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
chronology=DateTimeUtils.getChronology(chronology).withUTC();
if(getChronology()==null){
return this;
}

Time : 18/01/16 08:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=chronology){
return this;
}

Time : 18/01/16 08:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getChronology()!=null){
return this;
}

Time : 18/01/16 08:18
----------------------------------------
Tue Jan 16 08:18:47 AEDT 2018 org.joda.time.DateTime,522
Tue Jan 16 08:18:48 AEDT 2018 org.joda.time.base.AbstractInstant,177
Tue Jan 16 08:18:49 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,162
Tue Jan 16 08:19:59 AEDT 2018 org.joda.time.tz.CachedDateTimeZone,210

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}

Time : 18/01/16 08:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
millis=serialVersionUID;
if(iNextInfo==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||iPeriodStart<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNextInfo==null||millis<iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(iNameKey==null||millis<iNextInfo.iPeriodStart){
if(iOffset==Integer.MIN_VALUE){
iOffset=iZoneRef.getOffset(iPeriodStart);
}
return iOffset;
}
return iNextInfo.getOffset(millis);

Time : 18/01/16 08:32
----------------------------------------
Tue Jan 16 08:32:54 AEDT 2018 org.joda.time.chrono.GregorianChronology,100

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
return getInstance(DateTimeZone.UTC,4);

Time : 18/01/16 08:33
----------------------------------------
Tue Jan 16 08:34:33 AEDT 2018 Tue Jan 16 08:34:33 AEDT 2018 : org.joda.time.DateTime,472=>Find no block
Tue Jan 16 08:34:33 AEDT 2018 org.joda.time.chrono.ZonedChronology,474
Timeout time : 18/01/16 08:38
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithHourOfDayInDstChange_purify_2 | 18/01/16 08:38
Tue Jan 16 08:40:08 AEDT 2018 org.joda.time.DateTime,1646
Tue Jan 16 08:41:07 AEDT 2018 Tue Jan 16 08:41:07 AEDT 2018 : org.joda.time.DateTime,220=>Find no block
Tue Jan 16 08:41:07 AEDT 2018 org.joda.time.DateTime,219
Tue Jan 16 08:42:00 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2686
Tue Jan 16 08:48:36 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2687
Tue Jan 16 08:48:37 AEDT 2018 org.joda.time.format.DateTimeParserBucket,335
Tue Jan 16 08:49:59 AEDT 2018 org.joda.time.format.DateTimeParserBucket,336
Tue Jan 16 08:49:59 AEDT 2018 Tue Jan 16 08:49:59 AEDT 2018 : org.joda.time.base.BaseDateTime,151=>Find no block
Tue Jan 16 08:50:00 AEDT 2018 org.joda.time.base.BaseDateTime,148
Timeout time : 18/01/16 09:10
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_NewYork_winter_purify_2 | 18/01/16 09:10
Tue Jan 16 09:12:08 AEDT 2018 org.joda.time.DateTime,1694
Tue Jan 16 09:13:07 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2241
Timeout time : 18/01/16 09:42
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_mockZone_purify_4 | 18/01/16 09:42
Tue Jan 16 09:44:14 AEDT 2018 org.joda.time.DateTime,1662
Tue Jan 16 09:45:15 AEDT 2018 org.joda.time.DateTime,285
Tue Jan 16 09:45:30 AEDT 2018 Tue Jan 16 09:45:30 AEDT 2018 : org.joda.time.DateTime,287=>Find no block
Tue Jan 16 09:45:30 AEDT 2018 org.joda.time.DateTimeZone,266

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hoursInMinutes<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}

Time : 18/01/16 09:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(hoursOffset<minutesOffset){
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,-minutesOffset);
}else {
minutesOffset=FieldUtils.safeAdd(hoursInMinutes,minutesOffset);
}

Time : 18/01/16 09:48
----------------------------------------
Tue Jan 16 09:48:51 AEDT 2018 org.joda.time.DateTimeZone,254
Tue Jan 16 09:48:53 AEDT 2018 org.joda.time.DateTimeZone,257
Tue Jan 16 09:50:10 AEDT 2018 org.joda.time.DateTimeZone,260

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
hoursOffset-=2;
if(minutesOffset<0||minutesOffset>59){
throw new IllegalArgumentException("Minutes out of range: "+minutesOffset);
}
int offset=0;

Time : 18/01/16 10:10
----------------------------------------
Timeout time : 18/01/16 10:14
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMinuteOfHourInDstChange_purify_2 | 18/01/16 10:14
Tue Jan 16 10:16:10 AEDT 2018 org.joda.time.DateTime,1662
Tue Jan 16 10:17:08 AEDT 2018 Tue Jan 16 10:17:08 AEDT 2018 : org.joda.time.DateTime,220=>Find no block
Tue Jan 16 10:17:08 AEDT 2018 org.joda.time.DateTime,219
Tue Jan 16 10:18:00 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2686
Tue Jan 16 10:24:20 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2687
Tue Jan 16 10:24:20 AEDT 2018 org.joda.time.format.DateTimeParserBucket,335
Tue Jan 16 10:25:40 AEDT 2018 org.joda.time.format.DateTimeParserBucket,336
Tue Jan 16 10:25:40 AEDT 2018 Tue Jan 16 10:25:40 AEDT 2018 : org.joda.time.base.BaseDateTime,151=>Find no block
Tue Jan 16 10:25:41 AEDT 2018 org.joda.time.base.BaseDateTime,148
Timeout time : 18/01/16 10:46
Current failed test : org.joda.time.TestDateTimeZoneCutover::testWithMillisOfSecondInDstChange_Paris_summer_purify_2 | 18/01/16 10:46
Tue Jan 16 10:47:58 AEDT 2018 org.joda.time.DateTime,1694
Tue Jan 16 10:48:50 AEDT 2018 Tue Jan 16 10:48:50 AEDT 2018 : org.joda.time.DateTime,220=>Find no block
Tue Jan 16 10:48:51 AEDT 2018 org.joda.time.DateTime,219
Tue Jan 16 10:49:38 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2686
Tue Jan 16 10:55:26 AEDT 2018 org.joda.time.format.DateTimeFormatterBuilder,2687
Tue Jan 16 10:55:26 AEDT 2018 org.joda.time.format.DateTimeParserBucket,335
Tue Jan 16 10:56:42 AEDT 2018 org.joda.time.format.DateTimeParserBucket,336
Tue Jan 16 10:56:42 AEDT 2018 Tue Jan 16 10:56:42 AEDT 2018 : org.joda.time.base.BaseDateTime,151=>Find no block
Tue Jan 16 10:56:43 AEDT 2018 org.joda.time.base.BaseDateTime,148
Timeout time : 18/01/16 11:18
