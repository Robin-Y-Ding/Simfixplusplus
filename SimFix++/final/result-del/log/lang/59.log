=================================================
Project : lang_59	start : 18/01/15 17:48
Current failed test : org.apache.commons.lang.text.StrBuilderAppendInsertTest::testLang299 | 18/01/15 17:48
Mon Jan 15 17:49:05 AEDT 2018 org.apache.commons.lang.text.StrBuilder,879

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 17:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>width){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(strLen>=buffer.length){
buffer=new char[strLen];
str.getChars(0,strLen,buffer,size);
}else {
buffer=new char[strLen];
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
buffer=new char[strLen];
if(strLen>=width){
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:17
----------------------------------------
Mon Jan 15 19:38:31 AEDT 2018 org.apache.commons.lang.text.StrBuilder,880
Mon Jan 15 19:46:43 AEDT 2018 org.apache.commons.lang.text.StrBuilder,881
Mon Jan 15 19:46:44 AEDT 2018 org.apache.commons.lang.text.StrBuilder,882

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 19:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=size-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=size-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 20:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
str.getChars(0,strLen,buffer,size);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size=width+strLen;
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
validateIndex(size);
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
str.getChars(0,strLen,buffer,size);
ensureCapacity(width+strLen);
size=width+strLen;
str.getChars(0,strLen,buffer,size);

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 21:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
size+=strLen;
int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
ensureCapacity(width+strLen);
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
String str=(obj==null?getNullText():obj.toString());
int strLen=str.length();
validateIndex(size);
if(strLen>=width){
ensureCapacity(width+strLen);
str.getChars(0,strLen,buffer,size);
}else {
size+=strLen;
ensureCapacity(width+strLen);
size+=strLen;

int padLen=width-strLen;
str.getChars(0,strLen,buffer,size);
for(int i=0;i<padLen;i++){
buffer[size+strLen]=padChar;
}
}

Time : 18/01/15 22:35
----------------------------------------
Timeout time : 18/01/15 22:49
