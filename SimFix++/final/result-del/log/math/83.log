=================================================
Project : math_83	start : 18/01/15 21:31
Current failed test : org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286 | 18/01/15 21:32
Mon Jan 15 21:33:44 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,349

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
++i;
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}

Time : 18/01/15 21:35
----------------------------------------
Mon Jan 15 21:36:21 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,151
Mon Jan 15 21:38:27 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,190
Mon Jan 15 21:38:37 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,297
Mon Jan 15 21:38:49 AEDT 2018 Mon Jan 15 21:38:49 AEDT 2018 : org.apache.commons.math.optimization.linear.SimplexSolver,179=>Find no block
Mon Jan 15 21:38:52 AEDT 2018 Mon Jan 15 21:38:52 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,48=>Find no block
Mon Jan 15 21:38:53 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,49
Mon Jan 15 21:42:30 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,50
Mon Jan 15 21:42:34 AEDT 2018 Mon Jan 15 21:42:34 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,51=>Find no block
Mon Jan 15 21:42:38 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,86
Mon Jan 15 21:43:07 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,310
Mon Jan 15 21:44:56 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,311
Mon Jan 15 21:47:53 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,312

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/15 21:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<=width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/15 21:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<width-1;j++){
j+=height;
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/15 21:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/15 21:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int height=getHeight()-1;
double[][] matrix=new double[height][width];
for(int i=0;i<height;i++){
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/15 22:21
----------------------------------------
Mon Jan 15 23:05:08 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,313
Mon Jan 15 23:05:13 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,314
Mon Jan 15 23:05:17 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,315
Mon Jan 15 23:05:21 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,317
Mon Jan 15 23:05:25 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,319

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

Time : 18/01/15 23:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<numDecisionVariables;i++){
for(int j=numDecisionVariables;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

Time : 18/01/15 23:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=numDecisionVariables;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

Time : 18/01/15 23:40
----------------------------------------
Tue Jan 16 00:13:16 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,320
Tue Jan 16 00:13:21 AEDT 2018 Tue Jan 16 00:13:21 AEDT 2018 : org.apache.commons.math.optimization.linear.SimplexTableau,321=>Find no block
Tue Jan 16 00:13:24 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,340
Tue Jan 16 00:15:48 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,341
Tue Jan 16 00:15:53 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,342
Tue Jan 16 00:16:54 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,343
Tue Jan 16 00:56:18 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,344
Tue Jan 16 00:56:23 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,345
Tue Jan 16 00:56:27 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,346
Tue Jan 16 00:56:32 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,351
Tue Jan 16 00:56:36 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,352
Tue Jan 16 00:56:39 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,357

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=getNumObjectiveFunctions();i<coefficients.length;i++){
Integer basicRow=getBasicRow(getNumObjectiveFunctions()+i);
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}
}
return new RealPointValuePair(coefficients,f.getValue(coefficients));

Time : 18/01/16 00:57
----------------------------------------
Tue Jan 16 01:08:53 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,458
Tue Jan 16 01:09:02 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,481
Tue Jan 16 01:09:11 AEDT 2018 org.apache.commons.math.optimization.linear.LinearObjectiveFunction,92
Tue Jan 16 01:10:10 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,129
Tue Jan 16 01:10:59 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,132
Tue Jan 16 01:12:39 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,133
Tue Jan 16 01:12:42 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,134
Tue Jan 16 01:12:45 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,137
Tue Jan 16 01:16:40 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,154
Tue Jan 16 01:20:50 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,171
Tue Jan 16 01:21:00 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,172
Tue Jan 16 01:21:04 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,176
Tue Jan 16 01:21:15 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,192
Tue Jan 16 01:24:30 AEDT 2018 org.apache.commons.math.linear.ArrayRealVector,884
Tue Jan 16 02:03:59 AEDT 2018 org.apache.commons.math.linear.ArrayRealVector,885
Tue Jan 16 02:04:04 AEDT 2018 org.apache.commons.math.linear.ArrayRealVector,886
Tue Jan 16 02:04:08 AEDT 2018 org.apache.commons.math.linear.ArrayRealVector,887
Tue Jan 16 02:04:11 AEDT 2018 org.apache.commons.math.linear.ArrayRealVector,889
Tue Jan 16 02:04:15 AEDT 2018 org.apache.commons.math.linear.ArrayRealVector,1287
Tue Jan 16 02:25:56 AEDT 2018 Tue Jan 16 02:25:56 AEDT 2018 : org.apache.commons.math.linear.ArrayRealVector,1292=>Find no block
Tue Jan 16 02:26:00 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,146
Tue Jan 16 02:26:03 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,149
Tue Jan 16 02:26:05 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,150
Tue Jan 16 02:26:10 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,188
Tue Jan 16 02:26:13 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,189
Tue Jan 16 02:26:15 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,307
Tue Jan 16 02:26:25 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,370

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<getWidth();j++){
tableau.setEntry(dividendRow,dividendRow,tableau.getEntry(dividendRow,j)/divisor);
}

Time : 18/01/16 02:28
----------------------------------------
Timeout time : 18/01/16 02:33
