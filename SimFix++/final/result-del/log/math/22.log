=================================================
Project : math_22	start : 18/01/15 20:25
Current failed test : org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive | 18/01/15 20:27
Mon Jan 15 20:28:20 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,275
Mon Jan 15 20:28:28 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,184
Mon Jan 15 20:28:34 AEDT 2018 org.apache.commons.math3.util.FastMath,1107

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_1_4;
}

Time : 18/01/15 20:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_3_4;
}

Time : 18/01/15 20:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_1_2;
}

Time : 18/01/15 20:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
if(E<0||1/E<0){
return -Math.PI*F_1_2;
}
return F_1_2;
}

Time : 18/01/15 20:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return x;
}

Time : 18/01/15 20:39
----------------------------------------
Mon Jan 15 20:42:54 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,129

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.floor(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 20:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 20:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.sqrt(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 20:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.exp(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.sqrt(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.exp(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(denominatorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log1p(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log1p(denominatorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.exp(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(numeratorDegreesOfFreedom)||x==0.0){
return x;
}
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 21:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(numeratorDegreesOfFreedom)||x==0.0){
return x;
}
 final double nhalf=x/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 22:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.sqrt(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 22:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/4;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 22:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/4;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.sqrt(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 22:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.signum(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 22:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x=numeratorDegreesOfFreedom;
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/15 22:35
----------------------------------------
Timeout time : 18/01/15 22:58
Current failed test : org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive | 18/01/15 22:58
Mon Jan 15 22:59:25 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,275
Mon Jan 15 22:59:31 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,184
Mon Jan 15 22:59:36 AEDT 2018 org.apache.commons.math3.util.FastMath,1107
Mon Jan 15 23:03:34 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,129
Tue Jan 16 00:33:56 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,130
Tue Jan 16 00:33:59 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,131
Tue Jan 16 00:34:01 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,132
Tue Jan 16 00:34:04 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,133
Tue Jan 16 00:34:06 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,134
Tue Jan 16 00:34:07 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,136
Tue Jan 16 00:34:10 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,109
Tue Jan 16 00:42:30 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,112
Tue Jan 16 00:52:15 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,174
Tue Jan 16 00:54:03 AEDT 2018 org.apache.commons.math3.special.Beta,170
Tue Jan 16 00:54:36 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,258
Tue Jan 16 00:54:42 AEDT 2018 org.apache.commons.math3.util.FastMath,864
Tue Jan 16 00:59:51 AEDT 2018 org.apache.commons.math3.util.FastMath,866
Tue Jan 16 00:59:54 AEDT 2018 org.apache.commons.math3.util.FastMath,874
Tue Jan 16 01:03:19 AEDT 2018 org.apache.commons.math3.util.FastMath,875
Tue Jan 16 01:03:21 AEDT 2018 org.apache.commons.math3.random.Well19937c,57
Tue Jan 16 01:03:28 AEDT 2018 Tue Jan 16 01:03:28 AEDT 2018 : org.apache.commons.math3.random.Well19937c,58=>Find no block
Tue Jan 16 01:03:30 AEDT 2018 org.apache.commons.math3.random.AbstractWell,72
Tue Jan 16 01:03:39 AEDT 2018 Tue Jan 16 01:03:39 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,73=>Find no block
Tue Jan 16 01:03:41 AEDT 2018 org.apache.commons.math3.random.AbstractWell,155
Tue Jan 16 01:03:47 AEDT 2018 org.apache.commons.math3.random.AbstractWell,156
Tue Jan 16 01:03:49 AEDT 2018 org.apache.commons.math3.random.AbstractWell,179
Tue Jan 16 01:04:13 AEDT 2018 Tue Jan 16 01:04:13 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,180=>Find no block
Tue Jan 16 01:04:15 AEDT 2018 Tue Jan 16 01:04:15 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,50=>Find no block
Tue Jan 16 01:04:17 AEDT 2018 Tue Jan 16 01:04:17 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,55=>Find no block
Tue Jan 16 01:04:20 AEDT 2018 Tue Jan 16 01:04:20 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,70=>Find no block
Tue Jan 16 01:04:22 AEDT 2018 org.apache.commons.math3.distribution.AbstractRealDistribution,71
Tue Jan 16 01:06:23 AEDT 2018 Tue Jan 16 01:06:23 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,72=>Find no block
Tue Jan 16 01:06:26 AEDT 2018 Tue Jan 16 01:06:26 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,94=>Find no block
Tue Jan 16 01:06:28 AEDT 2018 org.apache.commons.math3.random.AbstractWell,99
Tue Jan 16 01:24:09 AEDT 2018 org.apache.commons.math3.random.AbstractWell,100
Tue Jan 16 01:24:13 AEDT 2018 org.apache.commons.math3.random.AbstractWell,101
Timeout time : 18/01/16 01:29
