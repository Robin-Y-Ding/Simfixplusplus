=================================================
Project : math_24	start : 18/01/16 01:29
Current failed test : org.apache.commons.math3.optimization.univariate.BrentOptimizerTest::testMath855 | 18/01/16 01:30
Tue Jan 16 01:31:38 AEDT 2018 Tue Jan 16 01:31:38 AEDT 2018 : org.apache.commons.math3.util.MathArrays,143=>Find no block
Tue Jan 16 01:31:41 AEDT 2018 Tue Jan 16 01:31:41 AEDT 2018 : org.apache.commons.math3.util.MathArrays,143=>Find no block
Tue Jan 16 01:31:43 AEDT 2018 org.apache.commons.math3.util.MathArrays,228
Tue Jan 16 01:48:29 AEDT 2018 org.apache.commons.math3.util.MathArrays,229
Tue Jan 16 01:48:32 AEDT 2018 org.apache.commons.math3.util.MathArrays,233

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
val[index]=previous;
if(strict){
if(val[index]<=previous){
break;
}
}else {
if(val[index]<previous){
break;
}
}

Time : 18/01/16 01:50
----------------------------------------
Tue Jan 16 01:59:07 AEDT 2018 Tue Jan 16 01:59:07 AEDT 2018 : org.apache.commons.math3.util.MathArrays,234=>Find no block
Tue Jan 16 01:59:10 AEDT 2018 org.apache.commons.math3.util.MathArrays,236
Tue Jan 16 01:59:12 AEDT 2018 org.apache.commons.math3.util.MathArrays,237
Tue Jan 16 01:59:15 AEDT 2018 org.apache.commons.math3.util.MathArrays,262
Tue Jan 16 02:04:11 AEDT 2018 org.apache.commons.math3.util.MathArrays,265
Tue Jan 16 02:06:54 AEDT 2018 org.apache.commons.math3.util.MathArrays,267
Tue Jan 16 02:06:56 AEDT 2018 org.apache.commons.math3.util.MathArrays,289
Tue Jan 16 02:07:03 AEDT 2018 Tue Jan 16 02:07:03 AEDT 2018 : org.apache.commons.math3.util.MathArrays,290=>Find no block
Tue Jan 16 02:07:06 AEDT 2018 org.apache.commons.math3.util.MathArrays,300
Tue Jan 16 02:07:13 AEDT 2018 Tue Jan 16 02:07:13 AEDT 2018 : org.apache.commons.math3.util.MathArrays,301=>Find no block
Tue Jan 16 02:07:15 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,141
Tue Jan 16 02:07:23 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,141
Tue Jan 16 02:07:25 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,144

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double r=f[0].value(x);
return r;

Time : 18/01/16 02:09
----------------------------------------
Tue Jan 16 02:28:52 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,145
Tue Jan 16 02:40:13 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,146
Tue Jan 16 02:40:15 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,148
Tue Jan 16 02:40:17 AEDT 2018 Tue Jan 16 02:40:17 AEDT 2018 : org.apache.commons.math3.analysis.function.StepFunction,64=>Find no block
Tue Jan 16 02:40:19 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,65
Tue Jan 16 02:42:37 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,69
Tue Jan 16 02:59:53 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,73
Tue Jan 16 03:23:53 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,76
Tue Jan 16 05:23:09 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,78
Tue Jan 16 05:23:11 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,79
Tue Jan 16 05:23:14 AEDT 2018 Tue Jan 16 05:23:14 AEDT 2018 : org.apache.commons.math3.analysis.function.StepFunction,80=>Find no block
Tue Jan 16 05:23:17 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,84

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(ordinate==null){
return Double.NaN;
}
if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}

Time : 18/01/16 05:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 05:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(ordinate,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return fx;

Time : 18/01/16 05:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double fx=0;
return fx;

Time : 18/01/16 05:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
int fx=0;
return fx;

Time : 18/01/16 05:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int fx=0;
return fx;

Time : 18/01/16 05:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
--index;
return fx;

Time : 18/01/16 05:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
++index;
return fx;

Time : 18/01/16 05:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
--index;
++index;
return fx;

Time : 18/01/16 05:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=index;
return fx;

Time : 18/01/16 05:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
int fx=index;
return fx;

Time : 18/01/16 05:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 05:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double index=Arrays.binarySearch(abscissa,x);
double fx=index;
return fx;

Time : 18/01/16 05:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
long index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 05:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
long index=Arrays.binarySearch(abscissa,x);
int fx=0;
return fx;

Time : 18/01/16 06:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<0){
return 0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<0){
return 0;
}
double index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
return 0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
return 0;
}
double index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==1.0){
return 0.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return Math.PI/2.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==1.0){
return 0.0;
}
if(x==0){
return Math.PI/2.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
return fx;

Time : 18/01/16 06:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==1.0){
return 0.0;
}
double fx=0;
return fx;

Time : 18/01/16 06:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return Math.PI/2.0;
}
double fx=0;
return fx;

Time : 18/01/16 06:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==1.0){
return 0.0;
}
if(x==0){
return Math.PI/2.0;
}
double fx=0;
return fx;

Time : 18/01/16 06:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
return fx;

Time : 18/01/16 06:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x>=x){
return 1;
}
return fx;

Time : 18/01/16 06:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
if(x>=x){
return 1;
}
return fx;

Time : 18/01/16 06:31
----------------------------------------
Timeout time : 18/01/16 06:33
