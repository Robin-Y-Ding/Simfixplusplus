=================================================
Project : time_14	start : 18/01/12 19:08
Current failed test : org.joda.time.TestMonthDay_Basics::testPlusMonths_int_negativeFromLeap | 18/01/12 19:08
Fri Jan 12 19:11:09 AEDT 2018 org.joda.time.IllegalFieldValueException,314
Fri Jan 12 19:11:11 AEDT 2018 org.joda.time.MonthDay,518
Fri Jan 12 19:31:37 AEDT 2018 org.joda.time.MonthDay,519
Fri Jan 12 19:31:38 AEDT 2018 org.joda.time.chrono.BasicMonthOfYearDateTimeField,206
Fri Jan 12 19:34:44 AEDT 2018 org.joda.time.chrono.BasicMonthOfYearDateTimeField,210
Fri Jan 12 20:37:51 AEDT 2018 org.joda.time.chrono.BasicMonthOfYearDateTimeField,211
Fri Jan 12 20:37:52 AEDT 2018 org.joda.time.chrono.BasicMonthOfYearDateTimeField,212
Fri Jan 12 20:37:52 AEDT 2018 org.joda.time.chrono.BasicMonthOfYearDateTimeField,213
Fri Jan 12 20:37:53 AEDT 2018 org.joda.time.MonthDay,515
Fri Jan 12 20:37:53 AEDT 2018 org.joda.time.MonthDay,514
Fri Jan 12 20:37:54 AEDT 2018 org.joda.time.DateTimeUtils,347

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopField.getRangeDurationField().getType()==lastType){
return false;
}

Time : 18/01/12 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(loopField.getRangeDurationField().getType()!=null){
return false;
}

Time : 18/01/12 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>=0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}

Time : 18/01/12 20:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(1>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}

Time : 18/01/12 20:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i+1>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}

Time : 18/01/12 20:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<partial.size();i++){
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=null;
}

Time : 18/01/12 20:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<partial.size();i++){
i++;
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=loopField.getDurationField().getType();
}

Time : 18/01/12 21:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<partial.size();i++){
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=loopField.getDurationField().getType();
}
return false;

Time : 18/01/12 21:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<partial.size();i++){
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=null;
}
return true;

Time : 18/01/12 21:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<partial.size();i++){
i++;
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=loopField.getDurationField().getType();
}
return true;

Time : 18/01/12 21:18
----------------------------------------
Fri Jan 12 21:21:47 AEDT 2018 org.joda.time.DateTimeUtils,334
Fri Jan 12 21:25:26 AEDT 2018 org.joda.time.DateTimeUtils,337

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial==null){
throw new IllegalArgumentException("Partial must not be null");
}
DurationFieldType lastType=null;
for(int i=0;i<partial.size();i++){
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=null;
}

Time : 18/01/12 21:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(partial==null){
throw new IllegalArgumentException("Partial must not be null");
}
DurationFieldType lastType=null;
for(int i=0;i<partial.size();i++){
i++;
DateTimeField loopField=partial.getField(i);
if(i>0){
if(loopField.getRangeDurationField().getType()!=lastType){
return false;
}
}
lastType=loopField.getDurationField().getType();
}

Time : 18/01/12 21:42
----------------------------------------
Fri Jan 12 21:46:41 AEDT 2018 org.joda.time.DateTimeUtils,338
Fri Jan 12 21:46:41 AEDT 2018 org.joda.time.DateTimeUtils,339
Fri Jan 12 21:46:41 AEDT 2018 org.joda.time.DateTimeUtils,340
Fri Jan 12 21:46:42 AEDT 2018 org.joda.time.DateTimeUtils,341
Fri Jan 12 21:46:42 AEDT 2018 org.joda.time.DateTimeUtils,345
Fri Jan 12 21:46:43 AEDT 2018 org.joda.time.MonthDay,592
Fri Jan 12 21:48:17 AEDT 2018 org.joda.time.MonthDay,652
Fri Jan 12 21:49:53 AEDT 2018 org.joda.time.chrono.BasicGJChronology,129
Fri Jan 12 21:53:47 AEDT 2018 org.joda.time.chrono.BasicDayOfMonthDateTimeField,89
Fri Jan 12 22:17:31 AEDT 2018 org.joda.time.base.AbstractPartial,223
Fri Jan 12 22:26:39 AEDT 2018 org.joda.time.MonthDay,352
Fri Jan 12 22:28:09 AEDT 2018 Fri Jan 12 22:28:09 AEDT 2018 : org.joda.time.MonthDay,353=>Find no block
Fri Jan 12 22:28:10 AEDT 2018 org.joda.time.MonthDay,410
Fri Jan 12 22:35:17 AEDT 2018 org.joda.time.MonthDay,412
Fri Jan 12 22:35:18 AEDT 2018 Fri Jan 12 22:35:18 AEDT 2018 : org.joda.time.MonthDay,408=>Find no block
Fri Jan 12 22:35:18 AEDT 2018 org.joda.time.base.AbstractPartial,204
Fri Jan 12 22:39:25 AEDT 2018 org.joda.time.base.AbstractPartial,219
Fri Jan 12 22:39:26 AEDT 2018 org.joda.time.base.AbstractPartial,220
Fri Jan 12 22:52:06 AEDT 2018 org.joda.time.MonthDay,426
Fri Jan 12 22:52:08 AEDT 2018 org.joda.time.base.AbstractPartial,202
Fri Jan 12 22:59:45 AEDT 2018 org.joda.time.base.AbstractPartial,203
Fri Jan 12 22:59:45 AEDT 2018 org.joda.time.MonthDay,395
Fri Jan 12 22:59:47 AEDT 2018 org.joda.time.MonthDay,780
Fri Jan 12 23:06:03 AEDT 2018 org.joda.time.MonthDay,781
Fri Jan 12 23:06:04 AEDT 2018 org.joda.time.MonthDay,782
Fri Jan 12 23:06:04 AEDT 2018 org.joda.time.MonthDay,783
Fri Jan 12 23:06:05 AEDT 2018 org.joda.time.chrono.BasicChronology,575
Fri Jan 12 23:23:02 AEDT 2018 org.joda.time.chrono.BasicChronology,576
Fri Jan 12 23:23:02 AEDT 2018 org.joda.time.chrono.BasicChronology,577
Fri Jan 12 23:23:03 AEDT 2018 org.joda.time.field.FieldUtils,218
Fri Jan 12 23:36:36 AEDT 2018 org.joda.time.base.BasePartial,237
Fri Jan 12 23:37:13 AEDT 2018 org.joda.time.base.AbstractPartial,267
Fri Jan 12 23:43:02 AEDT 2018 org.joda.time.format.ISODateTimeFormat,328
Timeout time : 18/01/13 00:11
