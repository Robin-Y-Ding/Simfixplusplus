=================================================
Project : lang_10	start : 18/01/12 14:05
Current failed test : org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831 | 18/01/12 14:05
Fri Jan 12 14:06:10 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,180
Fri Jan 12 14:06:13 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,685

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-idx<0){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-idx<-field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-idx<field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-idx<0){
StringBuilder sb=new StringBuilder(value);
new StringBuilder(32).append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-idx<-field){
StringBuilder sb=new StringBuilder(value);
new StringBuilder(32).append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-idx<field){
StringBuilder sb=new StringBuilder(value);
new StringBuilder(32).append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(-1<0){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/12 14:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/12 14:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!false){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}

Time : 18/01/12 14:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}

Time : 18/01/12 14:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<=field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<=field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<=field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(field+idx)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(field+idx)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IndexOutOfBoundsException();
}

Time : 18/01/12 14:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IndexOutOfBoundsException();
}

Time : 18/01/12 14:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/12 14:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/12 14:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}

Time : 18/01/12 14:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Arrays.binarySearch(textKeyValues,new KeyValue(value,-1),IGNORE_CASE_COMPARATOR);
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}

Time : 18/01/12 14:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] textKeyValues=parser.getDisplayNames(field);
int idx=Integer.MAX_VALUE;
if(idx<0){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/12 14:56
----------------------------------------
Fri Jan 12 14:58:10 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,686
Fri Jan 12 14:58:10 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,687
Fri Jan 12 14:58:11 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,696

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<field+idx){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("length must be valid");
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("length must be valid");
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!false){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<(idx+field)){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(idx<idx+field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}
cal.set(field,textKeyValues[idx].value);

Time : 18/01/12 15:16
----------------------------------------
Fri Jan 12 15:18:41 AEDT 2018 Fri Jan 12 15:18:41 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,697=>Find no block
Fri Jan 12 15:18:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,395
Fri Jan 12 15:18:54 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,396
Fri Jan 12 15:18:57 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,555
Fri Jan 12 15:19:00 AEDT 2018 Fri Jan 12 15:19:00 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,850=>Find no block
Fri Jan 12 15:19:01 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,382
Fri Jan 12 15:22:29 AEDT 2018 Fri Jan 12 15:22:29 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,383=>Find no block
Fri Jan 12 15:22:30 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,406
Fri Jan 12 15:23:14 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,407
Fri Jan 12 15:23:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,434
Fri Jan 12 15:23:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,435
Fri Jan 12 15:23:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,436
Fri Jan 12 15:23:42 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,437
Fri Jan 12 15:23:42 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,446

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(!false){
++count;
}
}

Time : 18/01/12 15:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(false){
++count;
}
}

Time : 18/01/12 15:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=0;
if(values!=null){
for(String value : values){
if(value.length()>0){
++count;
}
}
}
return 0;

Time : 18/01/12 15:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=0;
if(values!=null){
for(String value : values){
if(value.length()>0){
++count;
}
}
}
return -1;

Time : 18/01/12 15:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=0;
if(values!=null){
for(String value : values){
if(value.length()>0){
++count;
}
}
}
return 1;

Time : 18/01/12 15:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=0;
if(false){
for(String value : values){
if(value.length()>0){
++count;
}
}
}
return count;

Time : 18/01/12 15:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=-1;
if(values!=null){
for(String value : values){
if(value.length()>0){
++count;
}
}
}
return count;

Time : 18/01/12 15:37
----------------------------------------
Fri Jan 12 15:40:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,447
Fri Jan 12 15:40:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,448
Fri Jan 12 15:40:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,449
Fri Jan 12 15:40:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,450
Fri Jan 12 15:40:18 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,454
Fri Jan 12 15:40:18 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>=0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}

Time : 18/01/12 15:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values.length>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}

Time : 18/01/12 15:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;--i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/12 15:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/12 15:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<values.length;++i){
String value=values[i-i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/12 15:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
offset--;
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/12 15:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}

Time : 18/01/12 15:55
----------------------------------------
Fri Jan 12 15:56:39 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,466
Fri Jan 12 15:56:39 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,467
Fri Jan 12 15:56:39 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,468
Fri Jan 12 15:56:40 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,469
Fri Jan 12 15:56:40 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,473

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values!=null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return 0;

Time : 18/01/12 15:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values!=null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return -1;

Time : 18/01/12 15:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values!=null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return 1;

Time : 18/01/12 15:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values!=null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return 4;

Time : 18/01/12 15:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return offset;

Time : 18/01/12 16:00
----------------------------------------
Fri Jan 12 16:02:14 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,672

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 18/01/12 16:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 18/01/12 16:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 18/01/12 16:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 18/01/12 16:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
new StringBuilder(32).append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/12 16:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/12 16:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/12 16:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/12 16:11
----------------------------------------
Fri Jan 12 16:15:02 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,673
Fri Jan 12 16:15:03 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,674
Fri Jan 12 16:15:03 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,676
Fri Jan 12 16:15:03 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,677
Fri Jan 12 16:15:04 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,379
Fri Jan 12 16:15:06 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,380
Fri Jan 12 16:15:06 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,381
Fri Jan 12 16:15:56 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,411
Fri Jan 12 16:16:47 AEDT 2018 Fri Jan 12 16:16:47 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,357=>Find no block
Fri Jan 12 16:16:47 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,358

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
key=key;
this.value=value;

Time : 18/01/12 16:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
this.key+=key;
this.value=value;

Time : 18/01/12 16:18
----------------------------------------
Fri Jan 12 16:19:15 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,359
Fri Jan 12 16:19:15 AEDT 2018 Fri Jan 12 16:19:15 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,360=>Find no block
Fri Jan 12 16:19:16 AEDT 2018 Fri Jan 12 16:19:16 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,369=>Find no block
Fri Jan 12 16:19:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,250

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}

Time : 18/01/12 16:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Date date=parse(source,new ParsePosition(0));
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}
return date;

Time : 18/01/12 16:25
----------------------------------------
Fri Jan 12 16:28:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,251
Fri Jan 12 16:28:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,260
Fri Jan 12 16:28:17 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,762
Fri Jan 12 16:28:19 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,213
Fri Jan 12 16:30:51 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,215
Fri Jan 12 16:35:53 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,741

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<3){
throw new IllegalArgumentException();
}
cal.set(field,modify(Integer.parseInt(value)));

Time : 18/01/12 16:37
----------------------------------------
Fri Jan 12 16:38:11 AEDT 2018 Fri Jan 12 16:38:11 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,742=>Find no block
Fri Jan 12 16:38:12 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset<=4){
return null;
}

Time : 18/01/12 16:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(source==null){
return null;
}

Time : 18/01/12 16:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pattern.charAt(pos.getIndex());
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(!matcher.lookingAt()){
return null;
}

Time : 18/01/12 16:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(source.charAt(offset)==' '){
return null;
}

Time : 18/01/12 16:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset>source.length()){
return null;
}

Time : 18/01/12 16:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(currentFormatField.charAt(0)=='L'){
return null;
}

Time : 18/01/12 16:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(matcher==null){
return null;
}

Time : 18/01/12 16:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(source.length()>0){
return null;
}

Time : 18/01/12 16:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset<0){
return null;
}

Time : 18/01/12 16:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(currentFormatField.indexOf(currentFormatField,offset)<0){
return null;
}

Time : 18/01/12 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(currentFormatField.length()>0){
return null;
}

Time : 18/01/12 16:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(currentFormatField==null){
return null;
}

Time : 18/01/12 16:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset==0){
return null;
}

Time : 18/01/12 16:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset!=0){
return null;
}

Time : 18/01/12 16:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset!=-1){
return null;
}

Time : 18/01/12 16:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if((offset=currentFormatField.length())==0){
return null;
}

Time : 18/01/12 16:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(locale==null){
return null;
}

Time : 18/01/12 16:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(currentFormatField==null&&currentFormatField==null){
return null;
}

Time : 18/01/12 16:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(currentFormatField.charAt(0)=='-'){
return null;
}

Time : 18/01/12 16:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset>=12){
return null;
}

Time : 18/01/12 16:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(offset>=15){
return null;
}

Time : 18/01/12 16:59
----------------------------------------
Fri Jan 12 17:00:38 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,277
Fri Jan 12 17:00:38 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,278
Fri Jan 12 17:00:40 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,282

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(locale==null){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(timeZone==null){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField.equals(locale.getCountry())&&locale.getVariant().isEmpty()){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField==null){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(tzsCache.get(locale)==null){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField.equals(locale.getLanguage())&&locale.getCountry().length()!=0&&locale.getVariant().isEmpty()){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField.equals(locale.getLanguage())&&locale.getCountry().length()!=0){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(locale.getCountry().length()!=0){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(locale!=null){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/12 17:09
----------------------------------------
Fri Jan 12 17:10:08 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,283

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
currentFormatField=formatPattern.matcher(pattern).group();
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
currentFormatField=currentFormatField;
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
offset=currentFormatField.length();
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:26
----------------------------------------
Fri Jan 12 17:29:11 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,285

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;--i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
currentFormatField=currentFormatField.substring(0,i).trim();
}

Time : 18/01/12 17:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i-i];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<pattern.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/12 17:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
offset=currentFormatField.length();
}

Time : 18/01/12 17:45
----------------------------------------
Fri Jan 12 17:47:27 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,286
Fri Jan 12 17:47:27 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,287
Fri Jan 12 17:47:28 AEDT 2018 Fri Jan 12 17:47:28 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,288=>Find no block
Fri Jan 12 17:47:28 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,289

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<pattern.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=offset-1;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[offset-1];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=offset-1;i<strategies.length;){
Strategy strategy=strategies[offset-1];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=offset;i<strategies.length;){
Strategy strategy=strategies[offset-1];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
currentFormatField=currentFormatField.substring(0,i).trim();
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
currentFormatField.toCharArray()[i]=Character.toTitleCase(currentFormatField.toCharArray()[i]);
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 17:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i];
currentFormatField.toCharArray()[i]=Character.toTitleCase(currentFormatField.toCharArray()[i]);
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
currentFormatField.toCharArray()[i]=Character.toLowerCase(currentFormatField.toCharArray()[i]);
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i];
currentFormatField.toCharArray()[i]=Character.toLowerCase(currentFormatField.toCharArray()[i]);
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;--offset<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=offset;--offset<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
offset=currentFormatField.length();
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
currentFormatField=currentFormatField.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$","$1$2");
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
i-=7;
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/12 18:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return null;

Time : 18/01/12 18:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return currentFormatField.length()==0?cal.getTime():null;

Time : 18/01/12 18:18
----------------------------------------
Fri Jan 12 18:18:55 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,290
Fri Jan 12 18:18:55 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,308

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value==null){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append("]\n");
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append("]\n");
if(value==null){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append("Exception Context:\n");
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append("Exception Context:\n");
if(regex.length()>0){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i>0){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!wasWhite&&(c>='A'&&c<='Z'||c>='a'&&c<='z')){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((c>='A'&&c<='Z'||c>='a'&&c<='z')){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c>='A'&&c<='Z'||c>='a'&&c<='z'){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c>='A'&&c<='Z'){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c>='A'){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c>='a'&&c<='z'){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c>='a'){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(false){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c==c&&i!=0){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i!=0){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(unquote==false){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
wasWhite=!Character.isDigit(c);
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}

Time : 18/01/12 18:38
----------------------------------------
Fri Jan 12 18:39:00 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,309
Fri Jan 12 18:39:00 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,310
Fri Jan 12 18:39:01 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,235
Fri Jan 12 18:40:21 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,236
Fri Jan 12 18:41:22 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,565
Fri Jan 12 18:45:04 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
currentFormatField=patternMatcher.group();
if(currentStrategy.addRegex(this,regex)){
collector.add(currentStrategy);
}

Time : 18/01/12 18:45
----------------------------------------
Fri Jan 12 18:47:06 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,314

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
wasWhite=!Character.isDigit(c);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/12 18:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
wasWhite=false;
}
continue;
}

Time : 18/01/12 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(unquote||unquote){
wasWhite=true;
wasWhite=false;
}
continue;
}

Time : 18/01/12 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(unquote){
wasWhite=true;
wasWhite=false;
}
continue;
}

Time : 18/01/12 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/12 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
unquote=false;
}
continue;
}

Time : 18/01/12 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
unquote=false;
}
continue;
}

Time : 18/01/12 18:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
wasWhite=false;
}
continue;
}
wasWhite=false;

Time : 18/01/12 18:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(unquote||unquote){
wasWhite=true;
wasWhite=false;
}
continue;
}
wasWhite=false;

Time : 18/01/12 18:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isWhitespace(c)){
if(unquote){
wasWhite=true;
wasWhite=false;
}
continue;
}
wasWhite=false;

Time : 18/01/12 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}
wasWhite=false;

Time : 18/01/12 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
wasWhite=false;
}
continue;
}
wasWhite=false;

Time : 18/01/12 18:59
----------------------------------------
Fri Jan 12 19:00:49 AEDT 2018 Fri Jan 12 19:00:49 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,315=>Find no block
Fri Jan 12 19:00:49 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,340
Timeout time : 18/01/12 19:06
