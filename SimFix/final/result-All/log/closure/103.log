=================================================
Project : closure_103	start : 18/01/12 14:05
Current failed test : com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty | 18/01/12 14:05
Fri Jan 12 14:09:01 AEDT 2018 com.google.javascript.rhino.Node,1330
Fri Jan 12 14:09:09 AEDT 2018 Fri Jan 12 14:09:09 AEDT 2018 : com.google.javascript.rhino.Node,177=>Find no block
Fri Jan 12 14:09:10 AEDT 2018 com.google.javascript.rhino.Node,197
Fri Jan 12 14:09:20 AEDT 2018 com.google.javascript.rhino.Node,213
Fri Jan 12 14:09:30 AEDT 2018 com.google.javascript.rhino.Node,222
Fri Jan 12 14:09:39 AEDT 2018 com.google.javascript.rhino.Node,803
Fri Jan 12 14:33:34 AEDT 2018 com.google.javascript.rhino.Node,804
Fri Jan 12 14:33:35 AEDT 2018 com.google.javascript.rhino.Node,805
Fri Jan 12 14:33:36 AEDT 2018 com.google.javascript.rhino.Node,808
Fri Jan 12 14:33:37 AEDT 2018 com.google.javascript.rhino.Node,809
Fri Jan 12 14:33:38 AEDT 2018 com.google.javascript.rhino.Node,810
Fri Jan 12 14:33:39 AEDT 2018 com.google.javascript.rhino.Node,811
Fri Jan 12 14:33:40 AEDT 2018 com.google.javascript.rhino.Node,814
Fri Jan 12 14:33:41 AEDT 2018 com.google.javascript.rhino.Node,815
Fri Jan 12 14:33:42 AEDT 2018 com.google.javascript.rhino.Node,872
Fri Jan 12 14:33:46 AEDT 2018 com.google.javascript.rhino.Node,881
Fri Jan 12 14:36:51 AEDT 2018 com.google.javascript.rhino.Node,882
Fri Jan 12 14:36:52 AEDT 2018 com.google.javascript.rhino.Node,883
Fri Jan 12 14:36:53 AEDT 2018 com.google.javascript.rhino.Node,895
Timeout time : 18/01/12 15:49
Current failed test : com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf | 18/01/12 15:49
Fri Jan 12 15:52:03 AEDT 2018 Fri Jan 12 15:52:03 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,77=>Find no block
Fri Jan 12 15:52:04 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,78
Fri Jan 12 16:06:43 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,79
Fri Jan 12 16:06:44 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,80
Fri Jan 12 16:06:45 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,81
Fri Jan 12 16:06:46 AEDT 2018 Fri Jan 12 16:06:46 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,82=>Find no block
Fri Jan 12 16:06:47 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,86
Fri Jan 12 16:18:02 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,88
Fri Jan 12 16:25:40 AEDT 2018 Fri Jan 12 16:25:40 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,92=>Find no block
Fri Jan 12 16:25:42 AEDT 2018 Fri Jan 12 16:25:42 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,94=>Find no block
Fri Jan 12 16:25:43 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,97
Timeout time : 18/01/12 17:32
Current failed test : com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException | 18/01/12 17:32
Fri Jan 12 17:35:34 AEDT 2018 com.google.javascript.jscomp.ControlFlowAnalysis,628
Fri Jan 12 18:10:53 AEDT 2018 Fri Jan 12 18:10:53 AEDT 2018 : com.google.javascript.jscomp.ControlFlowAnalysis,637=>Find no block
Fri Jan 12 18:10:53 AEDT 2018 com.google.javascript.jscomp.JSError,215
Fri Jan 12 18:10:57 AEDT 2018 com.google.javascript.jscomp.CheckUnreachableCode,65

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.THIS){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((n.getType()==Token.IF||parent.getType()==Token.WHILE||parent.getType()==Token.WITH||parent.getType()==Token.SWITCH||parent.getType()==Token.CASE)&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=n.getType()&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((n.getType()==Token.IF||parent.getType()==Token.WHILE||parent.getType()==Token.WITH||parent.getType()==Token.SWITCH||parent.getType()==Token.CASE)&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=n.getType()&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if((n.getType()==Token.IF||parent.getType()==Token.WHILE||parent.getType()==Token.WITH||parent.getType()==Token.SWITCH||parent.getType()==Token.CASE)&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=n.getType()&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=n.getType()&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=n.getType()&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=n.getType()&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=n.getType()&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=n.getType()&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/12 19:15
----------------------------------------
Timeout time : 18/01/12 19:17
