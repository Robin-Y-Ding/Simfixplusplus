=================================================
Project : math_84	start : 18/01/12 14:05
Current failed test : org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMath283_purify_1 | 18/01/12 14:07
Fri Jan 12 14:08:22 AEDT 2018 org.apache.commons.math.optimization.OptimizationException,50
Fri Jan 12 14:08:27 AEDT 2018 Fri Jan 12 14:08:27 AEDT 2018 : org.apache.commons.math.optimization.OptimizationException,51=>Find no block
Fri Jan 12 14:08:29 AEDT 2018 org.apache.commons.math.ConvergenceException,45
Fri Jan 12 14:10:00 AEDT 2018 Fri Jan 12 14:10:00 AEDT 2018 : org.apache.commons.math.ConvergenceException,46=>Find no block
Fri Jan 12 14:10:01 AEDT 2018 org.apache.commons.math.ConvergenceException,53
Fri Jan 12 14:10:03 AEDT 2018 Fri Jan 12 14:10:03 AEDT 2018 : org.apache.commons.math.ConvergenceException,54=>Find no block
Fri Jan 12 14:10:04 AEDT 2018 org.apache.commons.math.MathException,166
Fri Jan 12 14:11:00 AEDT 2018 org.apache.commons.math.MathException,172
Fri Jan 12 14:11:04 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,320
Fri Jan 12 14:12:13 AEDT 2018 org.apache.commons.math.MaxIterationsExceededException,43
Fri Jan 12 14:14:10 AEDT 2018 org.apache.commons.math.MaxIterationsExceededException,44
Fri Jan 12 14:14:11 AEDT 2018 Fri Jan 12 14:14:11 AEDT 2018 : org.apache.commons.math.MaxIterationsExceededException,45=>Find no block
Fri Jan 12 14:14:12 AEDT 2018 org.apache.commons.math.MathException,106
Fri Jan 12 14:16:06 AEDT 2018 org.apache.commons.math.MathException,107
Fri Jan 12 14:16:07 AEDT 2018 org.apache.commons.math.MathException,108
Fri Jan 12 14:16:07 AEDT 2018 Fri Jan 12 14:16:07 AEDT 2018 : org.apache.commons.math.MathException,109=>Find no block
Fri Jan 12 14:16:09 AEDT 2018 org.apache.commons.math.MathException,119
Fri Jan 12 14:18:02 AEDT 2018 org.apache.commons.math.MathException,120
Fri Jan 12 14:18:03 AEDT 2018 org.apache.commons.math.MathException,121
Fri Jan 12 14:18:04 AEDT 2018 Fri Jan 12 14:18:04 AEDT 2018 : org.apache.commons.math.MathException,122=>Find no block
Fri Jan 12 14:18:05 AEDT 2018 org.apache.commons.math.MathException,60
Fri Jan 12 14:18:47 AEDT 2018 Fri Jan 12 14:18:47 AEDT 2018 : org.apache.commons.math.MathException,67=>Find no block
Fri Jan 12 14:18:48 AEDT 2018 org.apache.commons.math.MathException,73
Fri Jan 12 14:18:49 AEDT 2018 org.apache.commons.math.MathException,85
Fri Jan 12 14:19:30 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,268
Fri Jan 12 14:22:53 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,269
Fri Jan 12 14:22:55 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,270
Fri Jan 12 14:22:56 AEDT 2018 Fri Jan 12 14:22:56 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,61=>Find no block
Fri Jan 12 14:22:57 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,62
Fri Jan 12 14:26:01 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,63
Fri Jan 12 14:26:02 AEDT 2018 Fri Jan 12 14:26:02 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,64=>Find no block
Fri Jan 12 14:26:03 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,142
Timeout time : 18/01/12 14:58
Current failed test : org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMath283_purify_2 | 18/01/12 14:58
Fri Jan 12 14:59:01 AEDT 2018 org.apache.commons.math.optimization.OptimizationException,50
Fri Jan 12 14:59:04 AEDT 2018 Fri Jan 12 14:59:04 AEDT 2018 : org.apache.commons.math.optimization.OptimizationException,51=>Find no block
Fri Jan 12 14:59:05 AEDT 2018 org.apache.commons.math.ConvergenceException,45
Fri Jan 12 15:00:27 AEDT 2018 Fri Jan 12 15:00:27 AEDT 2018 : org.apache.commons.math.ConvergenceException,46=>Find no block
Fri Jan 12 15:00:27 AEDT 2018 org.apache.commons.math.ConvergenceException,53
Fri Jan 12 15:00:28 AEDT 2018 Fri Jan 12 15:00:28 AEDT 2018 : org.apache.commons.math.ConvergenceException,54=>Find no block
Fri Jan 12 15:00:29 AEDT 2018 org.apache.commons.math.MathException,166
Fri Jan 12 15:01:18 AEDT 2018 org.apache.commons.math.MathException,172
Fri Jan 12 15:01:21 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,320
Fri Jan 12 15:02:20 AEDT 2018 org.apache.commons.math.MaxIterationsExceededException,43
Fri Jan 12 15:04:08 AEDT 2018 org.apache.commons.math.MaxIterationsExceededException,44
Fri Jan 12 15:04:09 AEDT 2018 Fri Jan 12 15:04:09 AEDT 2018 : org.apache.commons.math.MaxIterationsExceededException,45=>Find no block
Fri Jan 12 15:04:09 AEDT 2018 org.apache.commons.math.MathException,106
Fri Jan 12 15:05:56 AEDT 2018 org.apache.commons.math.MathException,107
Fri Jan 12 15:05:57 AEDT 2018 org.apache.commons.math.MathException,108
Fri Jan 12 15:05:57 AEDT 2018 Fri Jan 12 15:05:57 AEDT 2018 : org.apache.commons.math.MathException,109=>Find no block
Fri Jan 12 15:05:58 AEDT 2018 org.apache.commons.math.MathException,119
Fri Jan 12 15:07:43 AEDT 2018 org.apache.commons.math.MathException,120
Fri Jan 12 15:07:43 AEDT 2018 org.apache.commons.math.MathException,121
Fri Jan 12 15:07:44 AEDT 2018 Fri Jan 12 15:07:44 AEDT 2018 : org.apache.commons.math.MathException,122=>Find no block
Fri Jan 12 15:07:45 AEDT 2018 org.apache.commons.math.MathException,60
Fri Jan 12 15:08:23 AEDT 2018 Fri Jan 12 15:08:23 AEDT 2018 : org.apache.commons.math.MathException,67=>Find no block
Fri Jan 12 15:08:23 AEDT 2018 org.apache.commons.math.MathException,73
Fri Jan 12 15:08:24 AEDT 2018 org.apache.commons.math.MathException,85
Fri Jan 12 15:09:03 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,268
Fri Jan 12 15:12:08 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,269
Fri Jan 12 15:12:10 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,270
Fri Jan 12 15:12:11 AEDT 2018 Fri Jan 12 15:12:11 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,61=>Find no block
Fri Jan 12 15:12:13 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,62
Fri Jan 12 15:15:00 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,63
Fri Jan 12 15:15:01 AEDT 2018 Fri Jan 12 15:15:01 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,64=>Find no block
Fri Jan 12 15:15:02 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,142
Timeout time : 18/01/12 15:49
Current failed test : org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMath283_purify_3 | 18/01/12 15:49
Fri Jan 12 15:49:44 AEDT 2018 org.apache.commons.math.optimization.OptimizationException,50
Fri Jan 12 15:49:47 AEDT 2018 Fri Jan 12 15:49:47 AEDT 2018 : org.apache.commons.math.optimization.OptimizationException,51=>Find no block
Fri Jan 12 15:49:48 AEDT 2018 org.apache.commons.math.ConvergenceException,45
Fri Jan 12 15:51:10 AEDT 2018 Fri Jan 12 15:51:10 AEDT 2018 : org.apache.commons.math.ConvergenceException,46=>Find no block
Fri Jan 12 15:51:11 AEDT 2018 org.apache.commons.math.ConvergenceException,53
Fri Jan 12 15:51:12 AEDT 2018 Fri Jan 12 15:51:12 AEDT 2018 : org.apache.commons.math.ConvergenceException,54=>Find no block
Fri Jan 12 15:51:13 AEDT 2018 org.apache.commons.math.MathException,166
Fri Jan 12 15:52:05 AEDT 2018 org.apache.commons.math.MathException,172
Fri Jan 12 15:52:08 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,320
Fri Jan 12 15:53:09 AEDT 2018 org.apache.commons.math.MaxIterationsExceededException,43
Fri Jan 12 15:54:56 AEDT 2018 org.apache.commons.math.MaxIterationsExceededException,44
Fri Jan 12 15:54:57 AEDT 2018 Fri Jan 12 15:54:57 AEDT 2018 : org.apache.commons.math.MaxIterationsExceededException,45=>Find no block
Fri Jan 12 15:54:57 AEDT 2018 org.apache.commons.math.MathException,106
Fri Jan 12 15:56:45 AEDT 2018 org.apache.commons.math.MathException,107
Fri Jan 12 15:56:46 AEDT 2018 org.apache.commons.math.MathException,108
Fri Jan 12 15:56:46 AEDT 2018 Fri Jan 12 15:56:46 AEDT 2018 : org.apache.commons.math.MathException,109=>Find no block
Fri Jan 12 15:56:47 AEDT 2018 org.apache.commons.math.MathException,119
Fri Jan 12 15:58:33 AEDT 2018 org.apache.commons.math.MathException,120
Fri Jan 12 15:58:34 AEDT 2018 org.apache.commons.math.MathException,121
Fri Jan 12 15:58:35 AEDT 2018 Fri Jan 12 15:58:35 AEDT 2018 : org.apache.commons.math.MathException,122=>Find no block
Fri Jan 12 15:58:35 AEDT 2018 org.apache.commons.math.MathException,60
Fri Jan 12 15:59:12 AEDT 2018 Fri Jan 12 15:59:12 AEDT 2018 : org.apache.commons.math.MathException,67=>Find no block
Fri Jan 12 15:59:13 AEDT 2018 org.apache.commons.math.MathException,73
Fri Jan 12 15:59:14 AEDT 2018 org.apache.commons.math.MathException,85
Fri Jan 12 15:59:53 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,268
Fri Jan 12 16:03:01 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,269
Fri Jan 12 16:03:02 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,270
Fri Jan 12 16:03:02 AEDT 2018 Fri Jan 12 16:03:02 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,61=>Find no block
Fri Jan 12 16:03:03 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,62
Fri Jan 12 16:05:50 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,63
Fri Jan 12 16:05:51 AEDT 2018 Fri Jan 12 16:05:51 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,64=>Find no block
Fri Jan 12 16:05:52 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,142
Timeout time : 18/01/12 16:39
Current failed test : org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMinimizeMaximize_purify_9 | 18/01/12 16:39
Fri Jan 12 16:40:32 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,245
Fri Jan 12 16:40:36 AEDT 2018 Fri Jan 12 16:40:36 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,61=>Find no block
Fri Jan 12 16:40:38 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,62
Fri Jan 12 16:43:53 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,63
Fri Jan 12 16:43:54 AEDT 2018 Fri Jan 12 16:43:54 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,64=>Find no block
Fri Jan 12 16:43:55 AEDT 2018 Fri Jan 12 16:43:55 AEDT 2018 : org.apache.commons.math.optimization.SimpleScalarValueChecker,65=>Find no block
Fri Jan 12 16:43:57 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,66
Fri Jan 12 16:44:50 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,67
Fri Jan 12 16:44:51 AEDT 2018 Fri Jan 12 16:44:51 AEDT 2018 : org.apache.commons.math.optimization.SimpleScalarValueChecker,68=>Find no block
Fri Jan 12 16:44:53 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,74

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return true;

Time : 18/01/12 16:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=(difference<1.0E-15)?Math.max(Math.abs(p),Math.abs(c)):Math.pow(0.01/difference,1.0/iteration);
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 16:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return Math.abs(size-difference)<=iteration;

Time : 18/01/12 16:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.log(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 16:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.floor(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 16:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold;
 final double c=current.getValue();
 final double difference=Math.floor(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 16:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.ulp(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold;
 final double c=absoluteThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold;
 final double c=relativeThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold;
 final double c=absoluteThreshold*relativeThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold+relativeThreshold;
 final double c=relativeThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=(iteration==0)?previous.getValue():0d;
 final double c=(iteration==0)?current.getValue():0d;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=(relativeThreshold-DEFAULT_RELATIVE_THRESHOLD)/iteration;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=(relativeThreshold-DEFAULT_RELATIVE_THRESHOLD);
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold-DEFAULT_RELATIVE_THRESHOLD;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD;
 final double c=DEFAULT_RELATIVE_THRESHOLD;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold;
 final double c=absoluteThreshold*DEFAULT_RELATIVE_THRESHOLD;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD*absoluteThreshold;
 final double c=absoluteThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD*absoluteThreshold;
 final double c=absoluteThreshold*DEFAULT_RELATIVE_THRESHOLD;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:19
----------------------------------------
Fri Jan 12 17:22:37 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,75
Fri Jan 12 17:22:38 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,76
Fri Jan 12 17:22:39 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,77
Fri Jan 12 17:22:40 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,78
Fri Jan 12 17:22:41 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,142
Timeout time : 18/01/12 17:31
Current failed test : org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMinimizeMaximize_purify_11 | 18/01/12 17:31
Fri Jan 12 17:31:42 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,70
Fri Jan 12 17:32:53 AEDT 2018 Fri Jan 12 17:32:53 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,61=>Find no block
Fri Jan 12 17:32:54 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,62
Fri Jan 12 17:35:51 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,63
Fri Jan 12 17:35:52 AEDT 2018 Fri Jan 12 17:35:52 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,64=>Find no block
Fri Jan 12 17:35:53 AEDT 2018 Fri Jan 12 17:35:53 AEDT 2018 : org.apache.commons.math.optimization.SimpleScalarValueChecker,65=>Find no block
Fri Jan 12 17:35:54 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,66
Fri Jan 12 17:36:42 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,67
Fri Jan 12 17:36:43 AEDT 2018 Fri Jan 12 17:36:43 AEDT 2018 : org.apache.commons.math.optimization.SimpleScalarValueChecker,68=>Find no block
Fri Jan 12 17:36:43 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,74

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=(difference<1.0E-15)?Math.max(Math.abs(p),Math.abs(c)):Math.pow(0.01/difference,1.0/iteration);
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 17:41
----------------------------------------
Fri Jan 12 18:02:51 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,75
Fri Jan 12 18:02:52 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,76
Fri Jan 12 18:02:53 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,77
Fri Jan 12 18:02:55 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,78
Fri Jan 12 18:02:56 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,142
Timeout time : 18/01/12 18:21
Current failed test : org.apache.commons.math.optimization.direct.MultiDirectionalTest::testMinimizeMaximize_purify_14 | 18/01/12 18:21
Fri Jan 12 18:22:25 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,245
Fri Jan 12 18:22:30 AEDT 2018 Fri Jan 12 18:22:30 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,61=>Find no block
Fri Jan 12 18:22:31 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,62
Fri Jan 12 18:25:44 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,63
Fri Jan 12 18:25:45 AEDT 2018 Fri Jan 12 18:25:45 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,64=>Find no block
Fri Jan 12 18:25:46 AEDT 2018 Fri Jan 12 18:25:46 AEDT 2018 : org.apache.commons.math.optimization.SimpleScalarValueChecker,65=>Find no block
Fri Jan 12 18:25:47 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,66
Fri Jan 12 18:26:38 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,67
Fri Jan 12 18:26:39 AEDT 2018 Fri Jan 12 18:26:39 AEDT 2018 : org.apache.commons.math.optimization.SimpleScalarValueChecker,68=>Find no block
Fri Jan 12 18:26:40 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,74

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return true;

Time : 18/01/12 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=(difference<1.0E-15)?Math.max(Math.abs(p),Math.abs(c)):Math.pow(0.01/difference,1.0/iteration);
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return Math.abs(size-difference)<=iteration;

Time : 18/01/12 18:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.log(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.floor(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold;
 final double c=current.getValue();
 final double difference=Math.floor(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=current.getValue();
 final double difference=Math.ulp(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold;
 final double c=absoluteThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold;
 final double c=relativeThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold;
 final double c=absoluteThreshold*relativeThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold+relativeThreshold;
 final double c=relativeThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=(iteration==0)?previous.getValue():0d;
 final double c=(iteration==0)?current.getValue():0d;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=previous.getValue();
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=(relativeThreshold-DEFAULT_RELATIVE_THRESHOLD)/iteration;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=(relativeThreshold-DEFAULT_RELATIVE_THRESHOLD);
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold-DEFAULT_RELATIVE_THRESHOLD;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=relativeThreshold;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD;
 final double c=p;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD;
 final double c=DEFAULT_RELATIVE_THRESHOLD;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=absoluteThreshold;
 final double c=absoluteThreshold*DEFAULT_RELATIVE_THRESHOLD;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 18:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD*absoluteThreshold;
 final double c=absoluteThreshold;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=DEFAULT_RELATIVE_THRESHOLD*absoluteThreshold;
 final double c=absoluteThreshold*DEFAULT_RELATIVE_THRESHOLD;
 final double difference=Math.abs(p-c);
 final double size=Math.max(Math.abs(p),Math.abs(c));
return (difference<=(size*relativeThreshold))||(difference<=absoluteThreshold);

Time : 18/01/12 19:02
----------------------------------------
Fri Jan 12 19:04:57 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,75
Fri Jan 12 19:04:57 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,76
Fri Jan 12 19:04:58 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,77
Fri Jan 12 19:04:59 AEDT 2018 org.apache.commons.math.optimization.SimpleScalarValueChecker,78
Fri Jan 12 19:05:01 AEDT 2018 org.apache.commons.math.optimization.direct.DirectSearchOptimizer,142
Timeout time : 18/01/12 19:12
