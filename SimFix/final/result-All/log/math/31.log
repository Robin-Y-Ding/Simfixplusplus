=================================================
Project : math_31	start : 18/01/12 19:45
Current failed test : org.apache.commons.math3.distribution.FDistributionTest::testMath785 | 18/01/12 19:47
Fri Jan 12 19:49:25 AEDT 2018 Fri Jan 12 19:49:25 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,45=>Find no block
Fri Jan 12 19:49:33 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,46
Fri Jan 12 19:50:54 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,47
Fri Jan 12 19:51:02 AEDT 2018 Fri Jan 12 19:51:02 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,48=>Find no block
Fri Jan 12 19:51:09 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,69
Fri Jan 12 19:51:26 AEDT 2018 Fri Jan 12 19:51:26 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,70=>Find no block
Fri Jan 12 19:51:33 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,74
Fri Jan 12 19:51:49 AEDT 2018 Fri Jan 12 19:51:49 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,48=>Find no block
Fri Jan 12 19:51:57 AEDT 2018 org.apache.commons.math3.exception.ConvergenceException,49
Fri Jan 12 19:53:18 AEDT 2018 Fri Jan 12 19:53:18 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,50=>Find no block
Fri Jan 12 19:53:25 AEDT 2018 org.apache.commons.math3.util.ContinuedFraction,177
Fri Jan 12 20:24:04 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,178
Fri Jan 12 20:24:11 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,194

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>2){
return (2*(denominatorDF*denominatorDF))/(denominatorDF-2);
}

Time : 18/01/12 20:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>2){
return 2*(denominatorDF*denominatorDF)/(denominatorDF-2);
}

Time : 18/01/12 20:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>2){
return (denominatorDF*denominatorDF)/(denominatorDF-2);
}

Time : 18/01/12 20:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>2){
return denominatorDF*denominatorDF/(denominatorDF-2);
}

Time : 18/01/12 20:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>4){
return (2*(denominatorDF*denominatorDF))/(denominatorDF-2);
}

Time : 18/01/12 20:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>4){
return 2*(denominatorDF*denominatorDF)/(denominatorDF-2);
}

Time : 18/01/12 20:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>4){
return (denominatorDF*denominatorDF)/(denominatorDF-2);
}

Time : 18/01/12 20:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(denominatorDF>4){
return denominatorDF*denominatorDF/(denominatorDF-2);
}

Time : 18/01/12 20:45
----------------------------------------
Fri Jan 12 20:47:22 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,230
Fri Jan 12 20:47:26 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,231
Fri Jan 12 20:47:27 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,233
Fri Jan 12 20:47:29 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=ret=1.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 20:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=ret=1.0-FastMath.exp(-FastMath.pow(x/m,DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
}

Time : 18/01/12 20:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=ret=0.0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=ret=1.0-FastMath.exp(-FastMath.pow(x/m,DEFAULT_INVERSE_ABSOLUTE_ACCURACY));
}

Time : 18/01/12 20:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=x;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 20:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isNaN(x)||(x<=0.0)){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=x;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 20:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x;
double m=(n-DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x;
double m=n-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return Math.PI/2.0;
}
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=(x-DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x-DEFAULT_INVERSE_ABSOLUTE_ACCURACY;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=1/(x*x);
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=(x*x);
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x*x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x*9.313226E-10;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=1.0+x;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=1.0+x;
double m=(n-1.0);
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=1.0+x;
double m=n-1.0;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x<=0){
ret=0;
}else {
double n=x;
double m=-(n-1.0);
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(FastMath.abs(DEFAULT_INVERSE_ABSOLUTE_ACCURACY)<=solverAbsoluteAccuracy){
return x;
}
if(x<=0){
ret=0;
}else {
double n=numeratorDegreesOfFreedom;
double m=denominatorDegreesOfFreedom;
ret=Beta.regularizedBeta((n*x)/(m+n*x),0.5*n,0.5*m);
}

Time : 18/01/12 21:51
----------------------------------------
Fri Jan 12 21:56:32 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,163
Fri Jan 12 21:56:37 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,191

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>2){
return (2*(denominatorDF*denominatorDF))/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 21:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>2){
return 2*(denominatorDF*denominatorDF)/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 21:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>2){
return (denominatorDF*denominatorDF)/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 22:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>2){
return denominatorDF*denominatorDF/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 22:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
return (2*(denominatorDF*denominatorDF))/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 22:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
return 2*(denominatorDF*denominatorDF)/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 22:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
return (denominatorDF*denominatorDF)/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 22:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
return denominatorDF*denominatorDF/(denominatorDF-2);
}
return Double.NaN;

Time : 18/01/12 22:08
----------------------------------------
Fri Jan 12 22:10:01 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,193
Fri Jan 12 22:10:02 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,214
Fri Jan 12 22:10:06 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,215
Fri Jan 12 22:10:07 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,216
Fri Jan 12 22:10:08 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,218
Fri Jan 12 22:10:48 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,227

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
 final double numeratorDF=getNumeratorDegreesOfFreedom();
 final double denomDFMinusTwo=denominatorDF-2;
return (denominatorDF)/((denominatorDF));
}
return Double.NaN;

Time : 18/01/12 22:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
 final double numeratorDF=getNumeratorDegreesOfFreedom();
 final double denomDFMinusTwo=denominatorDF-2;
return (2*(denominatorDF*denominatorDF))/((denominatorDF-2));
}
return Double.NaN;

Time : 18/01/12 22:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>4){
 final double numeratorDF=getNumeratorDegreesOfFreedom();
 final double denomDFMinusTwo=denominatorDF-2;
return (2*(denominatorDF*denominatorDF))/((denominatorDF));
}
return Double.NaN;

Time : 18/01/12 22:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>2){
 final double numeratorDF=getNumeratorDegreesOfFreedom();
 final double denomDFMinusTwo=denominatorDF-2;
return (2*(denominatorDF*denominatorDF))/((denominatorDF));
}
return Double.NaN;

Time : 18/01/12 22:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double denominatorDF=getDenominatorDegreesOfFreedom();
if(denominatorDF>2){
 final double numeratorDF=getNumeratorDegreesOfFreedom();
 final double denomDFMinusTwo=denominatorDF-2;
return (2*(denominatorDF*denominatorDF))/((denominatorDF-2));
}
return Double.NaN;

Time : 18/01/12 22:18
----------------------------------------
Timeout time : 18/01/12 22:19
Current failed test : org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718 | 18/01/12 22:19
Fri Jan 12 22:21:08 AEDT 2018 Fri Jan 12 22:21:08 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,45=>Find no block
Fri Jan 12 22:21:09 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,46
Fri Jan 12 22:21:53 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,47
Fri Jan 12 22:21:54 AEDT 2018 Fri Jan 12 22:21:54 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,48=>Find no block
Fri Jan 12 22:21:55 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,69
Fri Jan 12 22:21:59 AEDT 2018 Fri Jan 12 22:21:59 AEDT 2018 : org.apache.commons.math3.exception.MathIllegalStateException,70=>Find no block
Fri Jan 12 22:22:00 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,74
Fri Jan 12 22:22:04 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,80
Fri Jan 12 22:22:47 AEDT 2018 org.apache.commons.math3.exception.MathIllegalStateException,86
Fri Jan 12 22:23:26 AEDT 2018 Fri Jan 12 22:23:26 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,48=>Find no block
Fri Jan 12 22:23:27 AEDT 2018 org.apache.commons.math3.exception.ConvergenceException,49
Fri Jan 12 22:24:10 AEDT 2018 Fri Jan 12 22:24:10 AEDT 2018 : org.apache.commons.math3.exception.ConvergenceException,50=>Find no block
Fri Jan 12 22:24:11 AEDT 2018 org.apache.commons.math3.util.ContinuedFraction,177
Fri Jan 12 22:53:44 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,114
Fri Jan 12 22:54:35 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,124

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return probabilityOfSuccess;

Time : 18/01/12 22:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return (p*(1-p))/p;

Time : 18/01/12 22:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return 1*p;

Time : 18/01/12 22:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=getProbabilityOfSuccess();
return (p*(1-p))/p;

Time : 18/01/12 22:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=getProbabilityOfSuccess();
return 1*p;

Time : 18/01/12 23:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return 1*(p*p);

Time : 18/01/12 23:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return 1*p*p;

Time : 18/01/12 23:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=getProbabilityOfSuccess();
return 1*(p*p);

Time : 18/01/12 23:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=getProbabilityOfSuccess();
return 1*p*p;

Time : 18/01/12 23:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double p=probabilityOfSuccess;
return probabilityOfSuccess*FastMath.pow(p,1/probabilityOfSuccess);

Time : 18/01/12 23:09
----------------------------------------
Fri Jan 12 23:12:01 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,125
Fri Jan 12 23:12:02 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,137
Fri Jan 12 23:13:39 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,149
Fri Jan 12 23:15:16 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,96
Fri Jan 12 23:22:41 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,98
Fri Jan 12 23:22:42 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,101
Fri Jan 12 23:22:44 AEDT 2018 Fri Jan 12 23:22:44 AEDT 2018 : org.apache.commons.math3.distribution.BinomialDistribution,49=>Find no block
Fri Jan 12 23:22:45 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,50
Fri Jan 12 23:22:49 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,54
Fri Jan 12 23:25:49 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,58
Fri Jan 12 23:30:11 AEDT 2018 org.apache.commons.math3.distribution.BinomialDistribution,59
Fri Jan 12 23:30:12 AEDT 2018 Fri Jan 12 23:30:12 AEDT 2018 : org.apache.commons.math3.distribution.BinomialDistribution,60=>Find no block
Fri Jan 12 23:30:13 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,104
Fri Jan 12 23:57:21 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,105
Fri Jan 12 23:57:22 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,106
Fri Jan 12 23:57:23 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,107
Fri Jan 12 23:57:24 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,109
Fri Jan 12 23:57:25 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,110
Fri Jan 12 23:57:26 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,111
Fri Jan 12 23:57:27 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,112
Fri Jan 12 23:57:28 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,133
Sat Jan 13 00:01:33 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,134
Sat Jan 13 00:01:35 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,143
Sat Jan 13 00:01:35 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,200
Sat Jan 13 00:10:42 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,201
Sat Jan 13 00:10:43 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,99

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(p==1.0){
return upper;
}
 final double mu=getNumericalMean();
 final double sigma=(mu<1.0E-15)?FastMath.sqrt(getNumericalVariance()):FastMath.pow(0.01/mu,1.0/upper);

Time : 18/01/13 00:12
----------------------------------------
Sat Jan 13 00:18:12 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,100
Sat Jan 13 00:25:29 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,101
Sat Jan 13 00:25:30 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,103
Sat Jan 13 00:25:31 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,116
Sat Jan 13 00:43:52 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,132
Sat Jan 13 00:43:52 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,79
Sat Jan 13 00:50:44 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,80
Sat Jan 13 00:50:45 AEDT 2018 org.apache.commons.math3.distribution.AbstractIntegerDistribution,83
Timeout time : 18/01/13 00:51
