=================================================
Project : math_83	start : 18/01/12 19:12
Current failed test : org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath286 | 18/01/12 19:13
Fri Jan 12 19:14:01 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,349

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
++i;
if(basicRows.contains(basicRow)){
coefficients[i]=0;
}else {
basicRows.add(basicRow);
coefficients[i]=(basicRow==null?0:getEntry(basicRow,getRhsOffset()))-(restrictToNonNegative?0:mostNegative);
}

Time : 18/01/12 19:17
----------------------------------------
Fri Jan 12 19:20:48 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,151
Fri Jan 12 19:23:30 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexSolver,190
Fri Jan 12 19:23:34 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,297
Fri Jan 12 19:31:26 AEDT 2018 Fri Jan 12 19:31:26 AEDT 2018 : org.apache.commons.math.optimization.linear.SimplexSolver,179=>Find no block
Fri Jan 12 19:31:27 AEDT 2018 Fri Jan 12 19:31:27 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,48=>Find no block
Fri Jan 12 19:31:28 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,49
Fri Jan 12 19:37:22 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,50
Fri Jan 12 19:37:23 AEDT 2018 Fri Jan 12 19:37:23 AEDT 2018 : org.apache.commons.math.optimization.RealPointValuePair,51=>Find no block
Fri Jan 12 19:37:24 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,86
Fri Jan 12 19:38:07 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,310
Fri Jan 12 19:40:17 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,311
Fri Jan 12 19:41:39 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,312

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<=width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<width-1;j++){
matrix[i][j]+=getEntry(i+1,j+1);
}

Time : 18/01/12 19:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<width;j++){
matrix[i][j]+=getEntry(i+1,j+1);
}

Time : 18/01/12 19:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=height;j<getHeight();j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=i+1;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=i+1;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=width-2;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=i+1;j<width-1;j++){
matrix[i][j]+=getEntry(i+1,j+1);
}

Time : 18/01/12 19:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=i+1;j<width;j++){
matrix[i][j]+=getEntry(i+1,j+1);
}

Time : 18/01/12 19:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<width-1;j++){
j+=height;
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 19:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=(i+1);j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=(i+1);j<=width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=(i+1);j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=i+1;j<=width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=2;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=2;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=2;j<width-1;j++){
matrix[i][j]+=getEntry(i+1,j+1);
}

Time : 18/01/12 20:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=2;j<width;j++){
matrix[i][j]+=getEntry(i+1,j+1);
}

Time : 18/01/12 20:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=(width-2);j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}

Time : 18/01/12 20:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=i+1;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 20:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 20:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=height;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 20:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=numArtificialVariables+1;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 21:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<height;i++){
for(int j=numArtificialVariables+1;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 21:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=numArtificialVariables+1;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 21:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<height;i++){
for(int j=numArtificialVariables+1;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 21:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=i+1;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}

Time : 18/01/12 21:50
----------------------------------------
Fri Jan 12 23:23:11 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,313
Fri Jan 12 23:23:12 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,314
Fri Jan 12 23:23:13 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,315
Fri Jan 12 23:23:14 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,317
Fri Jan 12 23:23:14 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,319

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=i+1;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

Time : 18/01/12 23:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=height;j<width-1;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

Time : 18/01/12 23:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<height;i++){
for(int j=height;j<width;j++){
matrix[i][j]=getEntry(i+1,j+1);
}
matrix[i][width-1]=getEntry(i+1,getRhsOffset());
}
this.tableau=new Array2DRowRealMatrix(matrix);
this.numArtificialVariables=0;

Time : 18/01/12 23:37
----------------------------------------
Timeout time : 18/01/13 00:14
