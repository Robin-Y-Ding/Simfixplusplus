=================================================
Project : math_24	start : 18/01/13 00:10
Current failed test : org.apache.commons.math3.optimization.univariate.BrentOptimizerTest::testMath855 | 18/01/13 00:11
Sat Jan 13 00:12:49 AEDT 2018 Sat Jan 13 00:12:49 AEDT 2018 : org.apache.commons.math3.util.MathArrays,143=>Find no block
Sat Jan 13 00:12:51 AEDT 2018 Sat Jan 13 00:12:51 AEDT 2018 : org.apache.commons.math3.util.MathArrays,143=>Find no block
Sat Jan 13 00:12:54 AEDT 2018 org.apache.commons.math3.util.MathArrays,228
Sat Jan 13 00:40:43 AEDT 2018 org.apache.commons.math3.util.MathArrays,229
Sat Jan 13 00:40:44 AEDT 2018 org.apache.commons.math3.util.MathArrays,233

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
val[index]=previous;
if(val[index]<=previous){
break;
}

Time : 18/01/13 00:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
val[index]=previous;
if(strict){
if(val[index]<=previous){
break;
}
}else {
if(val[index]<previous){
break;
}
}

Time : 18/01/13 00:44
----------------------------------------
Sat Jan 13 00:58:10 AEDT 2018 Sat Jan 13 00:58:10 AEDT 2018 : org.apache.commons.math3.util.MathArrays,234=>Find no block
Sat Jan 13 00:58:11 AEDT 2018 org.apache.commons.math3.util.MathArrays,236
Sat Jan 13 00:58:12 AEDT 2018 org.apache.commons.math3.util.MathArrays,237
Sat Jan 13 00:58:13 AEDT 2018 org.apache.commons.math3.util.MathArrays,262
Sat Jan 13 01:04:16 AEDT 2018 org.apache.commons.math3.util.MathArrays,265
Sat Jan 13 01:08:02 AEDT 2018 org.apache.commons.math3.util.MathArrays,267
Sat Jan 13 01:08:03 AEDT 2018 org.apache.commons.math3.util.MathArrays,289
Sat Jan 13 01:08:08 AEDT 2018 Sat Jan 13 01:08:08 AEDT 2018 : org.apache.commons.math3.util.MathArrays,290=>Find no block
Sat Jan 13 01:08:09 AEDT 2018 org.apache.commons.math3.util.MathArrays,300
Sat Jan 13 01:08:13 AEDT 2018 Sat Jan 13 01:08:13 AEDT 2018 : org.apache.commons.math3.util.MathArrays,301=>Find no block
Sat Jan 13 01:08:14 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,141
Sat Jan 13 01:08:18 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,141
Sat Jan 13 01:08:19 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,144

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double r=f[0].value(x);
for(int i=1;i<f.length;i++){
r*=f[i].value(x);
}
return r;

Time : 18/01/13 01:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double r=f[0].value(x);
for(int i=2;i<f.length;i++){
r+=f[i].value(x);
}
return r;

Time : 18/01/13 01:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double r=f[0].value(x);
for(int i=2;i<f.length;i++){
r=f[i].value(x);
}
return r;

Time : 18/01/13 01:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
double r=f[0].value(x);
for(int i=1;i<f.length;i++){
r-=f[i].value(x);
}
return r;

Time : 18/01/13 01:44
----------------------------------------
Sat Jan 13 01:47:43 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<f.length;i++){
r/=f[i].value(x);
}

Time : 18/01/13 01:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<f.length;i++){
r*=f[i].value(x);
}

Time : 18/01/13 01:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<f.length;i++){
r-=f[i].value(x);
}

Time : 18/01/13 01:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=2;i<f.length;i++){
r+=f[i].value(x);
}

Time : 18/01/13 01:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=2;i<f.length;i++){
r=f[i].value(x);
}

Time : 18/01/13 02:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=2;i<f.length;i++){
r*=f[i].value(x);
}

Time : 18/01/13 02:02
----------------------------------------
Sat Jan 13 02:21:10 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,146
Sat Jan 13 02:21:12 AEDT 2018 org.apache.commons.math3.analysis.FunctionUtils,148
Sat Jan 13 02:21:14 AEDT 2018 Sat Jan 13 02:21:14 AEDT 2018 : org.apache.commons.math3.analysis.function.StepFunction,64=>Find no block
Sat Jan 13 02:21:15 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,65
Sat Jan 13 02:23:17 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,69
Sat Jan 13 02:38:59 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,73
Sat Jan 13 02:58:08 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,76
Sat Jan 13 03:23:13 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,78
Sat Jan 13 03:23:14 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,79
Sat Jan 13 03:23:16 AEDT 2018 Sat Jan 13 03:23:16 AEDT 2018 : org.apache.commons.math3.analysis.function.StepFunction,80=>Find no block
Sat Jan 13 03:23:17 AEDT 2018 org.apache.commons.math3.analysis.function.StepFunction,84

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(ordinate==null){
return Double.NaN;
}
if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}

Time : 18/01/13 03:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(1<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}

Time : 18/01/13 03:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(0<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}

Time : 18/01/13 03:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(ordinate==null){
return Double.NaN;
}
if(0<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}

Time : 18/01/13 03:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(ordinate,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return fx;

Time : 18/01/13 03:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(ordinate,x);
double fx=0;
if(index<0){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return fx;

Time : 18/01/13 03:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(1<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return fx;

Time : 18/01/13 03:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(0<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return fx;

Time : 18/01/13 03:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
x=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return fx;

Time : 18/01/13 03:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return 2/(x-x);

Time : 18/01/13 04:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return (x-x);

Time : 18/01/13 04:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return x-x;

Time : 18/01/13 04:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return 1/(x*x);

Time : 18/01/13 04:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return (x*x);

Time : 18/01/13 04:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return x*x;

Time : 18/01/13 04:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 04:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==1.0){
return 0.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 04:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return Math.PI/2.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 04:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==1.0){
return 0.0;
}
if(x==0){
return Math.PI/2.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 04:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
return fx;

Time : 18/01/13 04:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x>=x){
return 1;
}
return fx;

Time : 18/01/13 04:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
return (x-x);

Time : 18/01/13 04:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x>=x){
return 1;
}
return (x-x);

Time : 18/01/13 04:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
return x-x;

Time : 18/01/13 04:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x>=x){
return 1;
}
return x-x;

Time : 18/01/13 04:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
if(x>=x){
return 1;
}
return fx;

Time : 18/01/13 04:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
if(x>=x){
return 1;
}
return (x-x);

Time : 18/01/13 04:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x<=x){
return 0;
}
if(x>=x){
return 1;
}
return x-x;

Time : 18/01/13 04:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI/2.0;

Time : 18/01/13 04:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x==1.0){
return 0.0;
}
return Math.PI/2.0;

Time : 18/01/13 04:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
if(x==1.0){
return 0.0;
}
return Math.PI;

Time : 18/01/13 04:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return 1/x;

Time : 18/01/13 04:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==-1.0){
return -Math.PI/2.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI/2.0;

Time : 18/01/13 05:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0.0){
return x;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI/2.0;

Time : 18/01/13 05:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==-1.0){
return -Math.PI/2.0;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 05:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0.0){
return x;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 05:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==-1.0){
return -Math.PI/2.0;
}
if(x==0.0){
return x;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI/2.0;

Time : 18/01/13 05:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==-1.0){
return -Math.PI/2.0;
}
if(x==0.0){
return x;
}
int index=Arrays.binarySearch(abscissa,x);
double fx=0;
if(index<-1){
fx=ordinate[-index-2];
}else if(index>=0){
fx=ordinate[index];
}else {
fx=ordinate[0];
}
return Math.PI;

Time : 18/01/13 05:12
----------------------------------------
Timeout time : 18/01/13 05:14
