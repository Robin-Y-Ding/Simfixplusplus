=================================================
Project : time_1	start : 18/01/14 06:38
Current failed test : org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray_purify_3 | 18/01/14 06:40
Sun Jan 14 06:42:30 AEDT 2018 org.joda.time.field.UnsupportedDurationField,227
Sun Jan 14 06:43:34 AEDT 2018 org.joda.time.field.UnsupportedDurationField,228
Sun Jan 14 06:43:34 AEDT 2018 org.joda.time.chrono.GJEraDateTimeField,136
Sun Jan 14 06:43:36 AEDT 2018 org.joda.time.chrono.GJEraDateTimeField,140
Sun Jan 14 06:43:38 AEDT 2018 org.joda.time.DurationFieldType,286

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.days();


Time : 18/01/14 06:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.hours();


Time : 18/01/14 06:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.seconds();


Time : 18/01/14 06:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.days();

case CENTURIES :


Time : 18/01/14 06:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.hours();

case CENTURIES :


Time : 18/01/14 06:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.seconds();

case CENTURIES :


Time : 18/01/14 06:54
----------------------------------------
Sun Jan 14 06:54:46 AEDT 2018 org.joda.time.DateTimeFieldType,484
Sun Jan 14 07:04:49 AEDT 2018 Sun Jan 14 07:04:49 AEDT 2018 : org.joda.time.Partial,176=>Find no block
Sun Jan 14 07:04:49 AEDT 2018 org.joda.time.Partial,175
Sun Jan 14 07:04:51 AEDT 2018 org.joda.time.Partial,221
Sun Jan 14 07:41:19 AEDT 2018 org.joda.time.Partial,217
Sun Jan 14 07:41:22 AEDT 2018 org.joda.time.Partial,218
Sun Jan 14 07:50:13 AEDT 2018 org.joda.time.Partial,250
Sun Jan 14 07:55:41 AEDT 2018 Sun Jan 14 07:55:41 AEDT 2018 : org.joda.time.Partial,251=>Find no block
Sun Jan 14 07:55:41 AEDT 2018 org.joda.time.Partial,248
Sun Jan 14 07:55:42 AEDT 2018 org.joda.time.Partial,249
Sun Jan 14 07:55:42 AEDT 2018 org.joda.time.Partial,212
Sun Jan 14 08:24:42 AEDT 2018 org.joda.time.Partial,213
Sun Jan 14 08:33:23 AEDT 2018 org.joda.time.Partial,214
Sun Jan 14 08:33:26 AEDT 2018 org.joda.time.Partial,215
Sun Jan 14 08:33:26 AEDT 2018 org.joda.time.Partial,216
Sun Jan 14 08:33:27 AEDT 2018 org.joda.time.Partial,245
Sun Jan 14 08:37:01 AEDT 2018 org.joda.time.Partial,335
Sun Jan 14 08:43:13 AEDT 2018 org.joda.time.Partial,207
Sun Jan 14 08:43:13 AEDT 2018 org.joda.time.Partial,208
Sun Jan 14 08:43:14 AEDT 2018 org.joda.time.Partial,202
Sun Jan 14 08:47:11 AEDT 2018 org.joda.time.Partial,199
Sun Jan 14 08:57:04 AEDT 2018 org.joda.time.Partial,196
Sun Jan 14 08:57:18 AEDT 2018 org.joda.time.Partial,323
Sun Jan 14 08:57:20 AEDT 2018 org.joda.time.Partial,190
Sun Jan 14 09:01:44 AEDT 2018 org.joda.time.Partial,191
Sun Jan 14 09:01:44 AEDT 2018 org.joda.time.Partial,192
Sun Jan 14 09:05:45 AEDT 2018 org.joda.time.Partial,193
Sun Jan 14 09:05:59 AEDT 2018 org.joda.time.Partial,311
Sun Jan 14 09:06:22 AEDT 2018 org.joda.time.DateTimeFieldType,363
Sun Jan 14 09:06:24 AEDT 2018 org.joda.time.DurationFieldType,292
Timeout time : 18/01/14 09:12
Current failed test : org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray_purify_4 | 18/01/14 09:12
Sun Jan 14 09:17:40 AEDT 2018 org.joda.time.chrono.GJEraDateTimeField,136
Sun Jan 14 09:17:44 AEDT 2018 org.joda.time.chrono.GJEraDateTimeField,140
Sun Jan 14 09:17:48 AEDT 2018 org.joda.time.DurationFieldType,286

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.weekyears();


Time : 18/01/14 09:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.months();


Time : 18/01/14 09:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.days();


Time : 18/01/14 09:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.weekyears();

case CENTURIES :


Time : 18/01/14 09:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.months();

case CENTURIES :


Time : 18/01/14 09:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
case ERAS :
return chronology.days();

case CENTURIES :


Time : 18/01/14 09:31
----------------------------------------
Sun Jan 14 09:34:27 AEDT 2018 org.joda.time.chrono.BasicDayOfMonthDateTimeField,93
Sun Jan 14 10:50:56 AEDT 2018 org.joda.time.DateTimeFieldType,484
Sun Jan 14 11:04:06 AEDT 2018 Sun Jan 14 11:04:06 AEDT 2018 : org.joda.time.Partial,176=>Find no block
Sun Jan 14 11:04:07 AEDT 2018 org.joda.time.Partial,175
Sun Jan 14 11:04:10 AEDT 2018 org.joda.time.Partial,221

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(compare!=0){
if(types[i-1].getRangeDurationType()==null){
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}else {
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
DurationField lastRangeField=types[i-1].getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(lastRangeField.compareTo(loopRangeField)<0){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
if(lastRangeField.compareTo(loopRangeField)==0){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}
}

Time : 18/01/14 11:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(i!=0){
if(types[i-1].getRangeDurationType()==null){
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}else {
if(loopType.getRangeDurationType()==null){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
DurationField lastRangeField=types[i-1].getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(lastRangeField.compareTo(loopRangeField)<0){
throw new IllegalArgumentException("Types array must be in order largest-smallest: "+types[i-1].getName());
}
if(lastRangeField.compareTo(loopRangeField)==0){
throw new IllegalArgumentException("Types array must not contain duplicate: "+types[i-1].getName());
}
}
}

Time : 18/01/14 11:48
----------------------------------------
Timeout time : 18/01/14 11:48
