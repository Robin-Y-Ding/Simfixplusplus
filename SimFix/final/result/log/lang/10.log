=================================================
Project : lang_10	start : 18/01/13 23:40
Current failed test : org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831 | 18/01/13 23:41
Sat Jan 13 23:41:53 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,180
Sat Jan 13 23:41:57 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,685

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<=field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/13 23:51
----------------------------------------
Sat Jan 13 23:59:59 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,686
Sat Jan 13 23:59:59 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,687
Sun Jan 14 00:00:00 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,696
Sun Jan 14 00:10:25 AEDT 2018 Sun Jan 14 00:10:25 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,697=>Find no block
Sun Jan 14 00:10:25 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,395
Sun Jan 14 00:10:40 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,396
Sun Jan 14 00:10:42 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,555
Sun Jan 14 00:10:46 AEDT 2018 Sun Jan 14 00:10:46 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,850=>Find no block
Sun Jan 14 00:10:47 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,382
Sun Jan 14 00:11:47 AEDT 2018 Sun Jan 14 00:11:47 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,383=>Find no block
Sun Jan 14 00:11:48 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,406
Sun Jan 14 00:12:11 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,407
Sun Jan 14 00:12:13 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,434
Sun Jan 14 00:12:15 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,435
Sun Jan 14 00:12:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,436
Sun Jan 14 00:12:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,437
Sun Jan 14 00:12:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,446

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
++count;
return -1;
}

Time : 18/01/14 00:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
++count;
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

Time : 18/01/14 00:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
++count;
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/14 00:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
return -1;
}

Time : 18/01/14 00:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/14 00:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

Time : 18/01/14 00:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
return 0;
}

Time : 18/01/14 00:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("The field must not be null");
}

Time : 18/01/14 00:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException(value+" is not a supported timezone name");
}

Time : 18/01/14 00:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("target object must not be null");
}

Time : 18/01/14 00:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("Requested random string length "+count);
}

Time : 18/01/14 00:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("Arguments cannot both be null");
}

Time : 18/01/14 00:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IndexOutOfBoundsException();
}

Time : 18/01/14 00:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("Array is empty");
}

Time : 18/01/14 00:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("Array cannot be empty.");
}

Time : 18/01/14 00:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(String value : values){
if(value.length()>0){
++count;
}
throw new IllegalArgumentException("The chars array must not be empty");
}

Time : 18/01/14 00:27
----------------------------------------
Sun Jan 14 00:31:59 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,447
Sun Jan 14 00:31:59 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,448
Sun Jan 14 00:31:59 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,449
Sun Jan 14 00:32:00 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,450
Sun Jan 14 00:32:00 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,454
Sun Jan 14 00:32:00 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
return -1;
}

Time : 18/01/14 00:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
throw new StringIndexOutOfBoundsException("length must be valid");
}

Time : 18/01/14 00:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}

Time : 18/01/14 00:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>=0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}

Time : 18/01/14 00:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/14 00:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
offset--;
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/14 00:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}

Time : 18/01/14 00:40
----------------------------------------
Sun Jan 14 00:41:25 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,466
Sun Jan 14 00:41:25 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,467
Sun Jan 14 00:41:26 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,468
Sun Jan 14 00:41:26 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,469
Sun Jan 14 00:41:27 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,473

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return offset;

Time : 18/01/14 00:42
----------------------------------------
Sun Jan 14 00:43:59 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,672

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new NullPointerException("Cannot get the toString of a null identity");
}

Time : 18/01/14 00:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
return false;
}

Time : 18/01/14 00:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 18/01/14 00:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 18/01/14 00:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 18/01/14 00:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 18/01/14 00:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("The date must not be null");
}

Time : 18/01/14 00:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException();
}

Time : 18/01/14 00:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new NullPointerException("Cannot get the toString of a null identity");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
return false;
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("Invalid pattern");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
return false;
}
regex.setCharAt(regex.length()-1,')');
return false;

Time : 18/01/14 00:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("Strings must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
return true;
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
return true;
}
regex.setCharAt(regex.length()-1,')');
return false;

Time : 18/01/14 00:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<0){
throw new IllegalArgumentException("Threshold must not be negative");
}
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("Strings must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 00:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("The Writer must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new StringIndexOutOfBoundsException("length must be valid");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new StringIndexOutOfBoundsException("startIndex must be valid");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("The date must not be null");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new StringIndexOutOfBoundsException(field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalStateException("CsvEscaper should never reach the [1] index");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException();
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IndexOutOfBoundsException("Index: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalStateException("Aborting to protect against StackOverflowError - "+"output of one loop is the input of another");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("Array is empty");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("Array cannot be empty.");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new StringIndexOutOfBoundsException("Invalid startIndex: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new StringIndexOutOfBoundsException("Invalid offset: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new StringIndexOutOfBoundsException("Invalid length: "+field);
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IllegalArgumentException("The chars array must not be empty");
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
throw new IndexOutOfBoundsException();
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/14 01:12
----------------------------------------
Sun Jan 14 01:13:14 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,673
Sun Jan 14 01:13:15 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,674
Sun Jan 14 01:13:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,676
Sun Jan 14 01:13:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,677
Sun Jan 14 01:13:18 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,379
Sun Jan 14 01:13:20 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,380
Sun Jan 14 01:13:20 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,381
Sun Jan 14 01:13:23 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,411
Sun Jan 14 01:13:30 AEDT 2018 Sun Jan 14 01:13:30 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,357=>Find no block
Sun Jan 14 01:13:31 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,358
Sun Jan 14 01:13:55 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,359
Sun Jan 14 01:13:56 AEDT 2018 Sun Jan 14 01:13:56 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,360=>Find no block
Sun Jan 14 01:13:57 AEDT 2018 Sun Jan 14 01:13:57 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,369=>Find no block
Sun Jan 14 01:13:58 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,250

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}

Time : 18/01/14 01:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Date date=parse(source,new ParsePosition(0));
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}
return date;

Time : 18/01/14 01:17
----------------------------------------
Sun Jan 14 01:18:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,251
Sun Jan 14 01:18:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,260
Sun Jan 14 01:18:18 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,762
Sun Jan 14 01:18:19 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,213
Sun Jan 14 01:20:00 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,215
Sun Jan 14 01:23:53 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,741
Sun Jan 14 01:24:14 AEDT 2018 Sun Jan 14 01:24:14 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,742=>Find no block
Sun Jan 14 01:24:14 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField==null){
return null;
}
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(!matcher.lookingAt()){
return null;
}

Time : 18/01/14 01:25
----------------------------------------
Sun Jan 14 01:26:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,277
Sun Jan 14 01:26:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,278
Sun Jan 14 01:26:31 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,282

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
pos.setIndex(offset+matcher.end());
if(!matcher.lookingAt()){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/14 01:27
----------------------------------------
Sun Jan 14 01:28:31 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,283

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/14 01:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/14 01:31
----------------------------------------
Sun Jan 14 01:33:34 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,285

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/14 01:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/14 01:37
----------------------------------------
Sun Jan 14 01:40:22 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,286
Sun Jan 14 01:40:22 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,287
Sun Jan 14 01:40:23 AEDT 2018 Sun Jan 14 01:40:23 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,288=>Find no block
Sun Jan 14 01:40:24 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,289

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/14 01:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/14 01:44
----------------------------------------
Sun Jan 14 01:49:20 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,290
Sun Jan 14 01:49:20 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,308
Sun Jan 14 01:49:44 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,309
Sun Jan 14 01:49:45 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,310
Sun Jan 14 01:49:46 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,235
Sun Jan 14 01:50:15 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,236
Sun Jan 14 01:50:18 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,565
Sun Jan 14 01:54:04 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentStrategy.addRegex(this,regex)){
collector.add(currentStrategy);
throw new IllegalArgumentException("Invalid pattern");
}

Time : 18/01/14 01:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
currentFormatField=patternMatcher.group();
if(currentStrategy.addRegex(this,regex)){
collector.add(currentStrategy);
}

Time : 18/01/14 01:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
currentFormatField=patternMatcher.group();
if(currentStrategy.addRegex(this,regex)){
collector.add(currentStrategy);
throw new IllegalArgumentException("Invalid pattern");
}

Time : 18/01/14 01:55
----------------------------------------
Sun Jan 14 01:56:47 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,314

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
wasWhite=!Character.isDigit(c);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 01:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 01:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}
wasWhite=false;

Time : 18/01/14 01:59
----------------------------------------
Sun Jan 14 02:00:28 AEDT 2018 Sun Jan 14 02:00:28 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,315=>Find no block
Sun Jan 14 02:00:28 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,340
Sun Jan 14 02:07:37 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,621
Sun Jan 14 02:10:58 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,622

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c!='\''){
c=formatField.charAt(1);
}

Time : 18/01/14 02:11
----------------------------------------
Sun Jan 14 02:12:33 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,625
Sun Jan 14 02:12:33 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,304
Sun Jan 14 02:12:37 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,305
Sun Jan 14 02:24:29 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,306

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isLetter(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 02:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isLetterOrDigit(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 02:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isDigit(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 02:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isHighSurrogate(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 02:27
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.6797332034566244 : [/home/hz985/jiajun/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>0,0]
char ch=cs.charAt(i);
for(int j=0;j<searchLength;j++){
if(searchChars[j]==ch){
if(Character.isHighSurrogate(ch)){
if(j==searchLast){
return true;
}
if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){
return true;
}
}else {
return true;
}
}
}

Time : 18/01/14 02:28
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/hz985/jiajun/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>306,313]
char c=value.charAt(i);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 02:28
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/hz985/jiajun/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>306,313]
char c=value.charAt(i);
if(Character.isHighSurrogate(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/14 02:28
----------------------------------------
Success time : 18/01/14 02:28
