=================================================
Project : math_22	start : 18/01/14 06:56
Current failed test : org.apache.commons.math3.distribution.FDistributionTest::testIsSupportLowerBoundInclusive | 18/01/14 06:57
Sun Jan 14 06:58:33 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,275
Sun Jan 14 06:58:40 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,184
Sun Jan 14 06:58:46 AEDT 2018 org.apache.commons.math3.util.FastMath,1107

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_1_4;
}

Time : 18/01/14 06:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_3_4;
}

Time : 18/01/14 07:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return F_1_2;
}

Time : 18/01/14 07:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
if(E<0||1/E<0){
return -Math.PI*F_1_2;
}
return F_1_2;
}

Time : 18/01/14 07:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(x==0){
return x;
}

Time : 18/01/14 07:09
----------------------------------------
Sun Jan 14 07:13:02 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,129

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.floor(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.sqrt(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.exp(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.sqrt(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(numeratorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.sqrt(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.exp(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(denominatorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log1p(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log1p(denominatorDegreesOfFreedom);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.exp(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(logm+x*logn);

Time : 18/01/14 07:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(-0.5*logn);

Time : 18/01/14 07:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(numeratorDegreesOfFreedom)||x==0.0){
return x;
}
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Double.isInfinite(numeratorDegreesOfFreedom)||x==0.0){
return x;
}
 final double nhalf=x/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 07:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.abs(mhalf);

Time : 18/01/14 07:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 18/01/14 08:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 18/01/14 08:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 18/01/14 08:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(mhalf,nhalf);

Time : 18/01/14 08:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.sqrt(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 08:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/4;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 08:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/4;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.sqrt(x);
 final double logn=FastMath.sqrt(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 08:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.signum(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 08:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.abs(x);
 final double logn=FastMath.abs(numeratorDegreesOfFreedom);
 final double logm=FastMath.abs(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.max(FastMath.max(mhalf,nhalf),logn);

Time : 18/01/14 08:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x=numeratorDegreesOfFreedom;
 final double nhalf=numeratorDegreesOfFreedom/2;
 final double mhalf=denominatorDegreesOfFreedom/2;
 final double logx=FastMath.log(x);
 final double logn=FastMath.log(numeratorDegreesOfFreedom);
 final double logm=FastMath.log(denominatorDegreesOfFreedom);
 final double lognxm=FastMath.log(numeratorDegreesOfFreedom*x+denominatorDegreesOfFreedom);
return FastMath.exp(nhalf*logn+nhalf*logx-logx+mhalf*logm-nhalf*lognxm-mhalf*lognxm-Beta.logBeta(nhalf,mhalf));

Time : 18/01/14 08:35
----------------------------------------
Sun Jan 14 08:40:09 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,130
Sun Jan 14 08:40:11 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,131
Sun Jan 14 08:40:13 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,132
Sun Jan 14 08:40:15 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,133
Sun Jan 14 08:40:17 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,134
Sun Jan 14 08:40:20 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,136
Sun Jan 14 08:40:21 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,109
Sun Jan 14 08:52:29 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,112
Sun Jan 14 09:05:25 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,174
Sun Jan 14 09:08:15 AEDT 2018 org.apache.commons.math3.special.Beta,170
Sun Jan 14 09:09:12 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,258
Sun Jan 14 09:09:18 AEDT 2018 org.apache.commons.math3.util.FastMath,864
Sun Jan 14 09:14:13 AEDT 2018 org.apache.commons.math3.util.FastMath,866
Sun Jan 14 09:14:15 AEDT 2018 org.apache.commons.math3.util.FastMath,874
Sun Jan 14 09:16:10 AEDT 2018 org.apache.commons.math3.util.FastMath,875
Sun Jan 14 09:16:11 AEDT 2018 org.apache.commons.math3.random.Well19937c,57
Sun Jan 14 09:16:16 AEDT 2018 Sun Jan 14 09:16:16 AEDT 2018 : org.apache.commons.math3.random.Well19937c,58=>Find no block
Sun Jan 14 09:16:18 AEDT 2018 org.apache.commons.math3.random.AbstractWell,72
Sun Jan 14 09:16:24 AEDT 2018 Sun Jan 14 09:16:24 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,73=>Find no block
Sun Jan 14 09:16:25 AEDT 2018 org.apache.commons.math3.random.AbstractWell,155
Sun Jan 14 09:16:30 AEDT 2018 org.apache.commons.math3.random.AbstractWell,156
Sun Jan 14 09:16:32 AEDT 2018 org.apache.commons.math3.random.AbstractWell,179
Sun Jan 14 09:16:53 AEDT 2018 Sun Jan 14 09:16:53 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,180=>Find no block
Sun Jan 14 09:16:55 AEDT 2018 Sun Jan 14 09:16:55 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,50=>Find no block
Sun Jan 14 09:16:57 AEDT 2018 Sun Jan 14 09:16:57 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,55=>Find no block
Sun Jan 14 09:16:58 AEDT 2018 Sun Jan 14 09:16:58 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,70=>Find no block
Sun Jan 14 09:17:00 AEDT 2018 org.apache.commons.math3.distribution.AbstractRealDistribution,71
Sun Jan 14 09:18:54 AEDT 2018 Sun Jan 14 09:18:54 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,72=>Find no block
Sun Jan 14 09:18:56 AEDT 2018 Sun Jan 14 09:18:56 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,94=>Find no block
Sun Jan 14 09:18:58 AEDT 2018 org.apache.commons.math3.random.AbstractWell,99
Timeout time : 18/01/14 09:28
Current failed test : org.apache.commons.math3.distribution.UniformRealDistributionTest::testIsSupportUpperBoundInclusive | 18/01/14 09:28
Sun Jan 14 09:29:32 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,275
Sun Jan 14 09:29:36 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,184
Sun Jan 14 09:29:41 AEDT 2018 org.apache.commons.math3.util.FastMath,1107
Sun Jan 14 09:34:27 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,129
Sun Jan 14 09:49:17 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,130
Sun Jan 14 09:49:18 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,131
Sun Jan 14 09:49:19 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,132
Sun Jan 14 09:49:20 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,133
Sun Jan 14 09:49:21 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,134
Sun Jan 14 09:49:23 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,136
Sun Jan 14 09:49:24 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,109
Sun Jan 14 10:01:32 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,112
Sun Jan 14 10:14:32 AEDT 2018 org.apache.commons.math3.distribution.UniformRealDistribution,174
Sun Jan 14 10:17:21 AEDT 2018 org.apache.commons.math3.special.Beta,170
Sun Jan 14 10:18:20 AEDT 2018 org.apache.commons.math3.distribution.FDistribution,258
Sun Jan 14 10:18:26 AEDT 2018 org.apache.commons.math3.util.FastMath,864
Sun Jan 14 10:23:16 AEDT 2018 org.apache.commons.math3.util.FastMath,866
Sun Jan 14 10:23:18 AEDT 2018 org.apache.commons.math3.util.FastMath,874
Sun Jan 14 10:25:15 AEDT 2018 org.apache.commons.math3.util.FastMath,875
Sun Jan 14 10:25:17 AEDT 2018 org.apache.commons.math3.random.Well19937c,57
Sun Jan 14 10:25:21 AEDT 2018 Sun Jan 14 10:25:21 AEDT 2018 : org.apache.commons.math3.random.Well19937c,58=>Find no block
Sun Jan 14 10:25:22 AEDT 2018 org.apache.commons.math3.random.AbstractWell,72
Sun Jan 14 10:25:28 AEDT 2018 Sun Jan 14 10:25:28 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,73=>Find no block
Sun Jan 14 10:25:29 AEDT 2018 org.apache.commons.math3.random.AbstractWell,155
Sun Jan 14 10:25:33 AEDT 2018 org.apache.commons.math3.random.AbstractWell,156
Sun Jan 14 10:25:35 AEDT 2018 org.apache.commons.math3.random.AbstractWell,179
Sun Jan 14 10:25:57 AEDT 2018 Sun Jan 14 10:25:57 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,180=>Find no block
Sun Jan 14 10:25:58 AEDT 2018 Sun Jan 14 10:25:58 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,50=>Find no block
Sun Jan 14 10:26:01 AEDT 2018 Sun Jan 14 10:26:01 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,55=>Find no block
Sun Jan 14 10:26:03 AEDT 2018 Sun Jan 14 10:26:03 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,70=>Find no block
Sun Jan 14 10:26:04 AEDT 2018 org.apache.commons.math3.distribution.AbstractRealDistribution,71
Sun Jan 14 10:27:56 AEDT 2018 Sun Jan 14 10:27:56 AEDT 2018 : org.apache.commons.math3.distribution.AbstractRealDistribution,72=>Find no block
Sun Jan 14 10:27:57 AEDT 2018 Sun Jan 14 10:27:57 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,94=>Find no block
Sun Jan 14 10:27:58 AEDT 2018 org.apache.commons.math3.random.AbstractWell,99
Sun Jan 14 10:37:38 AEDT 2018 org.apache.commons.math3.random.AbstractWell,100
Sun Jan 14 10:37:39 AEDT 2018 org.apache.commons.math3.random.AbstractWell,101
Sun Jan 14 10:43:01 AEDT 2018 org.apache.commons.math3.random.AbstractWell,102
Sun Jan 14 10:45:30 AEDT 2018 org.apache.commons.math3.random.AbstractWell,106
Sun Jan 14 10:48:22 AEDT 2018 org.apache.commons.math3.random.AbstractWell,107
Sun Jan 14 10:49:03 AEDT 2018 org.apache.commons.math3.random.AbstractWell,108
Sun Jan 14 10:49:45 AEDT 2018 org.apache.commons.math3.random.AbstractWell,109
Sun Jan 14 10:50:29 AEDT 2018 org.apache.commons.math3.random.AbstractWell,110
Sun Jan 14 10:57:29 AEDT 2018 org.apache.commons.math3.random.AbstractWell,111
Sun Jan 14 11:07:35 AEDT 2018 org.apache.commons.math3.random.AbstractWell,112
Sun Jan 14 11:07:36 AEDT 2018 org.apache.commons.math3.random.AbstractWell,113
Sun Jan 14 11:07:37 AEDT 2018 org.apache.commons.math3.random.AbstractWell,114
Sun Jan 14 11:07:38 AEDT 2018 org.apache.commons.math3.random.AbstractWell,115
Sun Jan 14 11:07:39 AEDT 2018 org.apache.commons.math3.random.AbstractWell,116
Sun Jan 14 11:07:40 AEDT 2018 org.apache.commons.math3.random.AbstractWell,120
Sun Jan 14 11:16:19 AEDT 2018 Sun Jan 14 11:16:19 AEDT 2018 : org.apache.commons.math3.random.AbstractWell,122=>Find no block
Sun Jan 14 11:16:21 AEDT 2018 org.apache.commons.math3.random.AbstractWell,154
Sun Jan 14 11:16:23 AEDT 2018 org.apache.commons.math3.random.AbstractWell,159
Timeout time : 18/01/14 11:59
