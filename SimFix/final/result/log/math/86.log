=================================================
Project : math_86	start : 18/01/14 10:18
Current failed test : org.apache.commons.math.linear.CholeskyDecompositionImplTest::testMath274 | 18/01/14 10:19
Sun Jan 14 10:20:44 AEDT 2018 Sun Jan 14 10:20:44 AEDT 2018 : org.apache.commons.math.linear.CholeskyDecompositionImpl,76=>Find no block
Sun Jan 14 10:20:49 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,132

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int q=order-1;q>i;--q){
ltI[q]*=inverse;
 final double[] ltQ=lTData[q];
for(int p=q;p<order;++p){
ltQ[p]-=ltI[q]*ltI[p];
throw new NotPositiveDefiniteMatrixException();
}
}

Time : 18/01/14 10:24
----------------------------------------
Sun Jan 14 11:02:48 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,134
Sun Jan 14 11:02:53 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,138
Sun Jan 14 11:02:57 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,139
Sun Jan 14 11:03:03 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,141
Sun Jan 14 11:03:07 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,142
Sun Jan 14 11:03:12 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,143
Sun Jan 14 11:03:17 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,144
Sun Jan 14 11:03:21 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,145
Sun Jan 14 11:03:24 AEDT 2018 Sun Jan 14 11:03:24 AEDT 2018 : org.apache.commons.math.linear.CholeskyDecompositionImpl,151=>Find no block
Sun Jan 14 11:03:29 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,104
Sun Jan 14 11:05:20 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,105
Sun Jan 14 11:07:47 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,106
Sun Jan 14 11:08:49 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,107
Sun Jan 14 11:08:54 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,110

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD<=absolutePositivityThreshold){
throw new NotPositiveDefiniteMatrixException();
}

Time : 18/01/14 11:14
----------------------------------------
Sun Jan 14 11:49:30 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,112

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double[] lI=lTData[i];
if(DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD<=absolutePositivityThreshold){
throw new NotPositiveDefiniteMatrixException();
}

Time : 18/01/14 11:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double[] lI=lTData[i];
if(lTData[i][i]<=lI[i]){
throw new NotPositiveDefiniteMatrixException();
}

Time : 18/01/14 12:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double[] lI=lTData[i];
if(DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD<lI[i]){
throw new NotPositiveDefiniteMatrixException();
}

Time : 18/01/14 12:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
 final double[] lI=lTData[i];
if(DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD<=lI[i]){
throw new NotPositiveDefiniteMatrixException();
}

Time : 18/01/14 12:02
----------------------------------------
Sun Jan 14 12:04:54 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,114
Sun Jan 14 12:04:57 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,118
Sun Jan 14 12:05:01 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,119
Sun Jan 14 12:05:05 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,120
Sun Jan 14 12:05:09 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,121
Sun Jan 14 12:05:13 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,122
Sun Jan 14 12:05:17 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,124
Sun Jan 14 12:05:20 AEDT 2018 org.apache.commons.math.linear.CholeskyDecompositionImpl,127
Sun Jan 14 12:05:23 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,618

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int p=pStart;p<pEnd;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,dataPos);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}

Time : 18/01/14 12:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int p=pStart;p<data.length;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,dataPos);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}

Time : 18/01/14 12:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int p=pStart;p<iBlock;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,lastColumns);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}

Time : 18/01/14 12:35
----------------------------------------
Sun Jan 14 12:38:10 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,619
Sun Jan 14 12:38:13 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,621

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int iBlock=0;iBlock<blockRows;++iBlock){
 final int pStart=iBlock*BLOCK_SIZE;
 final int pEnd=Math.min(pStart+BLOCK_SIZE,rows);
int regularPos=0;
int lastPos=0;
for(int p=pStart;p<pEnd;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,pStart);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}
}

Time : 18/01/14 12:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int iBlock=0;iBlock<blockColumns;++iBlock){
 final int pStart=iBlock*BLOCK_SIZE;
 final int pEnd=Math.min(pStart+BLOCK_SIZE,rows);
int regularPos=0;
int lastPos=0;
for(int p=pStart;p<pEnd;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,pStart);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}
}

Time : 18/01/14 12:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int iBlock=0;iBlock<blockRows;++iBlock){
 final int pStart=iBlock*BLOCK_SIZE;
 final int pEnd=Math.min(pStart+BLOCK_SIZE,rows);
int regularPos=BLOCK_SIZE;
int lastPos=0;
for(int p=pStart;p<pEnd;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,pStart);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}
}

Time : 18/01/14 12:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int iBlock=0;iBlock<blockRows;++iBlock){
 final int pStart=iBlock*BLOCK_SIZE;
 final int pEnd=Math.min(pStart+BLOCK_SIZE,rows);
int regularPos=0;
int lastPos=pEnd;
for(int p=pStart;p<pEnd;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,pStart);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}
}

Time : 18/01/14 12:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int iBlock=0;iBlock<blockRows;++iBlock){
 final int pStart=iBlock*BLOCK_SIZE;
 final int pEnd=Math.min(pStart+BLOCK_SIZE,rows);
int regularPos=0;
int lastPos=regularPos;
for(int p=pStart;p<pEnd;++p){
 final double[] dataP=data[p];
int blockIndex=iBlock*blockColumns;
int dataPos=0;
for(int jBlock=0;jBlock<blockColumns-1;++jBlock){
System.arraycopy(blocks[blockIndex++],regularPos,dataP,dataPos,BLOCK_SIZE);
dataPos+=BLOCK_SIZE;
}
System.arraycopy(blocks[blockIndex],lastPos,dataP,dataPos,pStart);
regularPos+=BLOCK_SIZE;
lastPos+=lastColumns;
}
}

Time : 18/01/14 12:50
----------------------------------------
Timeout time : 18/01/14 12:51
Current failed test : org.apache.commons.math.linear.CholeskyDecompositionImplTest::testNotPositiveDefinite | 18/01/14 12:51
Sun Jan 14 12:52:19 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,991
Sun Jan 14 12:55:05 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,992
Sun Jan 14 12:55:10 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,993
Sun Jan 14 12:56:55 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,994
Sun Jan 14 12:57:16 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,995
Sun Jan 14 13:00:47 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,996
Sun Jan 14 13:00:49 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,998
Sun Jan 14 13:30:16 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,999
Sun Jan 14 13:30:20 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1000
Sun Jan 14 13:30:22 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1002
Sun Jan 14 13:30:26 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1003
Sun Jan 14 13:30:28 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1004
Sun Jan 14 13:30:32 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1005
Sun Jan 14 13:30:35 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1007
Sun Jan 14 13:30:39 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1009
Sun Jan 14 13:30:43 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1012
Sun Jan 14 13:51:28 AEDT 2018 org.apache.commons.math.linear.AbstractRealMatrix,1013
Sun Jan 14 14:17:20 AEDT 2018 org.apache.commons.math.linear.MatrixUtils,627
Sun Jan 14 14:19:15 AEDT 2018 Sun Jan 14 14:19:15 AEDT 2018 : org.apache.commons.math.linear.MatrixUtils,633=>Find no block
Sun Jan 14 14:19:15 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,492
Sun Jan 14 14:19:18 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,555
Sun Jan 14 14:21:43 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,557
Sun Jan 14 14:21:44 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,560
Sun Jan 14 14:21:45 AEDT 2018 org.apache.commons.math.linear.DenseRealMatrix,561
Timeout time : 18/01/14 15:22
