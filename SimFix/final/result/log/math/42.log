=================================================
Project : math_42	start : 18/01/14 02:16
Current failed test : org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath713NegativeVariable | 18/01/14 02:17
Sun Jan 14 02:19:22 AEDT 2018 org.apache.commons.math.optimization.RealPointValuePair,68
Sun Jan 14 02:20:45 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,347

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}

Time : 18/01/14 02:21
----------------------------------------
Sun Jan 14 02:23:52 AEDT 2018 Sun Jan 14 02:23:52 AEDT 2018 : org.apache.commons.math.optimization.linear.SimplexSolver,181=>Find no block
Sun Jan 14 02:23:57 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,332
Sun Jan 14 02:25:47 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,333

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 18/01/14 02:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
numArtificialVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 18/01/14 02:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i+1);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 18/01/14 02:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
List<Integer> columnsToDrop=new ArrayList<Integer>();
columnsToDrop.add(0);
numArtificialVariables++;
for(int i=getNumObjectiveFunctions();i<getArtificialVariableOffset();i++){
 final double entry=tableau.getEntry(0,i);
if(Precision.compareTo(entry,0.0,maxUlps)>0){
columnsToDrop.add(i);
}
}

Time : 18/01/14 02:42
----------------------------------------
Sun Jan 14 02:45:40 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,336
Sun Jan 14 02:45:46 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,337
Sun Jan 14 02:45:51 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,338
Sun Jan 14 02:45:56 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,344

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 18/01/14 02:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}

Time : 18/01/14 02:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<NEGATIVE_VAR_COLUMN_LABEL.length();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 18/01/14 02:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 18/01/14 02:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
numArtificialVariables++;
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}

Time : 18/01/14 02:57
----------------------------------------
Sun Jan 14 03:00:04 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,345
Sun Jan 14 03:00:10 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,346
Sun Jan 14 03:00:15 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
i++;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 18/01/14 03:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<getArtificialVariableOffset();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 18/01/14 03:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int j=0;j<NEGATIVE_VAR_COLUMN_LABEL.length();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}

Time : 18/01/14 03:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
if(i>=numArtificialVariables-1){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
if(i>=numArtificialVariables){
break;
}
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=1;i<getHeight();i++){
i++;
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getNumArtificialVariables();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=numArtificialVariables;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)==null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<getNumArtificialVariables();i++){
int col=i+getArtificialVariableOffset();
if(getBasicRow(col)!=null){
columnsToDrop.add(col);
}
}
double[][] matrix=new double[getHeight()-1][getWidth()-columnsToDrop.size()];
for(int i=1;i<getHeight();i++){
int col=0;
for(int j=0;j<getWidth();j++){
if(!columnsToDrop.contains(j)){
matrix[i-1][col++]=tableau.getEntry(i,j);
}
}
}

Time : 18/01/14 03:38
----------------------------------------
Sun Jan 14 03:43:21 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,352
Sun Jan 14 03:43:27 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,353
Sun Jan 14 03:43:34 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,354
Sun Jan 14 03:43:40 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,355
Sun Jan 14 03:43:48 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,356
Sun Jan 14 03:43:54 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,361
Sun Jan 14 03:52:42 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,362
Sun Jan 14 03:52:48 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,365
Sun Jan 14 04:04:15 AEDT 2018 org.apache.commons.math.optimization.linear.SimplexTableau,366
Sun Jan 14 04:04:22 AEDT 2018 Sun Jan 14 04:04:22 AEDT 2018 : org.apache.commons.math.optimization.linear.SimplexTableau,367=>Find no block
Sun Jan 14 04:04:28 AEDT 2018 org.apache.commons.math.util.MathUtils,330
Sun Jan 14 04:05:36 AEDT 2018 Sun Jan 14 04:05:36 AEDT 2018 : org.apache.commons.math.util.MathUtils,333=>Find no block
Sun Jan 14 04:05:42 AEDT 2018 Sun Jan 14 04:05:42 AEDT 2018 : org.apache.commons.math.linear.Array2DRowRealMatrix,73=>Find no block
Sun Jan 14 04:05:48 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,74
Sun Jan 14 04:06:03 AEDT 2018 Sun Jan 14 04:06:03 AEDT 2018 : org.apache.commons.math.linear.Array2DRowRealMatrix,75=>Find no block
Sun Jan 14 04:06:08 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,261

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
i++;
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}

Time : 18/01/14 04:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=column){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=nCols;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,column);
}

Time : 18/01/14 04:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 04:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
MatrixUtils.checkRowIndex(this,row);
MatrixUtils.checkColumnIndex(this,column);
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(nCols,subMatrix[i].length);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<column;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=i){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(i!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=column;i<column+row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(nCols==-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:29
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==-1){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==nCols){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(nCols==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length!=-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(subMatrix[i].length==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:41
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=column;i<row;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:43
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(((i>>column)&1)!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<row;++i){
if(((i>>column)&1)==nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}

Time : 18/01/14 05:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(data==null){
if(row>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_ROWS_NOT_INITIALIZED_YET,row);
}
if(column>0){
throw new MathIllegalStateException(LocalizedFormats.FIRST_COLUMNS_NOT_INITIALIZED_YET,column);
}
MathUtils.checkNotNull(subMatrix);
 final int nRows=subMatrix.length;
if(nRows==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
 final int nCols=subMatrix[0].length;
if(nCols==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_COLUMN);
}
data=new double[subMatrix.length][nCols];
for(int i=nCols;i<data.length;++i){
if(subMatrix[i].length!=nCols){
throw new DimensionMismatchException(subMatrix[i].length,nCols);
}
System.arraycopy(subMatrix[i],0,data[i+row],column,nCols);
}
}else {
super.setSubMatrix(subMatrix,row,column);
}

Time : 18/01/14 06:00
----------------------------------------
Sun Jan 14 06:07:17 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,262
Sun Jan 14 06:07:23 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,265
Sun Jan 14 06:07:28 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,268
Sun Jan 14 06:27:53 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,269
Sun Jan 14 06:46:38 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,270
Sun Jan 14 06:46:44 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,274
Sun Jan 14 07:13:41 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,275
Sun Jan 14 07:13:46 AEDT 2018 org.apache.commons.math.linear.Array2DRowRealMatrix,278
Timeout time : 18/01/14 07:19
