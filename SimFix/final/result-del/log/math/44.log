=================================================
Project : math_44	start : 18/01/15 20:52
Current failed test : org.apache.commons.math.ode.events.EventStateTest::testIssue695_purify_1 | 18/01/15 20:53
Mon Jan 15 20:54:54 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,209
Mon Jan 15 20:55:48 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,212
Mon Jan 15 20:55:50 AEDT 2018 Mon Jan 15 20:55:50 AEDT 2018 : org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,214=>Find no block
Mon Jan 15 20:55:51 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,252
Mon Jan 15 20:56:54 AEDT 2018 org.apache.commons.math.util.FastMath,3373
Mon Jan 15 21:20:29 AEDT 2018 org.apache.commons.math.util.FastMath,3375
Mon Jan 15 21:20:30 AEDT 2018 org.apache.commons.math.util.FastMath,3379
Mon Jan 15 21:25:27 AEDT 2018 org.apache.commons.math.ode.events.EventState,334
Mon Jan 15 21:28:32 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,172
Mon Jan 15 21:28:36 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,173
Mon Jan 15 21:28:37 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,340
Mon Jan 15 21:30:25 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,341
Mon Jan 15 21:30:27 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,342
Mon Jan 15 21:30:28 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,343
Mon Jan 15 21:30:29 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,337
Mon Jan 15 21:30:30 AEDT 2018 org.apache.commons.math.ode.events.EventState,329
Mon Jan 15 21:30:35 AEDT 2018 org.apache.commons.math.ode.events.EventState,333
Mon Jan 15 21:30:36 AEDT 2018 org.apache.commons.math.ode.events.EventState,336

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
pendingEvent=false;
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
pendingEvent=false;
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
pendingEvent=false;
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
pendingEvent=false;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
pendingEvent=false;
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
pendingEvent=false;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 21:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
pendingEvent=false;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
pendingEventTime=Double.NaN;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
pendingEvent=false;
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
if(nextAction==EventHandler.Action.RESET_STATE){
handler.resetState(t,y);
}
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!((previousEventTime>convergence)&&(previousEventTime<pendingEventTime))){
return false;
}
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(!(pendingEvent&&(previousEventTime<pendingEventTime))){
return false;
}
return (nextAction==EventHandler.Action.RESET_STATE)||(nextAction==EventHandler.Action.RESET_DERIVATIVES);

Time : 18/01/15 22:13
----------------------------------------
Mon Jan 15 22:40:45 AEDT 2018 org.apache.commons.math.ode.events.EventState,337
Mon Jan 15 22:40:45 AEDT 2018 org.apache.commons.math.ode.events.EventState,339
Mon Jan 15 22:40:46 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,287
Mon Jan 15 22:40:50 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,146
Mon Jan 15 22:43:32 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,147
Mon Jan 15 22:43:33 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,148

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
x[0]=getMin();
x[1]=getStartValue();

Time : 18/01/15 22:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
verifySequence(x[0],x[1],x[2]);
x[0]=getMin();
x[1]=getStartValue();

Time : 18/01/15 22:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
x[0]=getMin();

Time : 18/01/15 22:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
verifySequence(x[0],x[1],x[2]);
x[0]=getMin();

Time : 18/01/15 22:49
----------------------------------------
Mon Jan 15 22:52:11 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,149
Mon Jan 15 22:55:25 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,150

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x[2]=getMax();
if(Precision.equals(y[1],0.0,1)){
return x[1];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 22:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[1],0.0,1)){
return x[1];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 22:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[1]=getStartValue();
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 23:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 23:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[1]=getStartValue();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 23:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 23:05
----------------------------------------
Mon Jan 15 23:11:12 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,151

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);
y[1]=computeObjectiveValue(x[1]);

Time : 18/01/15 23:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
verifySequence(x[0],x[1],x[2]);
y[1]=computeObjectiveValue(x[1]);

Time : 18/01/15 23:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 23:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/15 23:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x[1]=y[1];
x[2]=getMax();

Time : 18/01/15 23:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x[0]=y[0];
x[1]=y[1];
x[2]=getMax();

Time : 18/01/15 23:22
----------------------------------------
Timeout time : 18/01/15 23:24
Current failed test : org.apache.commons.math.ode.events.EventStateTest::testIssue695_purify_2 | 18/01/15 23:24
Mon Jan 15 23:26:15 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,209
Mon Jan 15 23:27:12 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,212
Mon Jan 15 23:27:13 AEDT 2018 Mon Jan 15 23:27:13 AEDT 2018 : org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,214=>Find no block
Mon Jan 15 23:27:15 AEDT 2018 org.apache.commons.math.ode.nonstiff.AdaptiveStepsizeIntegrator,252
Mon Jan 15 23:28:24 AEDT 2018 org.apache.commons.math.util.FastMath,3373
Mon Jan 15 23:52:35 AEDT 2018 org.apache.commons.math.util.FastMath,3375
Mon Jan 15 23:52:36 AEDT 2018 org.apache.commons.math.util.FastMath,3379
Mon Jan 15 23:57:47 AEDT 2018 org.apache.commons.math.ode.events.EventState,334
Tue Jan 16 00:00:59 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,172
Tue Jan 16 00:01:03 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,173
Tue Jan 16 00:01:05 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,340
Tue Jan 16 00:02:59 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,341
Tue Jan 16 00:03:00 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,342
Tue Jan 16 00:03:01 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,343
Tue Jan 16 00:03:03 AEDT 2018 org.apache.commons.math.ode.AbstractIntegrator,337
Tue Jan 16 00:03:05 AEDT 2018 org.apache.commons.math.ode.events.EventState,329
Tue Jan 16 00:03:10 AEDT 2018 org.apache.commons.math.ode.events.EventState,333
Tue Jan 16 00:03:11 AEDT 2018 org.apache.commons.math.ode.events.EventState,336
Tue Jan 16 00:56:21 AEDT 2018 org.apache.commons.math.ode.events.EventState,337
Tue Jan 16 00:56:23 AEDT 2018 org.apache.commons.math.ode.events.EventState,339
Tue Jan 16 00:56:24 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,287
Tue Jan 16 00:56:29 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,146
Tue Jan 16 00:59:20 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,147
Tue Jan 16 00:59:22 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,148

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
x[0]=getMin();
x[1]=getStartValue();

Time : 18/01/16 01:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
verifySequence(x[0],x[1],x[2]);
x[0]=getMin();
x[1]=getStartValue();

Time : 18/01/16 01:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
x[0]=getMin();

Time : 18/01/16 01:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(x[1],0.0,1)){
return x[1];
}
 final double[] y=new double[maximalOrder+1];
verifySequence(x[0],x[1],x[2]);
x[0]=getMin();

Time : 18/01/16 01:04
----------------------------------------
Tue Jan 16 01:08:12 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,149
Tue Jan 16 01:11:36 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,150

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x[2]=getMax();
if(Precision.equals(y[1],0.0,1)){
return x[1];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[1],0.0,1)){
return x[1];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[1]=getStartValue();
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:17
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:18
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[1]=getStartValue();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:21
----------------------------------------
Tue Jan 16 01:27:10 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,151

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);
y[1]=computeObjectiveValue(x[1]);

Time : 18/01/16 01:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
verifySequence(x[0],x[1],x[2]);
y[1]=computeObjectiveValue(x[1]);

Time : 18/01/16 01:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
x[2]=getMax();
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Precision.equals(y[2],0.0,1)){
return x[2];
}
verifySequence(x[0],x[1],x[2]);

Time : 18/01/16 01:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x[1]=y[1];
x[2]=getMax();

Time : 18/01/16 01:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
x[0]=y[0];
x[1]=y[1];
x[2]=getMax();

Time : 18/01/16 01:38
----------------------------------------
Tue Jan 16 01:45:37 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,154
Tue Jan 16 01:51:57 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,155
Tue Jan 16 01:52:02 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,161
Tue Jan 16 01:55:46 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,162
Tue Jan 16 01:55:47 AEDT 2018 org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver,169
Timeout time : 18/01/16 01:56
