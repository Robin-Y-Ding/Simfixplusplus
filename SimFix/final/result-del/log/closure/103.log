=================================================
Project : closure_103	start : 18/01/15 14:09
Current failed test : com.google.javascript.jscomp.DisambiguatePropertiesTest::testSupertypeReferenceOfSubtypeProperty | 18/01/15 14:13
Mon Jan 15 14:22:24 AEDT 2018 com.google.javascript.rhino.Node,1330
Mon Jan 15 14:22:46 AEDT 2018 Mon Jan 15 14:22:46 AEDT 2018 : com.google.javascript.rhino.Node,177=>Find no block
Mon Jan 15 14:22:50 AEDT 2018 com.google.javascript.rhino.Node,197
Mon Jan 15 14:24:30 AEDT 2018 com.google.javascript.rhino.Node,213
Mon Jan 15 14:24:58 AEDT 2018 com.google.javascript.rhino.Node,222
Mon Jan 15 14:25:33 AEDT 2018 com.google.javascript.rhino.Node,803
Mon Jan 15 15:08:24 AEDT 2018 com.google.javascript.rhino.Node,804
Mon Jan 15 15:08:28 AEDT 2018 com.google.javascript.rhino.Node,805
Mon Jan 15 15:08:32 AEDT 2018 com.google.javascript.rhino.Node,808
Mon Jan 15 15:08:36 AEDT 2018 com.google.javascript.rhino.Node,809
Mon Jan 15 15:08:40 AEDT 2018 com.google.javascript.rhino.Node,810
Mon Jan 15 15:08:45 AEDT 2018 com.google.javascript.rhino.Node,811
Mon Jan 15 15:08:49 AEDT 2018 com.google.javascript.rhino.Node,814
Mon Jan 15 15:08:53 AEDT 2018 com.google.javascript.rhino.Node,815
Mon Jan 15 15:08:57 AEDT 2018 com.google.javascript.rhino.Node,872
Mon Jan 15 15:09:08 AEDT 2018 com.google.javascript.rhino.Node,881
Mon Jan 15 15:13:25 AEDT 2018 com.google.javascript.rhino.Node,882
Mon Jan 15 15:13:28 AEDT 2018 com.google.javascript.rhino.Node,883
Mon Jan 15 15:13:32 AEDT 2018 com.google.javascript.rhino.Node,895
Timeout time : 18/01/15 16:03
Current failed test : com.google.javascript.jscomp.ControlFlowAnalysisTest::testInstanceOf | 18/01/15 16:03
Mon Jan 15 16:08:02 AEDT 2018 Mon Jan 15 16:08:02 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,77=>Find no block
Mon Jan 15 16:08:06 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,78
Mon Jan 15 16:12:43 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,79
Mon Jan 15 16:12:46 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,80
Mon Jan 15 16:12:50 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,81
Mon Jan 15 16:12:54 AEDT 2018 Mon Jan 15 16:12:54 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,82=>Find no block
Mon Jan 15 16:12:58 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,86
Mon Jan 15 16:21:35 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,88
Mon Jan 15 16:27:32 AEDT 2018 Mon Jan 15 16:27:32 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,92=>Find no block
Mon Jan 15 16:27:33 AEDT 2018 Mon Jan 15 16:27:33 AEDT 2018 : com.google.javascript.jscomp.CreateSyntheticBlocks,94=>Find no block
Mon Jan 15 16:27:33 AEDT 2018 com.google.javascript.jscomp.CreateSyntheticBlocks,97
Timeout time : 18/01/15 17:48
Current failed test : com.google.javascript.jscomp.CheckUnreachableCodeTest::testInstanceOfThrowsException | 18/01/15 17:48
Mon Jan 15 18:01:25 AEDT 2018 com.google.javascript.jscomp.ControlFlowAnalysis,628
Mon Jan 15 18:24:11 AEDT 2018 Mon Jan 15 18:24:11 AEDT 2018 : com.google.javascript.jscomp.ControlFlowAnalysis,637=>Find no block
Mon Jan 15 18:24:11 AEDT 2018 com.google.javascript.jscomp.JSError,215
Mon Jan 15 18:24:14 AEDT 2018 com.google.javascript.jscomp.CheckUnreachableCode,65

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.THIS){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:35
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:42
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&n.getType()==Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()!=Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:19
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:21
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:24
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&n.getType()==Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.CASE&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:30
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()!=Token.CASE&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getType()==Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:34
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(n.getLineno()!=-1&&parent.getType()==Token.EMPTY&&n.getFirstChild()==n){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(parent.getLineno()!=-1&&parent.getType()==Token.CASE&&n.getType()!=Token.BREAK){
compiler.report(JSError.make(t,n,level,UNREACHABLE_CODE));
new GraphReachability<Node,ControlFlowGraph.Branch>(t.getControlFlowGraph()).recompute(n);
return false;
}

Time : 18/01/15 19:39
----------------------------------------
Timeout time : 18/01/15 19:42
