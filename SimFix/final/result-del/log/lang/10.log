=================================================
Project : lang_10	start : 18/01/15 16:56
Current failed test : org.apache.commons.lang3.time.FastDateFormat_ParserTest::testLANG_831 | 18/01/15 16:57
Mon Jan 15 16:57:49 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,180
Mon Jan 15 16:57:52 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,685

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<=field){
StringBuilder sb=new StringBuilder(value);
sb.append(" not in (");
for(KeyValue textKeyValue : textKeyValues){
sb.append(textKeyValue.key).append(' ');
}
sb.setCharAt(sb.length()-1,')');
throw new IllegalArgumentException(sb.toString());
}

Time : 18/01/15 17:06
----------------------------------------
Mon Jan 15 17:19:51 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,686
Mon Jan 15 17:19:51 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,687
Mon Jan 15 17:19:52 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,696
Mon Jan 15 17:30:02 AEDT 2018 Mon Jan 15 17:30:02 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,697=>Find no block
Mon Jan 15 17:30:02 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,395
Mon Jan 15 17:30:16 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,396
Mon Jan 15 17:30:19 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,555
Mon Jan 15 17:30:22 AEDT 2018 Mon Jan 15 17:30:22 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,850=>Find no block
Mon Jan 15 17:30:23 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,382
Mon Jan 15 17:31:21 AEDT 2018 Mon Jan 15 17:31:21 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,383=>Find no block
Mon Jan 15 17:31:22 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,406
Mon Jan 15 17:31:44 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,407
Mon Jan 15 17:31:45 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,434

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] fieldKeyValues=new KeyValue[count(longValues)+count(shortValues)];
Arrays.sort(fieldKeyValues,IGNORE_CASE_COMPARATOR);
return fieldKeyValues;

Time : 18/01/15 17:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
KeyValue[] fieldKeyValues=new KeyValue[count(longValues)+count(shortValues)];
return fieldKeyValues;

Time : 18/01/15 17:33
----------------------------------------
Mon Jan 15 17:33:54 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,435
Mon Jan 15 17:33:55 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,436
Mon Jan 15 17:33:55 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,437
Mon Jan 15 17:33:55 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,446

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=0;
return count;

Time : 18/01/15 17:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int count=values==null?0:0;
return count;

Time : 18/01/15 17:42
----------------------------------------
Mon Jan 15 17:44:28 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,447
Mon Jan 15 17:44:30 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,448
Mon Jan 15 17:44:30 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,449
Mon Jan 15 17:44:31 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,450
Mon Jan 15 17:44:31 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,454
Mon Jan 15 17:44:31 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value.length()>=0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}

Time : 18/01/15 17:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/15 17:47
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
offset--;
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}

Time : 18/01/15 17:48
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}

Time : 18/01/15 17:50
----------------------------------------
Mon Jan 15 17:50:45 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,466
Mon Jan 15 17:50:45 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,467
Mon Jan 15 17:50:46 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,468
Mon Jan 15 17:50:46 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,469
Mon Jan 15 17:50:46 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,473

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(values==null){
for(int i=0;i<values.length;++i){
String value=values[i];
if(value.length()>0){
fieldKeyValues[offset++]=new KeyValue(value,i);
}
}
}
return offset;

Time : 18/01/15 17:51
----------------------------------------
Mon Jan 15 17:52:54 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,672

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 18/01/15 17:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 18/01/15 17:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[]");
escapeRegex(regex,textKeyValue.key,false).substring('|');
}

Time : 18/01/15 17:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
regex.append("[");
escapeRegex(regex,textKeyValue.key,false).append('|');
}

Time : 18/01/15 17:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 17:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 17:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
return true;

Time : 18/01/15 17:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
regex.setCharAt(regex.length()-1,')');
return false;

Time : 18/01/15 17:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return false;

Time : 18/01/15 18:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.append('(');
return false;

Time : 18/01/15 18:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:01
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 18:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return false;

Time : 18/01/15 18:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return false;

Time : 18/01/15 18:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
return true;

Time : 18/01/15 18:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 18:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.charAt('(');
return true;

Time : 18/01/15 18:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 18:10
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.setLength('(');
return true;

Time : 18/01/15 18:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<0){
throw new IllegalArgumentException("Threshold must not be negative");
}
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<0){
throw new IllegalArgumentException("Threshold must not be negative");
}
regex.append('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 18:12
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(field<0){
throw new IllegalArgumentException("Threshold must not be negative");
}
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 18:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
regex.setCharAt(regex.length()-1,')');
return true;

Time : 18/01/15 18:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
for(KeyValue textKeyValue : parser.getDisplayNames(field)){
escapeRegex(regex,textKeyValue.key,false).append('|');
}
return true;

Time : 18/01/15 18:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
regex.substring('(');
return true;

Time : 18/01/15 18:16
----------------------------------------
Mon Jan 15 18:19:40 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,673
Mon Jan 15 18:19:40 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,674
Mon Jan 15 18:19:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,676
Mon Jan 15 18:19:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,677
Mon Jan 15 18:19:42 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,379
Mon Jan 15 18:19:44 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,380
Mon Jan 15 18:19:45 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,381
Mon Jan 15 18:19:46 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,411
Mon Jan 15 18:19:53 AEDT 2018 Mon Jan 15 18:19:53 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,357=>Find no block
Mon Jan 15 18:19:54 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,358
Mon Jan 15 18:20:17 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,359
Mon Jan 15 18:20:17 AEDT 2018 Mon Jan 15 18:20:17 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,360=>Find no block
Mon Jan 15 18:20:18 AEDT 2018 Mon Jan 15 18:20:18 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,369=>Find no block
Mon Jan 15 18:20:18 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,250

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}

Time : 18/01/15 18:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Date date=parse(source,new ParsePosition(0));
if(date!=null){
if(locale.equals(JAPANESE_IMPERIAL)){
throw new ParseException("(The "+locale,0);
}
throw new ParseException("Unparseable date: \""+source,0);
}
return date;

Time : 18/01/15 18:25
----------------------------------------
Mon Jan 15 18:25:51 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,251
Mon Jan 15 18:25:51 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,260
Mon Jan 15 18:25:52 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,762
Mon Jan 15 18:25:53 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,213
Mon Jan 15 18:27:30 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,215
Mon Jan 15 18:31:18 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,741
Mon Jan 15 18:31:39 AEDT 2018 Mon Jan 15 18:31:39 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,742=>Find no block
Mon Jan 15 18:31:39 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,276

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));

Time : 18/01/15 18:32
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField==null){
return null;
}
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));
if(!matcher.lookingAt()){
return null;
}

Time : 18/01/15 18:33
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(currentFormatField==null){
return null;
}
int offset=pos.getIndex();
Matcher matcher=parsePattern.matcher(source.substring(offset));

Time : 18/01/15 18:34
----------------------------------------
Mon Jan 15 18:35:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,277
Mon Jan 15 18:35:42 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,278
Mon Jan 15 18:35:53 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,282

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/15 18:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);

Time : 18/01/15 18:37
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
pos.setIndex(offset+matcher.end());
if(!matcher.lookingAt()){
return null;
}
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/15 18:38
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
pos.setIndex(offset+matcher.end());
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/15 18:39
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(locale);
cal.clear();

Time : 18/01/15 18:40
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(locale);

Time : 18/01/15 18:41
----------------------------------------
Mon Jan 15 18:42:45 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,283

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/15 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=Calendar.getInstance(timeZone,locale);
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/15 18:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
cal.clear();
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/15 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
for(int i=0;i<strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/15 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);
cal.clear();

Time : 18/01/15 18:51
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Calendar cal=currentFormatField==null?null:Calendar.getInstance(timeZone,locale);

Time : 18/01/15 18:51
----------------------------------------
Mon Jan 15 18:53:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,285

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/15 18:54
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}

Time : 18/01/15 18:57
----------------------------------------
Mon Jan 15 19:00:14 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,286
Mon Jan 15 19:00:15 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,287
Mon Jan 15 19:00:15 AEDT 2018 Mon Jan 15 19:00:15 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,288=>Find no block
Mon Jan 15 19:00:15 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,289

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/15 19:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<=strategies.length;){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
return cal.getTime();

Time : 18/01/15 19:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();

Time : 18/01/15 19:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
for(int i=0;i<currentFormatField.length();){
Strategy strategy=strategies[i++];
strategy.setCalendar(this,cal,matcher.group(i));
}
return cal.getTime();

Time : 18/01/15 19:09
----------------------------------------
Mon Jan 15 19:18:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,290
Mon Jan 15 19:18:41 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,308
Mon Jan 15 19:19:04 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,309
Mon Jan 15 19:19:04 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,310
Mon Jan 15 19:19:05 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,235
Mon Jan 15 19:19:32 AEDT 2018 org.apache.commons.lang3.time.FastDatePrinter,236
Mon Jan 15 19:19:34 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,565
Mon Jan 15 19:23:24 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,145

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
currentFormatField=patternMatcher.group();
if(currentStrategy.addRegex(this,regex)){
collector.add(currentStrategy);
}

Time : 18/01/15 19:23
----------------------------------------
Mon Jan 15 19:24:43 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,314

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
wasWhite=!Character.isDigit(c);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:25
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:26
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(Character.isLowerCase(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}
wasWhite=false;

Time : 18/01/15 19:27
----------------------------------------
Mon Jan 15 19:28:15 AEDT 2018 Mon Jan 15 19:28:15 AEDT 2018 : org.apache.commons.lang3.time.FastDateParser,315=>Find no block
Mon Jan 15 19:28:15 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,340
Mon Jan 15 19:34:27 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,621
Mon Jan 15 19:38:11 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,622

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(c!='\''){
c=formatField.charAt(1);
}

Time : 18/01/15 19:38
----------------------------------------
Mon Jan 15 19:39:35 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,625
Mon Jan 15 19:39:35 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,304
Mon Jan 15 19:39:39 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,305
Mon Jan 15 19:50:54 AEDT 2018 org.apache.commons.lang3.time.FastDateParser,306

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isLetter(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isLetterOrDigit(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isDigit(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
char c=value.charAt(i);
if(Character.isHighSurrogate(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:54
----------------------------------------

----------------------------------------
----------------------------------------
Similar code block : 1.6797332034566244 : [/home/hz985/jiajun/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>0,0]
char ch=cs.charAt(i);
for(int j=0;j<searchLength;j++){
if(searchChars[j]==ch){
if(Character.isHighSurrogate(ch)){
if(j==searchLast){
return true;
}
if(i<csLast&&searchChars[j+1]==cs.charAt(i+1)){
return true;
}
}else {
return true;
}
}
}

Time : 18/01/15 19:54
----------------------------------------

----------------------------------------
----------------------------------------
Original source code : [/home/hz985/jiajun/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>306,313]
char c=value.charAt(i);
if(Character.isWhitespace(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:54
----------------------------------------

----------------------------------------
----------------------------------------
Find a patch : [/home/hz985/jiajun/d4j/projects/lang/lang_10_buggy/src/main/java/org/apache/commons/lang3/time/FastDateParser.java=>306,313]
char c=value.charAt(i);
if(Character.isHighSurrogate(c)){
if(!wasWhite){
wasWhite=true;
regex.append("\\s*+");
}
continue;
}

Time : 18/01/15 19:54
----------------------------------------
Success time : 18/01/15 19:54
