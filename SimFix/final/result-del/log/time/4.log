=================================================
Project : time_4	start : 18/01/15 18:15
Current failed test : org.joda.time.TestPartial_Basics::testWith3 | 18/01/15 18:16
Mon Jan 15 18:17:52 AEDT 2018 org.joda.time.field.ZeroIsMaxDateTimeField,111
Mon Jan 15 18:17:59 AEDT 2018 org.joda.time.field.ZeroIsMaxDateTimeField,138
Mon Jan 15 18:18:00 AEDT 2018 org.joda.time.field.ZeroIsMaxDateTimeField,178
Mon Jan 15 18:19:15 AEDT 2018 org.joda.time.field.ZeroIsMaxDateTimeField,148
Mon Jan 15 18:19:20 AEDT 2018 org.joda.time.DateTimeFieldType,514
Mon Jan 15 18:22:17 AEDT 2018 org.joda.time.Partial,447

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<2){
throw new IllegalArgumentException("The divisor must be at least 2");
}
if(rangeField.compareTo(loopRangeField)>0){
break;
}

Time : 18/01/15 18:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 18:31
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 18:33
----------------------------------------
Mon Jan 15 18:44:09 AEDT 2018 org.joda.time.Partial,448
Mon Jan 15 18:44:11 AEDT 2018 org.joda.time.Partial,449
Mon Jan 15 18:44:14 AEDT 2018 org.joda.time.Partial,445

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 18:49
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 18:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 18:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 18:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 19:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("Field type must not be null");
}
if(index<0||compare<=0){
throw new IllegalArgumentException();
}
if(compare>index){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}

Time : 18/01/15 19:02
----------------------------------------
Mon Jan 15 19:05:07 AEDT 2018 org.joda.time.field.BaseDurationField,150
Mon Jan 15 19:05:12 AEDT 2018 org.joda.time.DateTimeFieldType,457
Mon Jan 15 19:05:17 AEDT 2018 Mon Jan 15 19:05:17 AEDT 2018 : org.joda.time.Partial,446=>Find no block
Mon Jan 15 19:05:20 AEDT 2018 org.joda.time.Partial,443
Mon Jan 15 19:07:44 AEDT 2018 org.joda.time.Partial,444
Mon Jan 15 19:07:47 AEDT 2018 org.joda.time.DateTimeFieldType,227
Mon Jan 15 19:07:53 AEDT 2018 org.joda.time.Partial,439

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 18/01/15 19:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
if(index==0){
return this;
}
for(;i<iTypes.length;i++){
DateTimeFieldType loopType=iTypes[i];
DurationField loopUnitField=loopType.getDurationType().getField(iChronology);
if(loopUnitField.isSupported()){
int compare=unitField.compareTo(loopUnitField);
if(compare>0){
break;
}else if(compare==0){
DurationField rangeField=fieldType.getRangeDurationType().getField(iChronology);
DurationField loopRangeField=loopType.getRangeDurationType().getField(iChronology);
if(rangeField.compareTo(loopRangeField)>0){
break;
}
}
}
}

Time : 18/01/15 19:14
----------------------------------------
Mon Jan 15 19:21:02 AEDT 2018 org.joda.time.Partial,440
Mon Jan 15 19:21:26 AEDT 2018 org.joda.time.Partial,441
Mon Jan 15 19:21:28 AEDT 2018 org.joda.time.Partial,442
Mon Jan 15 19:21:31 AEDT 2018 org.joda.time.Partial,432
Mon Jan 15 19:24:51 AEDT 2018 org.joda.time.Partial,433
Mon Jan 15 19:24:51 AEDT 2018 org.joda.time.Partial,436

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 18/01/15 19:27
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int[] newValues=new int[newTypes.length];
int i=0;
if(fieldType==null){
throw new IllegalArgumentException("Field must not be null");
}
if(isSupported(fieldType)==false){
throw new IllegalArgumentException("Field \'"+fieldType);
}
DurationField unitField=fieldType.getDurationType().getField(iChronology);

Time : 18/01/15 19:28
----------------------------------------
Mon Jan 15 19:39:23 AEDT 2018 org.joda.time.Partial,437
Mon Jan 15 19:39:24 AEDT 2018 org.joda.time.Partial,438
Mon Jan 15 19:41:33 AEDT 2018 org.joda.time.Partial,456
Mon Jan 15 20:28:25 AEDT 2018 org.joda.time.Partial,457
Mon Jan 15 20:28:29 AEDT 2018 org.joda.time.Partial,458

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;

Time : 18/01/15 20:36
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
newTypes[i]=fieldType;

Time : 18/01/15 20:45
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value=newValues[0];
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 18/01/15 20:50
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value=newValues[0];
newTypes[i]=fieldType;
newValues[i]=value;

Time : 18/01/15 20:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(fieldType==null){
throw new IllegalArgumentException("The field type must not be null");
}
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;

Time : 18/01/15 20:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(index==0){
return this;
}
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;

Time : 18/01/15 21:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(this,iValues);
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;

Time : 18/01/15 21:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
if(value<=i){
value--;
}
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;

Time : 18/01/15 21:06
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value-='0';
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;
newValues[i]=value;

Time : 18/01/15 21:08
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value-='0';
System.arraycopy(iValues,0,newValues,0,i);
newTypes[i]=fieldType;

Time : 18/01/15 21:09
----------------------------------------
Mon Jan 15 21:11:01 AEDT 2018 org.joda.time.Partial,459

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
newTypes[i]=fieldType;

Time : 18/01/15 21:14
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
value=iValues[0];
newTypes[i]=fieldType;

Time : 18/01/15 21:33
----------------------------------------
Mon Jan 15 21:42:29 AEDT 2018 org.joda.time.Partial,460

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new Partial(iChronology,newTypes,newValues),newValues);
newValues[i]=value;
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);

Time : 18/01/15 21:44
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new Partial(iChronology,newTypes,newValues),newValues);
System.arraycopy(iTypes,i,newTypes,i+1,newTypes.length-i);
System.arraycopy(iValues,i,newValues,i+1,newValues.length-i);

Time : 18/01/15 21:46
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]

Time : 18/01/15 21:56
----------------------------------------
Mon Jan 15 22:13:37 AEDT 2018 org.joda.time.Partial,461
Mon Jan 15 22:34:30 AEDT 2018 org.joda.time.Partial,464
Mon Jan 15 22:46:41 AEDT 2018 org.joda.time.Partial,465

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new TimeOfDay(this,iChronology),newValues);
return newPartial;

Time : 18/01/15 22:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new TimeOfDay(this,iChronology),newValues);

Time : 18/01/15 23:00
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new TimeOfDay(this,iChronology),newValues);

Time : 18/01/15 23:02
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new MonthDay(this,iChronology),newValues);
return newPartial;

Time : 18/01/15 23:03
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new MonthDay(this,iChronology),newValues);

Time : 18/01/15 23:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new MonthDay(this,iChronology),newValues);

Time : 18/01/15 23:07
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonth(this,iChronology),newValues);
return newPartial;

Time : 18/01/15 23:09
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonth(this,iChronology),newValues);

Time : 18/01/15 23:11
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
iChronology.validate(new YearMonth(this,iChronology),newValues);

Time : 18/01/15 23:13
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonthDay(this,iChronology),newValues);
return newPartial;

Time : 18/01/15 23:15
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
Partial newPartial=new Partial(iChronology,newTypes,newValues);
iChronology.validate(new YearMonthDay(this,iChronology),newValues);

Time : 18/01/15 23:17
----------------------------------------
Timeout time : 18/01/15 23:18
