=================================================
Project : time_3	start : 18/01/16 04:27
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddWeeks_int_dstOverlapWinter_addZero_purify_2 | 18/01/16 04:29
Tue Jan 16 04:30:43 AEDT 2018 org.joda.time.MutableDateTime,723
Tue Jan 16 04:31:48 AEDT 2018 Tue Jan 16 04:31:48 AEDT 2018 : org.joda.time.MutableDateTime,724=>Find no block
Tue Jan 16 04:31:49 AEDT 2018 org.joda.time.MutableDateTime,785
Tue Jan 16 04:32:53 AEDT 2018 Tue Jan 16 04:32:53 AEDT 2018 : org.joda.time.MutableDateTime,786=>Find no block
Tue Jan 16 04:32:54 AEDT 2018 org.joda.time.DateTimeZone,931
Tue Jan 16 04:34:24 AEDT 2018 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 18/01/16 04:52
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 18/01/16 04:53
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
return offset;

Time : 18/01/16 05:16
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
return offset;

Time : 18/01/16 05:17
----------------------------------------
Tue Jan 16 05:23:45 AEDT 2018 org.joda.time.chrono.ZonedChronology,352
Tue Jan 16 05:23:45 AEDT 2018 org.joda.time.chrono.ZonedChronology,354
Tue Jan 16 05:23:45 AEDT 2018 org.joda.time.chrono.ZonedChronology,357
Tue Jan 16 05:23:45 AEDT 2018 org.joda.time.MutableDateTime,351
Tue Jan 16 05:24:29 AEDT 2018 Tue Jan 16 05:24:29 AEDT 2018 : org.joda.time.MutableDateTime,353=>Find no block
Tue Jan 16 05:24:29 AEDT 2018 Tue Jan 16 05:24:29 AEDT 2018 : org.joda.time.tz.ZoneInfoProvider,151=>Find no block
Tue Jan 16 05:24:29 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,152
Tue Jan 16 05:25:14 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,153
Tue Jan 16 05:25:14 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,154
Tue Jan 16 05:25:14 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,149
Tue Jan 16 05:25:15 AEDT 2018 org.joda.time.DateTimeZone,211
Timeout time : 18/01/16 05:30
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAdd_DurationFieldType_int_dstOverlapWinter_addZero_purify_2 | 18/01/16 05:30
Tue Jan 16 05:31:47 AEDT 2018 org.joda.time.MutableDateTime,639
Tue Jan 16 05:38:56 AEDT 2018 Tue Jan 16 05:38:56 AEDT 2018 : org.joda.time.MutableDateTime,640=>Find no block
Tue Jan 16 05:38:57 AEDT 2018 org.joda.time.MutableDateTime,636
Tue Jan 16 05:40:01 AEDT 2018 org.joda.time.chrono.BasicYearDateTimeField,60
Tue Jan 16 05:42:28 AEDT 2018 org.joda.time.MutableDateTime,785
Tue Jan 16 05:43:29 AEDT 2018 Tue Jan 16 05:43:29 AEDT 2018 : org.joda.time.MutableDateTime,786=>Find no block
Tue Jan 16 05:43:29 AEDT 2018 org.joda.time.field.ImpreciseDateTimeField,183
Tue Jan 16 05:44:16 AEDT 2018 org.joda.time.DateTimeZone,931
Tue Jan 16 05:45:41 AEDT 2018 org.joda.time.DurationFieldType,292
Tue Jan 16 05:47:51 AEDT 2018 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 18/01/16 06:04
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 18/01/16 06:05
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
return offset;

Time : 18/01/16 06:28
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
return offset;

Time : 18/01/16 06:29
----------------------------------------
Timeout time : 18/01/16 06:32
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddMonths_int_dstOverlapWinter_addZero_purify_2 | 18/01/16 06:32
Tue Jan 16 06:33:01 AEDT 2018 org.joda.time.MutableDateTime,702
Tue Jan 16 06:34:01 AEDT 2018 Tue Jan 16 06:34:01 AEDT 2018 : org.joda.time.MutableDateTime,703=>Find no block
Tue Jan 16 06:34:01 AEDT 2018 org.joda.time.chrono.BasicMonthOfYearDateTimeField,94
Tue Jan 16 06:39:10 AEDT 2018 org.joda.time.MutableDateTime,785
Tue Jan 16 06:40:10 AEDT 2018 Tue Jan 16 06:40:10 AEDT 2018 : org.joda.time.MutableDateTime,786=>Find no block
Tue Jan 16 06:40:10 AEDT 2018 org.joda.time.field.ImpreciseDateTimeField,183
Tue Jan 16 06:40:57 AEDT 2018 org.joda.time.DateTimeZone,931
Tue Jan 16 06:42:23 AEDT 2018 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 18/01/16 06:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 18/01/16 06:59
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
return offset;

Time : 18/01/16 07:23
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
return offset;

Time : 18/01/16 07:24
----------------------------------------
Tue Jan 16 07:30:21 AEDT 2018 org.joda.time.chrono.ZonedChronology,352
Tue Jan 16 07:30:21 AEDT 2018 org.joda.time.chrono.ZonedChronology,354
Tue Jan 16 07:30:22 AEDT 2018 org.joda.time.chrono.ZonedChronology,357
Tue Jan 16 07:30:22 AEDT 2018 org.joda.time.MutableDateTime,351
Tue Jan 16 07:31:05 AEDT 2018 Tue Jan 16 07:31:05 AEDT 2018 : org.joda.time.MutableDateTime,353=>Find no block
Tue Jan 16 07:31:05 AEDT 2018 Tue Jan 16 07:31:05 AEDT 2018 : org.joda.time.tz.ZoneInfoProvider,151=>Find no block
Tue Jan 16 07:31:06 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,152
Tue Jan 16 07:31:52 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,153
Tue Jan 16 07:31:53 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,154
Tue Jan 16 07:31:53 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,149
Tue Jan 16 07:31:53 AEDT 2018 org.joda.time.DateTimeZone,211
Timeout time : 18/01/16 07:33
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddYears_int_dstOverlapWinter_addZero_purify_2 | 18/01/16 07:33
Tue Jan 16 07:34:17 AEDT 2018 org.joda.time.MutableDateTime,660
Tue Jan 16 07:35:18 AEDT 2018 Tue Jan 16 07:35:18 AEDT 2018 : org.joda.time.MutableDateTime,661=>Find no block
Tue Jan 16 07:35:18 AEDT 2018 org.joda.time.chrono.BasicYearDateTimeField,60
Tue Jan 16 07:37:44 AEDT 2018 org.joda.time.MutableDateTime,785
Tue Jan 16 07:38:43 AEDT 2018 Tue Jan 16 07:38:43 AEDT 2018 : org.joda.time.MutableDateTime,786=>Find no block
Tue Jan 16 07:38:44 AEDT 2018 org.joda.time.field.ImpreciseDateTimeField,183
Tue Jan 16 07:39:31 AEDT 2018 org.joda.time.DateTimeZone,931
Tue Jan 16 07:40:55 AEDT 2018 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 18/01/16 07:57
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 18/01/16 07:58
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
return offset;

Time : 18/01/16 08:22
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
return offset;

Time : 18/01/16 08:22
----------------------------------------
Tue Jan 16 08:28:51 AEDT 2018 org.joda.time.chrono.ZonedChronology,352
Tue Jan 16 08:28:52 AEDT 2018 org.joda.time.chrono.ZonedChronology,354
Tue Jan 16 08:28:52 AEDT 2018 org.joda.time.chrono.ZonedChronology,357
Tue Jan 16 08:28:52 AEDT 2018 org.joda.time.MutableDateTime,351
Tue Jan 16 08:29:36 AEDT 2018 Tue Jan 16 08:29:36 AEDT 2018 : org.joda.time.MutableDateTime,353=>Find no block
Tue Jan 16 08:29:36 AEDT 2018 Tue Jan 16 08:29:36 AEDT 2018 : org.joda.time.tz.ZoneInfoProvider,151=>Find no block
Tue Jan 16 08:29:37 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,152
Tue Jan 16 08:30:21 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,153
Tue Jan 16 08:30:21 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,154
Tue Jan 16 08:30:21 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,149
Tue Jan 16 08:30:22 AEDT 2018 org.joda.time.DateTimeZone,211
Timeout time : 18/01/16 08:34
Current failed test : org.joda.time.TestMutableDateTime_Adds::testAddDays_int_dstOverlapWinter_addZero_purify_2 | 18/01/16 08:34
Tue Jan 16 08:35:27 AEDT 2018 org.joda.time.MutableDateTime,764
Tue Jan 16 08:36:29 AEDT 2018 Tue Jan 16 08:36:29 AEDT 2018 : org.joda.time.MutableDateTime,765=>Find no block
Tue Jan 16 08:36:29 AEDT 2018 org.joda.time.MutableDateTime,785
Tue Jan 16 08:37:30 AEDT 2018 Tue Jan 16 08:37:30 AEDT 2018 : org.joda.time.MutableDateTime,786=>Find no block
Tue Jan 16 08:37:30 AEDT 2018 org.joda.time.DateTimeZone,931
Tue Jan 16 08:38:54 AEDT 2018 org.joda.time.chrono.ZonedChronology,351

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
return offset;

Time : 18/01/16 08:55
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
if((instant^diff)<0&&(instant^offset)<0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
return offset;

Time : 18/01/16 08:56
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
long diff=instant-offset;
return offset;

Time : 18/01/16 09:20
----------------------------------------

----------------------------------------
----------------------------------------
Pass Single Test : [=>0,0]
int offset=this.iZone.getOffset(instant);
return offset;

Time : 18/01/16 09:20
----------------------------------------
Tue Jan 16 09:26:51 AEDT 2018 org.joda.time.chrono.ZonedChronology,352
Tue Jan 16 09:26:51 AEDT 2018 org.joda.time.chrono.ZonedChronology,354
Tue Jan 16 09:26:51 AEDT 2018 org.joda.time.chrono.ZonedChronology,357
Tue Jan 16 09:26:52 AEDT 2018 org.joda.time.MutableDateTime,351
Tue Jan 16 09:27:34 AEDT 2018 Tue Jan 16 09:27:34 AEDT 2018 : org.joda.time.MutableDateTime,353=>Find no block
Tue Jan 16 09:27:34 AEDT 2018 Tue Jan 16 09:27:34 AEDT 2018 : org.joda.time.tz.ZoneInfoProvider,151=>Find no block
Tue Jan 16 09:27:34 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,152
Tue Jan 16 09:28:19 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,153
Tue Jan 16 09:28:20 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,154
Tue Jan 16 09:28:20 AEDT 2018 org.joda.time.tz.ZoneInfoProvider,149
Tue Jan 16 09:28:20 AEDT 2018 org.joda.time.DateTimeZone,211
Timeout time : 18/01/16 09:35
