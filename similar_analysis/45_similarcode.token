The real buggy line:
return FastMath . pow ( 2 * FastMath . PI , - dim / 2 ) * 

The real patch line:
return FastMath . pow ( 2 * FastMath . PI , - 0.5 * dim ) * 

----------------------Similar Code (Buggy, patch):---------------------


return Math . abs ( u ) + Math . abs ( v ) ;
return FastMath . abs ( u ) + FastMath . abs ( v ) ;
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



return Math . abs ( u ) + Math . abs ( v ) ;
return FastMath . abs ( u ) + FastMath . abs ( v ) ;
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



return MathArrays . linearCombination ( x1 , y1 , - x2 , y2 ) ;
return LinearCombination . value ( x1 , y1 , - x2 , y2 ) ;
--File: src_main_java_org_apache_commons_math4_geometry_euclidean_twod_Cartesian2D.java



w . set ( i , w . getEntry ( i ) / si ) ;
w . setEntry ( i , w . getEntry ( i ) / si ) ;
--File: src_java_org_apache_commons_math_linear_SingularValueDecompositionImpl.java



MathUtils . sortInPlace ( this . x , this . y ) ;
MathArrays . sortInPlace ( this . x , this . y ) ;
--File: src_main_java_org_apache_commons_math_analysis_polynomials_PolynomialFunctionLagrangeForm.java



return Math . sqrt ( dx * dx + dy * dy ) ;
return FastMath . sqrt ( dx * dx + dy * dy ) ;
--File: src_test_java_org_apache_commons_math_estimation_LevenbergMarquardtEstimatorTest.java



return Math . sqrt ( dx * dx + dy * dy ) ;
return FastMath . sqrt ( dx * dx + dy * dy ) ;
--File: src_test_java_org_apache_commons_math_estimation_GaussNewtonEstimatorTest.java



return str . concat ( pad ( pads , padChar ) ) ;
return str . concat ( repeat ( padChar , pads ) ) ;
--File: src_main_java_org_apache_commons_lang3_StringUtils.java



builder . put ( typeParam , t . isBottom () ? UNKNOWN : t ) ;
builder . put ( typeParam , firstNonBottom ( t , UNKNOWN ) ) ;
--File: src_com_google_javascript_jscomp_NewTypeInference.java



return a * Math . cos ( omega * x + phi ) ;
return a * FastMath . cos ( omega * x + phi ) ;
--File: src_main_java_org_apache_commons_math_optimization_fitting_HarmonicFitter.java



return str . concat ( padding ( pads , padChar ) ) ;
return str . concat ( pad ( pads , padChar ) ) ;
--File: src_main_java_org_apache_commons_lang3_StringUtils.java



normal = new NormalDistributionImpl ( p , FastMath . sqrt ( p ) ) ;
normal = new NormalDistribution ( p , FastMath . sqrt ( p ) ) ;
--File: src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java



assertTrue ( FastMath . abs ( h ) < minStep ) ;
Assert . assertTrue ( FastMath . abs ( h ) < minStep ) ;
--File: src_test_java_org_apache_commons_math_ode_nonstiff_DormandPrince54IntegratorTest.java



setMaxGrowth ( Math . pow ( NUMBER_CONSTANT , - exp ) ) ;
setMaxGrowth ( FastMath . pow ( NUMBER_CONSTANT , - exp ) ) ;
--File: src_main_java_org_apache_commons_math_ode_MultistepIntegrator.java



setMaxGrowth ( Math . pow ( NUMBER_CONSTANT , - exp ) ) ;
setMaxGrowth ( FastMath . pow ( NUMBER_CONSTANT , - exp ) ) ;
--File: src_main_java_org_apache_commons_math_ode_MultistepIntegrator.java



Math . abs ( dt ) <= Math . ulp ( stepStart )
FastMath . abs ( dt ) <= FastMath . ulp ( stepStart )
--File: src_main_java_org_apache_commons_math_ode_nonstiff_AdamsMoultonIntegrator.java



Math . abs ( dt ) <= Math . ulp ( stepStart )
FastMath . abs ( dt ) <= FastMath . ulp ( stepStart )
--File: src_main_java_org_apache_commons_math_ode_nonstiff_RungeKuttaIntegrator.java



return ObjectUtilities . equal ( this . data , that.data ) ;
return ObjectUtils . equal ( this . data , that.data ) ;
--File: src_main_java_org_jfree_data_xy_XYIntervalSeriesCollection.java



return ObjectUtilities . equal ( this . data , that.data ) ;
return ObjectUtils . equal ( this . data , that.data ) ;
--File: src_main_java_org_jfree_data_time_ohlc_OHLCSeriesCollection.java



return ObjectUtilities . equal ( this . data , that.data ) ;
return ObjectUtils . equal ( this . data , that.data ) ;
--File: src_main_java_org_jfree_data_xy_YIntervalSeriesCollection.java



