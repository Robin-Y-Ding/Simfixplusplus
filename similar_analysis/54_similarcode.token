The real buggy line:
return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float . NaN : b ) ; 

The real patch line:
return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float . NaN : a ) ; 

----------------------Similar Code (Buggy, patch):---------------------


int lcm = FastMath . abs ( mulAndCheck ( a / gcd ( a , b ) , b ) ) ;
int lcm = FastMath . abs ( mulAndCheck ( a / ArithmeticsUtils . gcd ( a , b ) , b ) ) ;
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



long lcm = FastMath . abs ( mulAndCheck ( a / gcd ( a , b ) , b ) ) ;
long lcm = FastMath . abs ( mulAndCheck ( a / ArithmeticsUtils . gcd ( a , b ) , b ) ) ;
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



{ return equalsIncludingNaN ( x , y ) || ( Math . abs ( y - x ) <= eps ) ; }
{ return equalsIncludingNaN ( x , y ) || ( FastMath . abs ( y - x ) <= eps ) ; }
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



for ( double a : data ) { max = Math . max ( max , Math . abs ( a ) ) ; }
for ( double a : data ) { max = FastMath . max ( max , FastMath . abs ( a ) ) ; }
--File: src_main_java_org_apache_commons_math_linear_ArrayRealVector.java



double [] y = u . add ( x . operate ( b ) ) . getData () ;
double [] y = u . add ( x . operate ( b ) ) . toArray () ;
--File: src_test_java_org_apache_commons_math_stat_regression_GLSMultipleLinearRegressionTest.java



double [] y0 = { Math . sin ( a ) , Math . cos ( a ) } ;
double [] y0 = { FastMath . sin ( a ) , FastMath . cos ( a ) } ;
--File: src_test_java_org_apache_commons_math_ode_TestProblem4.java



if ( FastMath . abs ( m ) <= tol || MathUtils . equals ( fb , NUMBER_CONSTANT ) ) { return b ; }
if ( FastMath . abs ( m ) <= tol || Precision . equals ( fb , NUMBER_CONSTANT ) ) { return b ; }
--File: src_main_java_org_apache_commons_math_analysis_solvers_BrentSolver.java



final double [] actual = x . combine ( a , b , y ) . getData () ;
final double [] actual = x . combine ( a , b , y ) . toArray () ;
--File: src_test_java_org_apache_commons_math_linear_ArrayRealVectorTest.java



final double [] actual = x . combine ( a , b , y ) . getData () ;
final double [] actual = x . combine ( a , b , y ) . toArray () ;
--File: src_test_java_org_apache_commons_math_linear_ArrayRealVectorTest.java



if ( ! Double . isNaN ( var ) && var > Double.MIN_VALUE ) { return FastMath . sqrt ( rank ) ; }
if ( ! Double . isNaN ( var ) && var > Double.MIN_VALUE ) { return FastMath . sqrt ( var ) ; }
--File: src_main_java_org_apache_commons_math_stat_regression_RegressionResults.java



( a * FastMath . log ( x ) ) + ( b * FastMath . log ( NUMBER_CONSTANT - x ) )
( a * FastMath . log ( x ) ) + ( b * FastMath . log1p ( - x ) )
--File: src_main_java_org_apache_commons_math3_special_Beta.java



for ( double a : data ) { sum += Math . abs ( a ) ; }
for ( double a : data ) { sum += FastMath . abs ( a ) ; }
--File: src_main_java_org_apache_commons_math_linear_ArrayRealVector.java



return ( NUMBER_CONSTANT / Math.PI ) * ( scale / ( dev * dev + scale * scale ) ) ;
return ( NUMBER_CONSTANT / FastMath.PI ) * ( scale / ( dev * dev + scale * scale ) ) ;
--File: src_main_java_org_apache_commons_math_distribution_CauchyDistributionImpl.java



if ( b . compareTo ( BigDecimal . valueOf ( d ) ) == NUMBER_CONSTANT ) { return d ; }
if ( b . compareTo ( BigDecimal . valueOf ( d . doubleValue () ) ) == NUMBER_CONSTANT ) { return d ; }
--File: src_main_java_org_apache_commons_lang3_math_NumberUtils.java



return sc * FastMath . exp ( Gamma . logGamma ( NUMBER_CONSTANT + ( NUMBER_CONSTANT / sh ) ) ) ;
return sc * FastMath . exp ( LogGamma . value ( NUMBER_CONSTANT + ( NUMBER_CONSTANT / sh ) ) ) ;
--File: src_main_java_org_apache_commons_math4_distribution_WeibullDistribution.java



if ( this . showBase ) { result . append ( this . baseLabel ) ; result . append ( STRING_CONSTANT ) ; }
if ( this . showBase ) { result . append ( this . baseLabel ) ; result . append ( this . powerLabel ) ; }
--File: source_org_jfree_chart_util_LogFormat.java



if ( this . showBase ) { result . append ( this . baseLabel ) ; result . append ( STRING_CONSTANT ) ; }
if ( this . showBase ) { result . append ( this . baseLabel ) ; result . append ( this . powerLabel ) ; }
--File: source_org_jfree_chart_util_LogFormat.java



return lower + ( int ) ( Math . random () * ( upper - lower + NUMBER_CONSTANT ) ) ;
return lower + ( int ) ( rand . nextDouble () * ( upper - lower + NUMBER_CONSTANT ) ) ;
--File: src_java_org_apache_commons_math_RandomDataImpl.java



assertEquals ( ci , l40 [ i ] , Math . abs ( ci ) * NUMBER_CONSTANT ) ;
assertEquals ( ci , l40 [ i ] , FastMath . abs ( ci ) * NUMBER_CONSTANT ) ;
--File: src_test_java_org_apache_commons_math_analysis_polynomials_PolynomialsUtilsTest.java



{ norm = Math . max ( norm , Math . abs ( e . getValue () ) ) ; }
{ norm = FastMath . max ( norm , FastMath . abs ( e . getValue () ) ) ; }
--File: src_main_java_org_apache_commons_math_linear_AbstractRealVector.java



