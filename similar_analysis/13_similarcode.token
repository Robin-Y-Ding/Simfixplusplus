The real buggy line:
if ( x < 0 && prev == '-' ) { 

The real patch line:
if ( ( x < 0 || negativeZero ) && prev == '-' ) { 

----------------------Similar Code (Buggy, patch):---------------------


if ( x != x ) { return x ; }
if ( Double . isNaN ( x ) ) { return x ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( x != x ) { return x ; }
if ( Double . isNaN ( x ) ) { return x ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( x != x ) { return x ; }
if ( Double . isNaN ( x ) ) { return x ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( x != x ) { return x ; }
if ( Double . isNaN ( x ) ) { return x ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( x != x ) { return x ; }
if ( Double . isNaN ( x ) ) { return x ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( x != x ) { return Double.NaN ; }
if ( Double . isNaN ( x ) ) { return Double.NaN ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( x != x ) { return Double.NaN ; }
if ( Double . isNaN ( x ) ) { return Double.NaN ; }
--File: src_main_java_org_apache_commons_math4_util_FastMath.java



if ( y . equals ( py ) ) break;
if ( y . equals ( py ) ) { break; }
--File: src_main_java_org_apache_commons_math_dfp_DfpMath.java



if ( t == NUMBER_CONSTANT && i >= j ) continue;
if ( t == NUMBER_CONSTANT && i >= j ) { continue; }
--File: src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java



if ( defs == null ) { return; }
if ( defs . isEmpty () ) { return; }
--File: src_com_google_javascript_jscomp_DefinitionUseSiteFinder.java



if ( getRhs () == null ) { return; }
if ( getRhs () == null || shouldPreserve () ) { return; }
--File: src_com_google_javascript_jscomp_ijs_PotentialDeclaration.java



if ( ! forward ) h = - h ;
if ( ! forward ) { h = - h ; }
--File: src_main_java_org_apache_commons_math_ode_sampling_StepNormalizer.java



if ( ! n . isVar () ) { return; }
if ( ! NodeUtil . isNameDeclaration ( n ) ) { return; }
--File: src_com_google_javascript_jscomp_RescopeGlobalSymbols.java



if ( nameNode == null ) return;
if ( nameNode == null ) { return; }
--File: src_com_google_javascript_jscomp_FunctionInjector.java



if ( n < MathUtils.EPSILON ) { return zero ; }
if ( n < Precision.EPSILON ) { return zero ; }
--File: src_main_java_org_apache_commons_math_geometry_euclidean_threed_Line.java



return ( a == rhs.a ) ;
return a == rhs.a ;
--File: src_test_java_org_apache_commons_lang3_builder_HashCodeBuilderTest.java



return ( a == rhs.a ) ;
return a == rhs.a ;
--File: src_test_java_org_apache_commons_lang3_builder_EqualsBuilderTest.java



return ( a == rhs.a ) ;
return a == rhs.a ;
--File: src_test_java_org_apache_commons_lang3_builder_CompareToBuilderTest.java



verify ( mock ) . oneArg ( two ) ;
verify ( mock , NUMBER_CONSTANT ) . oneArg ( two ) ;
--File: test_org_mockito_usage_verification_VerificationUsingMatchersTest.java



if ( ! precheck () ) { return; }
if ( options . getInstrumentForCoverageOnly () ) { instrumentForCoverage ( options.instrumentBranchCoverage ) ; return; }
--File: src_com_google_javascript_jscomp_Compiler.java



