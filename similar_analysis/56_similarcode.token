The real buggy line:
out [ i ] [ j ] = 2 * ( 1 - tDistribution . cumulativeProbability ( t ) ) ; 

The real patch line:
out [ i ] [ j ] = 2 * tDistribution . cumulativeProbability ( - t ) ; 

----------------------Similar Code (Buggy, patch):---------------------


{ coeff [ i ] [ j ] = ( int ) MathUtils . binomialCoefficient ( i , j ) ; }
{ coeff [ i ] [ j ] = ( int ) ArithmeticsUtils . binomialCoefficient ( i , j ) ; }
--File: src_main_java_org_apache_commons_math_analysis_polynomials_PolynomialsUtils.java



{ coeff [ i ] [ j ] = ( int ) ArithmeticUtils . binomialCoefficient ( i , j ) ; }
{ coeff [ i ] [ j ] = ( int ) CombinatoricsUtils . binomialCoefficient ( i , j ) ; }
--File: src_main_java_org_apache_commons_math3_analysis_polynomials_PolynomialsUtils.java



{ coeff [ i ] [ j ] = ( int ) ArithmeticsUtils . binomialCoefficient ( i , j ) ; }
{ coeff [ i ] [ j ] = ( int ) ArithmeticUtils . binomialCoefficient ( i , j ) ; }
--File: src_main_java_org_apache_commons_math_analysis_polynomials_PolynomialsUtils.java



{ coeff [ i ] [ j ] = ( int ) CombinatoricsUtils . binomialCoefficient ( i , j ) ; }
{ coeff [ i ] [ j ] = ( int ) BinomialCoefficient . value ( i , j ) ; }
--File: src_main_java_org_apache_commons_math4_analysis_polynomials_PolynomialsUtils.java



x [ i ] = Complex . ofCartesian ( f . value ( t ) ) ;
x [ i ] = Complex . ofReal ( f . value ( t ) ) ;
--File: src_test_java_org_apache_commons_math4_transform_FastFourierTransformerTest.java



ret += c [ i ] * ArithmeticUtils . pow ( n , ( long ) i ) ;
ret += c [ i ] * ArithmeticUtils . pow ( n , i ) ;
--File: src_main_java_org_apache_commons_math3_util_Combinations.java



zones [ i ++ ] = new ZoneData ( id , DateTimeZone . getInstance ( id ) ) ;
zones [ i ++ ] = new ZoneData ( id , DateTimeZone . forID ( id ) ) ;
--File: JodaTime_src_example_org_joda_example_time_TimeZoneTable.java



{ stdDev [ i ] = Math . sqrt ( matrix . getEntry ( i , i ) ) ; }
{ stdDev [ i ] = FastMath . sqrt ( matrix . getEntry ( i , i ) ) ; }
--File: src_main_java_org_apache_commons_math_stat_descriptive_MultivariateSummaryStatistics.java



{ return cumulativeProbability ( ( int ) Math . floor ( x ) ) ; }
{ return cumulativeProbability ( ( int ) FastMath . floor ( x ) ) ; }
--File: src_main_java_org_apache_commons_math_distribution_AbstractIntegerDistribution.java



normal = new NormalDistributionImpl ( p , FastMath . sqrt ( p ) ) ;
normal = new NormalDistribution ( p , FastMath . sqrt ( p ) ) ;
--File: src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java



{ d [ r ] [ c ] = Math . log ( m . getEntry ( r , c ) ) ; }
{ d [ r ] [ c ] = FastMath . log ( m . getEntry ( r , c ) ) ; }
--File: src_main_java_org_apache_commons_math3_optim_nonlinear_scalar_noderiv_CMAESOptimizer.java



{ d [ r ] [ c ] = Math . log ( m . getEntry ( r , c ) ) ; }
{ d [ r ] [ c ] = FastMath . log ( m . getEntry ( r , c ) ) ; }
--File: src_main_java_org_apache_commons_math3_optimization_direct_CMAESOptimizer.java



{ d [ r ] [ c ] = Math . sqrt ( m . getEntry ( r , c ) ) ; }
{ d [ r ] [ c ] = FastMath . sqrt ( m . getEntry ( r , c ) ) ; }
--File: src_main_java_org_apache_commons_math3_optim_nonlinear_scalar_noderiv_CMAESOptimizer.java



{ d [ r ] [ c ] = Math . sqrt ( m . getEntry ( r , c ) ) ; }
{ d [ r ] [ c ] = FastMath . sqrt ( m . getEntry ( r , c ) ) ; }
--File: src_main_java_org_apache_commons_math3_optimization_direct_CMAESOptimizer.java



String [] parts = path . split ( Pattern . quote ( MODULE_SLASH ) ) ;
String [] parts = path . split ( MODULE_SLASH ) ;
--File: src_com_google_javascript_jscomp_deps_ModuleNames.java



{ result [ i ] = Math . sqrt ( sigma * betaVariance [ i ] [ i ] ) ; }
{ result [ i ] = FastMath . sqrt ( sigma * betaVariance [ i ] [ i ] ) ; }
--File: src_main_java_org_apache_commons_math_stat_regression_AbstractMultipleLinearRegression.java



{ simplex [ i ] = new PointCostPair ( vertices [ i ] ) ; }
{ simplex [ i ] = new PointCostPair ( vertices [ i ] , Double.NaN ) ; }
--File: src_mantissa_src_org_spaceroots_mantissa_optimization_DirectSearchOptimizer.java



packed [ i + NUMBER_CONSTANT ] = MathArrays . linearCombination ( dv , partials ) ;
packed [ i + NUMBER_CONSTANT ] = LinearCombination . value ( dv , partials ) ;
--File: src_main_java_org_apache_commons_math4_analysis_FunctionUtils.java



double invR3 = NUMBER_CONSTANT / ( r2 * Math . sqrt ( r2 ) ) ;
double invR3 = NUMBER_CONSTANT / ( r2 * FastMath . sqrt ( r2 ) ) ;
--File: src_test_java_org_apache_commons_math_ode_TestProblem3.java



{ result . put ( key , ObjectUtilities . clone ( value ) ) ; }
{ result . put ( key , ObjectUtils . clone ( value ) ) ; }
--File: src_main_java_org_jfree_chart_util_CloneUtils.java



