The real buggy line:
new Range ( 0.0 , constraint . getWidth ( ) - w [ 2 ] ) , 

The real patch line:
new Range ( 0.0 , Math . max ( constraint . getWidth ( ) - w [ 2 ] , 0.0 ) ) , 

----------------------Similar Code (Buggy, patch):---------------------


double delta = Math . abs ( getEntry ( i ) - v [ i ] ) ;
double delta = FastMath . abs ( getEntry ( i ) - v [ i ] ) ;
--File: src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java



final double dist = Math . abs ( z - x [ i ] ) ;
final double dist = FastMath . abs ( z - x [ i ] ) ;
--File: src_main_java_org_apache_commons_math_analysis_polynomials_PolynomialFunctionLagrangeForm.java



{ set ( i , Math . log10 ( getEntry ( i ) ) ) ; }
{ setEntry ( i , Math . log10 ( getEntry ( i ) ) ) ; }
--File: src_java_org_apache_commons_math_linear_SparseRealVector.java



{ set ( i , Math . acos ( getEntry ( i ) ) ) ; }
{ setEntry ( i , Math . acos ( getEntry ( i ) ) ) ; }
--File: src_java_org_apache_commons_math_linear_SparseRealVector.java



{ set ( i , Math . log ( getEntry ( i ) ) ) ; }
{ setEntry ( i , Math . log ( getEntry ( i ) ) ) ; }
--File: src_java_org_apache_commons_math_linear_SparseRealVector.java



w . set ( i , w . getEntry ( i ) / si ) ;
w . setEntry ( i , w . getEntry ( i ) / si ) ;
--File: src_java_org_apache_commons_math_linear_SingularValueDecompositionImpl.java



final double factor = - Math . sqrt ( weights [ i ] ) ;
final double factor = - Math . sqrt ( residualsWeights [ i ] ) ;
--File: src_main_java_org_apache_commons_math_optimization_general_AbstractLeastSquaresOptimizer.java



assertEquals ( STRING_CONSTANT , f . withZone ( UTC ) . print ( dt ) ) ;
assertEquals ( STRING_CONSTANT , f . withZoneUTC () . print ( dt ) ) ;
--File: JodaTime_src_test_org_joda_time_format_TestDateTimeFormatter.java



assertEquals ( reference , p . multiply ( q ) . toString () ) ;
Assert . assertEquals ( reference , p . multiply ( q ) . toString () ) ;
--File: src_test_java_org_apache_commons_math_analysis_polynomials_PolynomialsUtilsTest.java



final double [] d = MathUtils . copyOf ( direc [ i ] ) ;
final double [] d = MathArrays . copyOf ( direc [ i ] ) ;
--File: src_main_java_org_apache_commons_math_optimization_direct_PowellOptimizer.java



int k = ( int ) Math . ceil ( n * d ) ;
int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



{ addStep ( task , config . get ( STRING_CONSTANT ) ) ; return this ; }
{ addStep ( task , config ) ; return this ; }
--File: buildSrc_src_main_groovy_org_mockito_workflow_gradle_internal_ReleaseWorkflowExtension.java



double wi = Math . sqrt ( residualsWeights [ i ] ) ;
double wi = FastMath . sqrt ( residualsWeights [ i ] ) ;
--File: src_main_java_org_apache_commons_math_optimization_general_AbstractLeastSquaresOptimizer.java



{ result [ i ] = new Long ( array [ i ] ) ; }
{ result [ i ] = Long . valueOf ( array [ i ] ) ; }
--File: src_java_org_apache_commons_lang_ArrayUtils.java



double sqrt = Math . sqrt ( c [ ir ] [ ir ] ) ;
double sqrt = FastMath . sqrt ( c [ ir ] [ ir ] ) ;
--File: src_main_java_org_apache_commons_math_random_CorrelatedRandomVectorGenerator.java



{ result [ i ] = new Integer ( array [ i ] ) ; }
{ result [ i ] = Integer . valueOf ( array [ i ] ) ; }
--File: src_java_org_apache_commons_lang_ArrayUtils.java



double absAi = Math . abs ( coefficients [ i ] ) ;
double absAi = FastMath . abs ( coefficients [ i ] ) ;
--File: src_main_java_org_apache_commons_math_analysis_polynomials_PolynomialFunction.java



if ( Math . abs ( fn1 - fn ) <= threshold ) return o ;
if ( FastMath . abs ( fn1 - fn ) <= threshold ) return o ;
--File: src_main_java_org_apache_commons_math_geometry_Rotation.java



double factor = - Math . sqrt ( wm . getWeight () ) ;
double factor = - FastMath . sqrt ( wm . getWeight () ) ;
--File: src_main_java_org_apache_commons_math_estimation_AbstractEstimator.java



{ set ( i , getEntry ( i ) + d ) ; }
{ setEntry ( i , getEntry ( i ) + d ) ; }
--File: src_java_org_apache_commons_math_linear_SparseRealVector.java



