The real buggy line:
for ( int i = 0 ; i < weights . length ; i ++ ) { 

The real patch line:
for ( int i = begin ; i < begin + length ; i ++ ) { 

----------------------Similar Code (Buggy, patch):---------------------


final int k = ( int ) Math . ceil ( n * d ) ;
final int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



final int k = ( int ) Math . ceil ( n * d ) ;
final int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



int k = ( int ) Math . ceil ( n * d ) ;
int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



for ( int i = oldEnd ; i < newEnd ; i ++ ) { buf [ i ] = CHAR_CONS ; }
for ( int i = oldEnd ; i < newEnd ; i ++ ) { buffer [ i ] = CHAR_CONS ; }
--File: src_java_org_apache_commons_lang_text_StrBuilder.java



final double factor = - Math . sqrt ( weights [ i ] ) ;
final double factor = - Math . sqrt ( residualsWeights [ i ] ) ;
--File: src_main_java_org_apache_commons_math_optimization_general_AbstractLeastSquaresOptimizer.java



w . set ( i , w . getEntry ( i ) / si ) ;
w . setEntry ( i , w . getEntry ( i ) / si ) ;
--File: src_java_org_apache_commons_math_linear_SingularValueDecompositionImpl.java



{ set ( i , getEntry ( i ) + d ) ; }
{ setEntry ( i , getEntry ( i ) + d ) ; }
--File: src_java_org_apache_commons_math_linear_SparseRealVector.java



int value = ( Integer ) decoded . get ( i ) ;
int value = decoded . get ( i ) ;
--File: src_test_java_org_apache_commons_math_genetics_GeneticAlgorithmTestPermutations.java



for ( int i = oldEnd ; i < newEnd ; i ++ ) { buffer [ i ] = CHAR_CONS ; }
for ( int i = oldEnd ; i < newEnd ; i ++ ) { buffer [ i ] = CharUtils.NUL ; }
--File: src_main_java_org_apache_commons_lang3_text_StrBuilder.java



final double dist = Math . abs ( z - x [ i ] ) ;
final double dist = FastMath . abs ( z - x [ i ] ) ;
--File: src_main_java_org_apache_commons_math_analysis_polynomials_PolynomialFunctionLagrangeForm.java



for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { buf [ size ++ ] = padChar ; }
for ( int i = NUMBER_CONSTANT ; i < length ; i ++ ) { buffer [ size ++ ] = padChar ; }
--File: src_java_org_apache_commons_lang_text_StrBuilder.java



{ res . set ( i + virtualSize , a [ i ] ) ; }
{ res . setEntry ( i + virtualSize , a [ i ] ) ; }
--File: src_java_org_apache_commons_math_linear_SparseRealVector.java



{ numElements -= i ; if ( front ) startIndex += i ; }
{ numElements -= i ; if ( front ) { startIndex += i ; } }
--File: src_main_java_org_apache_commons_math_util_ResizableDoubleArray.java



int exponent = ( int ) ( y . log10 () * NUMBER_CONSTANT ) ;
int exponent = ( int ) ( y . intLog10 () * NUMBER_CONSTANT ) ;
--File: src_main_java_org_apache_commons_math3_dfp_Dfp.java



x [ i ] = Complex . ofCartesian ( f . value ( t ) ) ;
x [ i ] = Complex . ofReal ( f . value ( t ) ) ;
--File: src_test_java_org_apache_commons_math4_transform_FastFourierTransformerTest.java



{ sum += ( values [ i ] * weights [ i ] ) ; }
{ sum += values [ i ] * weights [ i ] ; }
--File: src_main_java_org_apache_commons_math_stat_descriptive_summary_Sum.java



final double [] d = MathUtils . copyOf ( direc [ i ] ) ;
final double [] d = MathArrays . copyOf ( direc [ i ] ) ;
--File: src_main_java_org_apache_commons_math_optimization_direct_PowellOptimizer.java



final int length = b . getDataRef () . length ;
final int length = b . getDimension () ;
--File: src_main_java_org_apache_commons_math3_linear_FieldLUDecomposition.java



int result = this . rangeAxes . indexOf ( axis ) ;
int result = findRangeAxisIndex ( axis ) ;
--File: source_org_jfree_chart_plot_CategoryPlot.java



int result = this . rangeAxes . indexOf ( axis ) ;
int result = findRangeAxisIndex ( axis ) ;
--File: source_org_jfree_chart_plot_XYPlot.java



