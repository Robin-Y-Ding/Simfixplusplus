The real buggy line:
ret = ( Double . doubleToRawLongBits ( real ) == Double . doubleToRawLongBits ( rhs . getReal ( ) ) ) && ( Double . doubleToRawLongBits ( imaginary ) == Double . doubleToRawLongBits ( rhs . getImaginary ( ) ) ) ; 

The real patch line:
ret = ( real == rhs . real ) && ( imaginary == rhs . imaginary ) ; 

----------------------Similar Code (Buggy, patch):---------------------


{ if ( isEquals == false ) { return this ; } return append ( Double . doubleToLongBits ( lhs ) , Double . doubleToLongBits ( rhs ) ) ; }
{ if ( ! isEquals ) { return this ; } return append ( Double . doubleToLongBits ( lhs ) , Double . doubleToLongBits ( rhs ) ) ; }
--File: src_org_mockito_internal_matchers_apachecommons_EqualsBuilder.java



{ if ( isEquals == false ) { return this ; } return append ( Double . doubleToLongBits ( lhs ) , Double . doubleToLongBits ( rhs ) ) ; }
{ if ( ! isEquals ) { return this ; } return append ( Double . doubleToLongBits ( lhs ) , Double . doubleToLongBits ( rhs ) ) ; }
--File: src_main_java_org_apache_commons_lang3_builder_EqualsBuilder.java



SimpleDependencyInfo . builder ( CLOSURE_PATH , SRC_PATH ) . setProvides ( ImmutableList . of ( STRING_CONSTANT ) ) . setRequires ( ImmutableList . of ( googRequireSymbol ( STRING_CONSTANT ) ) )
SimpleDependencyInfo . builder ( CLOSURE_PATH , SRC_PATH ) . setProvides ( ImmutableList . of ( STRING_CONSTANT ) ) . setRequires ( ImmutableList . of ( STRING_CONSTANT ) )
--File: test_com_google_javascript_jscomp_deps_JsFileParserTest.java



mathDotPowCall = withType ( IR . call ( mathPow . get () . cloneTree () , left , right ) , n . getTypeI () ) . useSourceInfoIfMissingFromForTree ( n )
mathDotPowCall = withType ( IR . call ( mathPow . get () . cloneTree () , left , right ) , n . getJSType () ) . useSourceInfoIfMissingFromForTree ( n )
--File: src_com_google_javascript_jscomp_Es7ToEs6Converter.java



{ if ( NodeUtil . getPureBooleanValue ( forCondition ) == TernaryValue.TRUE ) { forCondition . replaceWith ( IR . empty () ) ; compiler . reportCodeChange () ; } }
{ if ( NodeUtil . getPureBooleanValue ( forCondition ) == TernaryValue.TRUE ) { forCondition . replaceWith ( IR . empty () ) ; reportCodeChange () ; } }
--File: src_com_google_javascript_jscomp_PeepholeRemoveDeadCode.java



Mockito . mock ( instance . getClass () , withSettings () . spiedInstance ( instance ) . defaultAnswer ( Mockito.CALLS_REAL_METHODS ) . name ( field . getName () ) )
Mockito . mock ( instance . getClass () , withSettings () . spiedInstance ( instance ) . defaultAnswer ( CALLS_REAL_METHODS ) . name ( field . getName () ) )
--File: src_main_java_org_mockito_internal_configuration_SpyAnnotationEngine.java



new StringBuilder ( strLen ) . append ( Character . toLowerCase ( cs . charAt ( NUMBER_CONSTANT ) ) ) . append ( CharSequenceUtils . subSequence ( cs , NUMBER_CONSTANT ) )
new StringBuilder ( strLen ) . append ( Character . toLowerCase ( cs . charAt ( NUMBER_CONSTANT ) ) ) . append ( StringUtils . subSequence ( cs , NUMBER_CONSTANT ) )
--File: src_main_java_org_apache_commons_lang3_StringUtils.java



new StringBuilder ( strLen ) . append ( Character . toTitleCase ( cs . charAt ( NUMBER_CONSTANT ) ) ) . append ( CharSequenceUtils . subSequence ( cs , NUMBER_CONSTANT ) )
new StringBuilder ( strLen ) . append ( Character . toTitleCase ( cs . charAt ( NUMBER_CONSTANT ) ) ) . append ( StringUtils . subSequence ( cs , NUMBER_CONSTANT ) )
--File: src_main_java_org_apache_commons_lang3_StringUtils.java



new StringBuffer ( strLen ) . append ( Character . toLowerCase ( str . charAt ( NUMBER_CONSTANT ) ) ) . append ( str . substring ( NUMBER_CONSTANT ) )
new StringBuilder ( strLen ) . append ( Character . toLowerCase ( str . charAt ( NUMBER_CONSTANT ) ) ) . append ( str . substring ( NUMBER_CONSTANT ) )
--File: src_java_org_apache_commons_lang_StringUtils.java



new StringBuffer ( strLen ) . append ( Character . toTitleCase ( str . charAt ( NUMBER_CONSTANT ) ) ) . append ( str . substring ( NUMBER_CONSTANT ) )
new StringBuilder ( strLen ) . append ( Character . toTitleCase ( str . charAt ( NUMBER_CONSTANT ) ) ) . append ( str . substring ( NUMBER_CONSTANT ) )
--File: src_java_org_apache_commons_lang_StringUtils.java



if ( NodeUtil . isPropertyTest ( compiler , n ) || isPropertyAbsentTest ( n ) ) { allPropertyNames . add ( n . getLastChild () . getString () ) ; }
if ( NodeUtil . isPropertyTest ( compiler , n ) || isPropertyAbsentTest ( n ) ) { recordPropertyName ( n . getLastChild () . getString () , n ) ; }
--File: src_com_google_javascript_jscomp_GlobalTypeInfo.java



if ( ! originalBody . isBlock () ) { originalBody = IR . block ( IR . returnNode ( originalBody ) ) . useSourceInfoFromForTree ( originalBody ) ; }
if ( ! originalBody . isNormalBlock () ) { originalBody = IR . block ( IR . returnNode ( originalBody ) ) . useSourceInfoFromForTree ( originalBody ) ; }
--File: src_com_google_javascript_jscomp_RewriteAsyncFunctions.java



{ if ( maybeAssign . isAssign () ) { maybeAssign . putBooleanProp ( Node.ANALYZED_DURING_GTI , true ) ; } else { Preconditions . checkState ( maybeAssign . isExprResult () ) ; } }
{ if ( maybeAssign . isAssign () ) { maybeAssign . putBooleanProp ( Node.ANALYZED_DURING_GTI , true ) ; } else { checkState ( maybeAssign . isExprResult () ) ; } }
--File: src_com_google_javascript_jscomp_GlobalTypeInfo.java



return invocation . getMock () . equals ( actual . getMock () ) && hasSameMethod ( actual ) && new ArgumentsComparator () . argumentsMatch ( this , actual ) ;
return invocation . getMock () . equals ( actual . getMock () ) && hasSameMethod ( actual ) && argumentsMatch ( this , actual ) ;
--File: src_main_java_org_mockito_internal_invocation_InvocationMatcher.java



if ( MockUtil . isMock ( instance ) ) { return returnValues . valueFor ( invocation ) ; } else { return methodProxy . invoke ( instance , args ) ; }
if ( MockUtil . isMock ( instance ) ) { return returnValues . valueFor ( invocation ) ; } else { return methodProxy . invokeSuper ( proxy , args ) ; }
--File: src_org_mockito_internal_MockHandler.java



{ Preconditions . checkState ( ! NodeUtil . isFunctionObjectApply ( callNode ) ) ; argMap . put ( THIS_MARKER , NodeUtil . newUndefinedNode ( callNode ) ) ; }
{ checkState ( ! NodeUtil . isFunctionObjectApply ( callNode ) ) ; argMap . put ( THIS_MARKER , NodeUtil . newUndefinedNode ( callNode ) ) ; }
--File: src_com_google_javascript_jscomp_FunctionArgumentInjector.java



{ if ( candidateFieldToBeInjected . getName () . equals ( mockUtil . getMockName ( mock ) . toString () ) ) { mockNameMatches . add ( mock ) ; } }
{ if ( candidateFieldToBeInjected . getName () . equals ( getMockName ( mock ) . toString () ) ) { mockNameMatches . add ( mock ) ; } }
--File: src_main_java_org_mockito_internal_configuration_injection_filter_NameBasedCandidateFilter.java



{ super ( IR . getprop ( IR . objectlit () , name . cloneNode () ) , true ) ; Preconditions . checkArgument ( name . isString () ) ; }
{ super ( IR . getprop ( IR . objectlit () , name . cloneNode () ) , true ) ; checkArgument ( name . isString () ) ; }
--File: src_com_google_javascript_jscomp_DefinitionsRemover.java



rhs . matchesQualifiedName ( ABSTRACT_METHOD_NAME ) || ( GlobalTypeInfo . isCtorDefinedByCall ( lhs ) && ! isFunctionBind ( rhs . getFirstChild () , inEnv , true ) )
rhs . matchesQualifiedName ( ABSTRACT_METHOD_NAME ) || ( GlobalTypeInfoCollector . isCtorDefinedByCall ( lhs ) && ! isFunctionBind ( rhs . getFirstChild () , inEnv , true ) )
--File: src_com_google_javascript_jscomp_NewTypeInference.java



if ( ! languageOutIsAtLeast ( polyfill.polyfillVersion ) ) { traversal . report ( node , INSUFFICIENT_OUTPUT_VERSION_ERROR , name , compiler . getOptions () . getLanguageOut () . toString () ) ; }
if ( ! languageOutIsAtLeast ( polyfill.polyfillVersion ) ) { traversal . report ( node , INSUFFICIENT_OUTPUT_VERSION_ERROR , name , compiler . getOptions () . getOutputFeatureSet () . version () ) ; }
--File: src_com_google_javascript_jscomp_RewritePolyfills.java



