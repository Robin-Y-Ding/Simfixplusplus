The real buggy line:
return ( Double . isNaN ( x ) && Double . isNaN ( y ) ) || x == y ; 

The real patch line:
return equals ( x , y , 1 ) ; 

----------------------Similar Code (Buggy, patch):---------------------


if ( isNaN () || Double . isNaN ( rhs ) ) { return NaN ; }
if ( isNaN || Double . isNaN ( rhs ) ) { return NaN ; }
--File: src_main_java_org_apache_commons_math_complex_Complex.java



{ return ( Math . exp ( x ) + Math . exp ( - x ) ) / NUMBER_CONSTANT ; }
{ return ( FastMath . exp ( x ) + FastMath . exp ( - x ) ) / NUMBER_CONSTANT ; }
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



{ return ( Math . exp ( x ) - Math . exp ( - x ) ) / NUMBER_CONSTANT ; }
{ return ( FastMath . exp ( x ) - FastMath . exp ( - x ) ) / NUMBER_CONSTANT ; }
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



double [] y = u . add ( x . operate ( b ) ) . getData () ;
double [] y = u . add ( x . operate ( b ) ) . toArray () ;
--File: src_test_java_org_apache_commons_math_stat_regression_GLSMultipleLinearRegressionTest.java



assertTrue ( Double . isNaN ( sum . getResult () ) ) ;
assertEquals ( NUMBER_CONSTANT , sum . getResult () , NUMBER_CONSTANT ) ;
--File: src_test_java_org_apache_commons_math_stat_descriptive_summary_SumTest.java



assertTrue ( Double . isNaN ( sumSq . getResult () ) ) ;
assertEquals ( NUMBER_CONSTANT , sumSq . getResult () , NUMBER_CONSTANT ) ;
--File: src_test_java_org_apache_commons_math_stat_descriptive_summary_SumSqTest.java



assertTrue ( Double . isNaN ( product . getResult () ) ) ;
assertEquals ( NUMBER_CONSTANT , product . getResult () , NUMBER_CONSTANT ) ;
--File: src_test_java_org_apache_commons_math_stat_descriptive_summary_ProductTest.java



{ return Math . log ( x ) / Math . log ( base ) ; }
{ return FastMath . log ( x ) / FastMath . log ( base ) ; }
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



assertFalse ( u . equals ( new Double ( NUMBER_CONSTANT ) ) ) ;
assertFalse ( u . equals ( Double . valueOf ( NUMBER_CONSTANT ) ) ) ;
--File: src_test_org_apache_commons_math_stat_descriptive_MultivariateSummaryStatisticsTest.java



return Math . abs ( u ) + Math . abs ( v ) ;
return FastMath . abs ( u ) + FastMath . abs ( v ) ;
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



return Math . abs ( u ) + Math . abs ( v ) ;
return FastMath . abs ( u ) + FastMath . abs ( v ) ;
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



assertFalse ( zero . equals ( new Double ( NUMBER_CONSTANT ) ) ) ;
assertFalse ( zero . equals ( Double . valueOf ( NUMBER_CONSTANT ) ) ) ;
--File: src_test_org_apache_commons_math_fraction_FractionTest.java



{ return equals ( x , y , NUMBER_CONSTANT ) || Math . abs ( y - x ) <= eps ; }
{ return equals ( x , y , NUMBER_CONSTANT ) || FastMath . abs ( y - x ) <= eps ; }
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



assertEquals ( STRING_CONSTANT , f . withZone ( UTC ) . print ( dt ) ) ;
assertEquals ( STRING_CONSTANT , f . withZoneUTC () . print ( dt ) ) ;
--File: JodaTime_src_test_org_joda_time_format_TestDateTimeFormatter.java



return super . equals ( o ) && ( b == rhs.b ) ;
return super . equals ( o ) && b == rhs.b ;
--File: src_test_java_org_apache_commons_lang3_builder_HashCodeBuilderTest.java



return super . equals ( o ) && ( b == rhs.b ) ;
return super . equals ( o ) && b == rhs.b ;
--File: src_test_java_org_apache_commons_lang3_builder_EqualsBuilderTest.java



return super . equals ( o ) && ( b == rhs.b ) ;
return super . equals ( o ) && b == rhs.b ;
--File: src_test_java_org_apache_commons_lang3_builder_CompareToBuilderTest.java



{ return equalsIncludingNaN ( x , y ) || ( Math . abs ( y - x ) <= eps ) ; }
{ return equalsIncludingNaN ( x , y ) || ( FastMath . abs ( y - x ) <= eps ) ; }
--File: src_main_java_org_apache_commons_math_util_MathUtils.java



assertTrue ( Double . isNaN ( statistic . getResult () ) ) ;
checkClearValue ( statistic ) ;
--File: src_test_java_org_apache_commons_math_stat_descriptive_StorelessUnivariateStatisticAbstractTest.java



assertTrue ( Double . isNaN ( statistic . getResult () ) ) ;
checkClearValue ( statistic ) ;
--File: src_test_java_org_apache_commons_math_stat_descriptive_StorelessUnivariateStatisticAbstractTest.java



