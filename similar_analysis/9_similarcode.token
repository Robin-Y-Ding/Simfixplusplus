The real buggy line:
int g = ( int ) ( ( value - this . lowerBound ) / ( this . upperBound 

The real patch line:
int g = ( int ) ( ( v - this . lowerBound ) / ( this . upperBound 

----------------------Similar Code (Buggy, patch):---------------------


int digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
int digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



int digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
int digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



int digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
int digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



int digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
int digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ;
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



int exponent = ( int ) ( y . log10 () * NUMBER_CONSTANT ) ;
int exponent = ( int ) ( y . intLog10 () * NUMBER_CONSTANT ) ;
--File: src_main_java_org_apache_commons_math3_dfp_Dfp.java



int k = ( int ) Math . ceil ( n * d ) ;
int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



int offset = - ( int ) offsetFormatter () . parseMillis ( convId ) ;
int offset = - ( int ) offsetFormatter () . parseMillis ( convId , ISOChronology . getInstance ( UTC ) ) ;
--File: JodaTime_src_java_org_joda_time_DateTimeZone.java



int offset = - ( int ) offsetFormatter () . parseMillis ( id ) ;
int offset = - ( int ) offsetFormatter () . parseMillis ( id , ISOChronology . getInstance ( UTC ) ) ;
--File: JodaTime_src_java_org_joda_time_DateTimeZone.java



clone.bounds = ( Rectangle2D ) ShapeUtilities . clone ( this . bounds ) ;
clone.bounds = ( Rectangle2D ) ShapeUtils . clone ( this . bounds ) ;
--File: src_main_java_org_jfree_chart_block_AbstractBlock.java



final int k = ( int ) Math . ceil ( n * d ) ;
final int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



final int k = ( int ) Math . ceil ( n * d ) ;
final int k = ( int ) FastMath . ceil ( n * d ) ;
--File: src_main_java_org_apache_commons_math3_distribution_KolmogorovSmirnovDistribution.java



public int [] unboxing ( int . . . values ) { return values ; }
public int [] unboxing ( final int . . . values ) { return values ; }
--File: src_test_java_org_apache_commons_lang3_reflect_MethodUtilsTest.java



int endLimit = ( str . length () - searchStr . length () ) + NUMBER_CONSTANT ;
int endLimit = str . length () - searchStr . length () + NUMBER_CONSTANT ;
--File: src_main_java_org_apache_commons_lang3_StringUtils.java



{ digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
{ digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



{ digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
{ digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



{ digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
{ digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



{ digits = ( int ) ( StrictMath . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
{ digits = ( int ) ( Math . log ( value ) / LOG_10 ) + NUMBER_CONSTANT ; }
--File: JodaTime_src_java_org_joda_time_format_FormatUtils.java



clone.rows = ( List ) ObjectUtilities . deepClone ( this . rows ) ;
clone.rows = ( List ) ObjectUtils . deepClone ( this . rows ) ;
--File: src_main_java_org_jfree_data_DefaultKeyedValues2D.java



long index = Math . round ( ( Math . random () ) * testArray.length ) ;
long index = FastMath . round ( ( FastMath . random () ) * testArray.length ) ;
--File: src_test_java_org_apache_commons_math_stat_descriptive_StorelessUnivariateStatisticAbstractTest.java



int value = ( Integer ) decoded . get ( i ) ;
int value = decoded . get ( i ) ;
--File: src_test_java_org_apache_commons_math_genetics_GeneticAlgorithmTestPermutations.java



